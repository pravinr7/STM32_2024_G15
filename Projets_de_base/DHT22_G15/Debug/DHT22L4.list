
DHT22L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  080080b0  080080b0  000090b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a8  080084a8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084b0  080084b0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084b0  080084b0  000094b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084b4  080084b4  000094b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080084b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001d4  0800868c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800868c  0000a484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014230  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8b  00000000  00000000  0001e434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00020fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea3  00000000  00000000  00022288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c7d  00000000  00000000  0002312b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182ea  00000000  00000000  0004bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7413  00000000  00000000  00064092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b4a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fe8  00000000  00000000  0015b4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001614d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008098 	.word	0x08008098

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008098 	.word	0x08008098

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a2a      	ldr	r2, [pc, #168]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a18      	ldr	r2, [pc, #96]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_GPIO_Init+0xc4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 fa05 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fc0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480b      	ldr	r0, [pc, #44]	@ (8001000 <MX_GPIO_Init+0xc8>)
 8000fd2:	f001 f835 	bl	8002040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff0:	f001 f826 	bl	8002040 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	3728      	adds	r7, #40	@ 0x28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000800 	.word	0x48000800

08001004 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <MX_I2C1_Init+0x74>)
 800100a:	4a1c      	ldr	r2, [pc, #112]	@ (800107c <MX_I2C1_Init+0x78>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800100e:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <MX_I2C1_Init+0x7c>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001014:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_I2C1_Init+0x74>)
 800101c:	2201      	movs	r2, #1
 800101e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_I2C1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103e:	480e      	ldr	r0, [pc, #56]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001040:	f001 f9d8 	bl	80023f4 <HAL_I2C_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800104a:	f000 fc34 	bl	80018b6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104e:	2100      	movs	r1, #0
 8001050:	4809      	ldr	r0, [pc, #36]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001052:	f001 fe9b 	bl	8002d8c <HAL_I2CEx_ConfigAnalogFilter>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800105c:	f000 fc2b 	bl	80018b6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001060:	2100      	movs	r1, #0
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_I2C1_Init+0x74>)
 8001064:	f001 fedd 	bl	8002e22 <HAL_I2CEx_ConfigDigitalFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800106e:	f000 fc22 	bl	80018b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001f0 	.word	0x200001f0
 800107c:	40005400 	.word	0x40005400
 8001080:	10909cec 	.word	0x10909cec

08001084 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0ac      	sub	sp, #176	@ 0xb0
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2288      	movs	r2, #136	@ 0x88
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 ff2c 	bl	8005f02 <memset>
  if(i2cHandle->Instance==I2C1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a21      	ldr	r2, [pc, #132]	@ (8001134 <HAL_I2C_MspInit+0xb0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d13b      	bne.n	800112c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010b4:	2340      	movs	r3, #64	@ 0x40
 80010b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fd5f 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010cc:	f000 fbf3 	bl	80018b6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f0:	2312      	movs	r3, #18
 80010f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001102:	2304      	movs	r3, #4
 8001104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <HAL_I2C_MspInit+0xb8>)
 8001110:	f000 ff96 	bl	8002040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 800111a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800111e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_I2C_MspInit+0xb4>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	37b0      	adds	r7, #176	@ 0xb0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40005400 	.word	0x40005400
 8001138:	40021000 	.word	0x40021000
 800113c:	48000400 	.word	0x48000400

08001140 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af02      	add	r7, sp, #8
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f043 030c 	orr.w	r3, r3, #12
 8001156:	b2da      	uxtb	r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f043 0320 	orr.w	r3, r3, #32
 8001168:	b2db      	uxtb	r3, r3
 800116a:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 800116c:	f107 0118 	add.w	r1, r7, #24
 8001170:	230a      	movs	r3, #10
 8001172:	2202      	movs	r2, #2
 8001174:	486c      	ldr	r0, [pc, #432]	@ (8001328 <lcd_init+0x1e8>)
 8001176:	f003 fbf1 	bl	800495c <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800117a:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800117e:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8001180:	f107 0114 	add.w	r1, r7, #20
 8001184:	230a      	movs	r3, #10
 8001186:	2202      	movs	r2, #2
 8001188:	4867      	ldr	r0, [pc, #412]	@ (8001328 <lcd_init+0x1e8>)
 800118a:	f003 fbe7 	bl	800495c <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 800118e:	2364      	movs	r3, #100	@ 0x64
 8001190:	2205      	movs	r2, #5
 8001192:	217c      	movs	r1, #124	@ 0x7c
 8001194:	69f8      	ldr	r0, [r7, #28]
 8001196:	f001 fae1 	bl	800275c <HAL_I2C_IsDeviceReady>
 800119a:	4603      	mov	r3, r0
 800119c:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800119e:	f107 0113 	add.w	r1, r7, #19
 80011a2:	230a      	movs	r3, #10
 80011a4:	2201      	movs	r2, #1
 80011a6:	4860      	ldr	r0, [pc, #384]	@ (8001328 <lcd_init+0x1e8>)
 80011a8:	f003 fbd8 	bl	800495c <HAL_UART_Transmit>
	HAL_Delay(50);
 80011ac:	2032      	movs	r0, #50	@ 0x32
 80011ae:	f000 fe3d 	bl	8001e2c <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 80011b2:	f107 0218 	add.w	r2, r7, #24
 80011b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2302      	movs	r3, #2
 80011be:	217c      	movs	r1, #124	@ 0x7c
 80011c0:	69f8      	ldr	r0, [r7, #28]
 80011c2:	f001 f9b3 	bl	800252c <HAL_I2C_Master_Transmit>
 80011c6:	4603      	mov	r3, r0
 80011c8:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 80011ca:	f107 0112 	add.w	r1, r7, #18
 80011ce:	230a      	movs	r3, #10
 80011d0:	2201      	movs	r2, #1
 80011d2:	4855      	ldr	r0, [pc, #340]	@ (8001328 <lcd_init+0x1e8>)
 80011d4:	f003 fbc2 	bl	800495c <HAL_UART_Transmit>
	HAL_Delay(50);
 80011d8:	2032      	movs	r0, #50	@ 0x32
 80011da:	f000 fe27 	bl	8001e2c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80011de:	f107 0218 	add.w	r2, r7, #24
 80011e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2302      	movs	r3, #2
 80011ea:	217c      	movs	r1, #124	@ 0x7c
 80011ec:	69f8      	ldr	r0, [r7, #28]
 80011ee:	f001 f99d 	bl	800252c <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f000 fe1a 	bl	8001e2c <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 80011f8:	f107 0218 	add.w	r2, r7, #24
 80011fc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2302      	movs	r3, #2
 8001204:	217c      	movs	r1, #124	@ 0x7c
 8001206:	69f8      	ldr	r0, [r7, #28]
 8001208:	f001 f990 	bl	800252c <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2204      	movs	r2, #4
 8001210:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	b2db      	uxtb	r3, r3
 800121c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800121e:	f107 0218 	add.w	r2, r7, #24
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2302      	movs	r3, #2
 800122a:	217c      	movs	r1, #124	@ 0x7c
 800122c:	69f8      	ldr	r0, [r7, #28]
 800122e:	f001 f97d 	bl	800252c <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8001232:	2301      	movs	r3, #1
 8001234:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001236:	f107 0218 	add.w	r2, r7, #24
 800123a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2302      	movs	r3, #2
 8001242:	217c      	movs	r1, #124	@ 0x7c
 8001244:	69f8      	ldr	r0, [r7, #28]
 8001246:	f001 f971 	bl	800252c <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800124a:	2002      	movs	r0, #2
 800124c:	f000 fdee 	bl	8001e2c <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2202      	movs	r2, #2
 8001254:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	789b      	ldrb	r3, [r3, #2]
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	b2db      	uxtb	r3, r3
 8001260:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8001262:	f107 0218 	add.w	r2, r7, #24
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2302      	movs	r3, #2
 800126e:	217c      	movs	r1, #124	@ 0x7c
 8001270:	69f8      	ldr	r0, [r7, #28]
 8001272:	f001 f95b 	bl	800252c <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8001276:	2300      	movs	r3, #0
 8001278:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800127e:	f107 0210 	add.w	r2, r7, #16
 8001282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2302      	movs	r3, #2
 800128a:	21c4      	movs	r1, #196	@ 0xc4
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f001 f94d 	bl	800252c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8001292:	2308      	movs	r3, #8
 8001294:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001296:	23ff      	movs	r3, #255	@ 0xff
 8001298:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800129a:	f107 0210 	add.w	r2, r7, #16
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2302      	movs	r3, #2
 80012a6:	21c4      	movs	r1, #196	@ 0xc4
 80012a8:	69f8      	ldr	r0, [r7, #28]
 80012aa:	f001 f93f 	bl	800252c <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 80012ae:	2301      	movs	r3, #1
 80012b0:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 80012b2:	2320      	movs	r3, #32
 80012b4:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80012b6:	f107 0210 	add.w	r2, r7, #16
 80012ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2302      	movs	r3, #2
 80012c2:	21c4      	movs	r1, #196	@ 0xc4
 80012c4:	69f8      	ldr	r0, [r7, #28]
 80012c6:	f001 f931 	bl	800252c <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 80012ca:	2304      	movs	r3, #4
 80012cc:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80012ce:	23ff      	movs	r3, #255	@ 0xff
 80012d0:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	21c4      	movs	r1, #196	@ 0xc4
 80012e0:	69f8      	ldr	r0, [r7, #28]
 80012e2:	f001 f923 	bl	800252c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 80012e6:	2303      	movs	r3, #3
 80012e8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 80012ea:	23ff      	movs	r3, #255	@ 0xff
 80012ec:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2302      	movs	r3, #2
 80012fa:	21c4      	movs	r1, #196	@ 0xc4
 80012fc:	69f8      	ldr	r0, [r7, #28]
 80012fe:	f001 f915 	bl	800252c <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8001302:	2302      	movs	r3, #2
 8001304:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001306:	23ff      	movs	r3, #255	@ 0xff
 8001308:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800130a:	f107 020c 	add.w	r2, r7, #12
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	21c4      	movs	r1, #196	@ 0xc4
 8001318:	69f8      	ldr	r0, [r7, #28]
 800131a:	f001 f907 	bl	800252c <HAL_I2C_Master_Transmit>


}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002ac 	.word	0x200002ac

0800132c <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	@ (8001358 <clearlcd+0x2c>)
 8001336:	f000 f83c 	bl	80013b2 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <clearlcd+0x30>)
 800133c:	4806      	ldr	r0, [pc, #24]	@ (8001358 <clearlcd+0x2c>)
 800133e:	f000 f80f 	bl	8001360 <lcd_print>
	lcd_position(&hi2c1,0,1);
 8001342:	2201      	movs	r2, #1
 8001344:	2100      	movs	r1, #0
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <clearlcd+0x2c>)
 8001348:	f000 f833 	bl	80013b2 <lcd_position>
	lcd_print(&hi2c1,"                ");
 800134c:	4903      	ldr	r1, [pc, #12]	@ (800135c <clearlcd+0x30>)
 800134e:	4802      	ldr	r0, [pc, #8]	@ (8001358 <clearlcd+0x2c>)
 8001350:	f000 f806 	bl	8001360 <lcd_print>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001f0 	.word	0x200001f0
 800135c:	080080b0 	.word	0x080080b0

08001360 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 800136e:	2340      	movs	r3, #64	@ 0x40
 8001370:	733b      	strb	r3, [r7, #12]
    int i=0;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001376:	e011      	b.n	800139c <lcd_print+0x3c>
    {
            data[1] = str[i];
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2302      	movs	r3, #2
 800138e:	217c      	movs	r1, #124	@ 0x7c
 8001390:	6938      	ldr	r0, [r7, #16]
 8001392:	f001 f8cb 	bl	800252c <HAL_I2C_Master_Transmit>
            i++;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e7      	bne.n	8001378 <lcd_print+0x18>
   }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b086      	sub	sp, #24
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	460b      	mov	r3, r1
 80013bc:	70fb      	strb	r3, [r7, #3]
 80013be:	4613      	mov	r3, r2
 80013c0:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 80013c6:	78bb      	ldrb	r3, [r7, #2]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d104      	bne.n	80013d6 <lcd_position+0x24>
    {
        col = col | 0x80;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013d2:	70fb      	strb	r3, [r7, #3]
 80013d4:	e003      	b.n	80013de <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80013dc:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80013e6:	f107 0208 	add.w	r2, r7, #8
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	217c      	movs	r1, #124	@ 0x7c
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f001 f899 	bl	800252c <HAL_I2C_Master_Transmit>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <delay_us>:
uint16_t somme , Temperature , Humidite;
uint8_t Reception=0;
float Temp=0.0;
float Humi=0.0;
void delay_us (uint16_t us)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);  // initialiser le timer a 0
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <delay_us+0x30>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim6)<us);  // attendre que le compteur atteint la valeur desiré mit en parametre
 8001416:	bf00      	nop
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <delay_us+0x30>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3f9      	bcc.n	8001418 <delay_us+0x14>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000260 	.word	0x20000260

08001438 <GPIO_INIT_OUTPUT>:
void GPIO_INIT_OUTPUT(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2108      	movs	r1, #8
 8001450:	4809      	ldr	r0, [pc, #36]	@ (8001478 <GPIO_INIT_OUTPUT+0x40>)
 8001452:	f000 ffb7 	bl	80023c4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001456:	2308      	movs	r3, #8
 8001458:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <GPIO_INIT_OUTPUT+0x40>)
 800146c:	f000 fde8 	bl	8002040 <HAL_GPIO_Init>
}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	48000400 	.word	0x48000400

0800147c <GPIO_INIT_INPUT>:
void GPIO_INIT_INPUT(void){
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001490:	2308      	movs	r3, #8
 8001492:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <GPIO_INIT_INPUT+0x34>)
 80014a2:	f000 fdcd 	bl	8002040 <HAL_GPIO_Init>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	48000400 	.word	0x48000400

080014b4 <start_DHT22>:
void start_DHT22(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	GPIO_INIT_OUTPUT();
 80014b8:	f7ff ffbe 	bl	8001438 <GPIO_INIT_OUTPUT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2108      	movs	r1, #8
 80014c0:	4808      	ldr	r0, [pc, #32]	@ (80014e4 <start_DHT22+0x30>)
 80014c2:	f000 ff7f 	bl	80023c4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fcb0 	bl	8001e2c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2108      	movs	r1, #8
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <start_DHT22+0x30>)
 80014d2:	f000 ff77 	bl	80023c4 <HAL_GPIO_WritePin>
	delay_us(35);
 80014d6:	2023      	movs	r0, #35	@ 0x23
 80014d8:	f7ff ff94 	bl	8001404 <delay_us>
	GPIO_INIT_INPUT();
 80014dc:	f7ff ffce 	bl	800147c <GPIO_INIT_INPUT>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	48000400 	.word	0x48000400

080014e8 <DHT22_Verification_Reponse>:
uint8_t DHT22_Verification_Reponse(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	GPIO_INIT_INPUT();
 80014ee:	f7ff ffc5 	bl	800147c <GPIO_INIT_INPUT>
	uint8_t Reponse = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	71fb      	strb	r3, [r7, #7]
	delay_us(30);
 80014f6:	201e      	movs	r0, #30
 80014f8:	f7ff ff84 	bl	8001404 <delay_us>
	if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)))
 80014fc:	2108      	movs	r1, #8
 80014fe:	4811      	ldr	r0, [pc, #68]	@ (8001544 <DHT22_Verification_Reponse+0x5c>)
 8001500:	f000 ff48 	bl	8002394 <HAL_GPIO_ReadPin>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <DHT22_Verification_Reponse+0x40>
	{
		delay_us(80);
 800150a:	2050      	movs	r0, #80	@ 0x50
 800150c:	f7ff ff7a 	bl	8001404 <delay_us>
			if ((HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_3))) Reponse=1;
 8001510:	2108      	movs	r1, #8
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <DHT22_Verification_Reponse+0x5c>)
 8001514:	f000 ff3e 	bl	8002394 <HAL_GPIO_ReadPin>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <DHT22_Verification_Reponse+0x3c>
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	e001      	b.n	8001528 <DHT22_Verification_Reponse+0x40>
			else Reponse= -1;
 8001524:	23ff      	movs	r3, #255	@ 0xff
 8001526:	71fb      	strb	r3, [r7, #7]
	}
	while((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))){}
 8001528:	bf00      	nop
 800152a:	2108      	movs	r1, #8
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <DHT22_Verification_Reponse+0x5c>)
 800152e:	f000 ff31 	bl	8002394 <HAL_GPIO_ReadPin>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f8      	bne.n	800152a <DHT22_Verification_Reponse+0x42>

			return Reponse;
 8001538:	79fb      	ldrb	r3, [r7, #7]

}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	48000400 	.word	0x48000400

08001548 <Lecture_DHT22>:
uint8_t Lecture_DHT22(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	uint8_t octet_mesure,j;
	for(j=0;j<8;j++)
 800154e:	2300      	movs	r3, #0
 8001550:	71bb      	strb	r3, [r7, #6]
 8001552:	e037      	b.n	80015c4 <Lecture_DHT22+0x7c>
	{
		while (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))){}
 8001554:	bf00      	nop
 8001556:	2108      	movs	r1, #8
 8001558:	481e      	ldr	r0, [pc, #120]	@ (80015d4 <Lecture_DHT22+0x8c>)
 800155a:	f000 ff1b 	bl	8002394 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f8      	beq.n	8001556 <Lecture_DHT22+0xe>
		delay_us(40);
 8001564:	2028      	movs	r0, #40	@ 0x28
 8001566:	f7ff ff4d 	bl	8001404 <delay_us>
		if (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)))
 800156a:	2108      	movs	r1, #8
 800156c:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <Lecture_DHT22+0x8c>)
 800156e:	f000 ff11 	bl	8002394 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10e      	bne.n	8001596 <Lecture_DHT22+0x4e>
		{
			octet_mesure &= ~(1<<(7-j));
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2201      	movs	r2, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	b25b      	sxtb	r3, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	b25a      	sxtb	r2, r3
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	4013      	ands	r3, r2
 8001590:	b25b      	sxtb	r3, r3
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	e00b      	b.n	80015ae <Lecture_DHT22+0x66>

		}
		else
		{
			octet_mesure |= (1<<(7-j));
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	f1c3 0307 	rsb	r3, r3, #7
 800159c:	2201      	movs	r2, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	b25a      	sxtb	r2, r3
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	71fb      	strb	r3, [r7, #7]
		}
		while((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))){}
 80015ae:	bf00      	nop
 80015b0:	2108      	movs	r1, #8
 80015b2:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <Lecture_DHT22+0x8c>)
 80015b4:	f000 feee 	bl	8002394 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f8      	bne.n	80015b0 <Lecture_DHT22+0x68>
	for(j=0;j<8;j++)
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	3301      	adds	r3, #1
 80015c2:	71bb      	strb	r3, [r7, #6]
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b07      	cmp	r3, #7
 80015c8:	d9c4      	bls.n	8001554 <Lecture_DHT22+0xc>
	}
	return octet_mesure;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	48000400 	.word	0x48000400

080015d8 <affichage_temperature>:
void affichage_temperature(float Temperature){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0a01 	vstr	s0, [r7, #4]
	char txt[20]={0};
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
	sprintf(txt,"Temp:%.1f C",Temperature);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	f107 000c 	add.w	r0, r7, #12
 8001602:	490a      	ldr	r1, [pc, #40]	@ (800162c <affichage_temperature+0x54>)
 8001604:	f004 fc1a 	bl	8005e3c <siprintf>
	clearlcd();
 8001608:	f7ff fe90 	bl	800132c <clearlcd>
	lcd_position(&hi2c1,0,0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <affichage_temperature+0x58>)
 8001612:	f7ff fece 	bl	80013b2 <lcd_position>
	lcd_print(&hi2c1,txt);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <affichage_temperature+0x58>)
 800161e:	f7ff fe9f 	bl	8001360 <lcd_print>
}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	080080c4 	.word	0x080080c4
 8001630:	200001f0 	.word	0x200001f0

08001634 <affichage_humidite>:
void affichage_humidite(float Humidite){
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	ed87 0a01 	vstr	s0, [r7, #4]
	char txt[20]={0};
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
	sprintf(txt,"Humi:%.1f",Humidite);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7fe ff79 	bl	8000548 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	f107 000c 	add.w	r0, r7, #12
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <affichage_humidite+0x60>)
 8001660:	f004 fbec 	bl	8005e3c <siprintf>
	lcd_position(&hi2c1,0,1);
 8001664:	2201      	movs	r2, #1
 8001666:	2100      	movs	r1, #0
 8001668:	480b      	ldr	r0, [pc, #44]	@ (8001698 <affichage_humidite+0x64>)
 800166a:	f7ff fea2 	bl	80013b2 <lcd_position>
	lcd_print(&hi2c1,txt);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	4808      	ldr	r0, [pc, #32]	@ (8001698 <affichage_humidite+0x64>)
 8001676:	f7ff fe73 	bl	8001360 <lcd_print>
	lcd_position(&hi2c1,10,1);
 800167a:	2201      	movs	r2, #1
 800167c:	210a      	movs	r1, #10
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <affichage_humidite+0x64>)
 8001680:	f7ff fe97 	bl	80013b2 <lcd_position>
		lcd_print(&hi2c1,"%");
 8001684:	4905      	ldr	r1, [pc, #20]	@ (800169c <affichage_humidite+0x68>)
 8001686:	4804      	ldr	r0, [pc, #16]	@ (8001698 <affichage_humidite+0x64>)
 8001688:	f7ff fe6a 	bl	8001360 <lcd_print>

}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	080080d0 	.word	0x080080d0
 8001698:	200001f0 	.word	0x200001f0
 800169c:	080080dc 	.word	0x080080dc

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a4:	f000 fb46 	bl	8001d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f8b4 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ac:	f7ff fc44 	bl	8000f38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016b0:	f000 fa8a 	bl	8001bc8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016b4:	f7ff fca6 	bl	8001004 <MX_I2C1_Init>
  MX_TIM6_Init();
 80016b8:	f000 fa30 	bl	8001b1c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 80016bc:	4846      	ldr	r0, [pc, #280]	@ (80017d8 <main+0x138>)
 80016be:	f002 ff75 	bl	80045ac <HAL_TIM_Base_Start>
    clearlcd();
 80016c2:	f7ff fe33 	bl	800132c <clearlcd>
    lcd_init(&hi2c1,&lcddata);
 80016c6:	4945      	ldr	r1, [pc, #276]	@ (80017dc <main+0x13c>)
 80016c8:	4845      	ldr	r0, [pc, #276]	@ (80017e0 <main+0x140>)
 80016ca:	f7ff fd39 	bl	8001140 <lcd_init>
    lcd_position(&hi2c1,1,1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2101      	movs	r1, #1
 80016d2:	4843      	ldr	r0, [pc, #268]	@ (80017e0 <main+0x140>)
 80016d4:	f7ff fe6d 	bl	80013b2 <lcd_position>
    lcd_print(&hi2c1,"Initialisation");
 80016d8:	4942      	ldr	r1, [pc, #264]	@ (80017e4 <main+0x144>)
 80016da:	4841      	ldr	r0, [pc, #260]	@ (80017e0 <main+0x140>)
 80016dc:	f7ff fe40 	bl	8001360 <lcd_print>
    HAL_Delay(2000);
 80016e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016e4:	f000 fba2 	bl	8001e2c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start_DHT22();
 80016e8:	f7ff fee4 	bl	80014b4 <start_DHT22>
	  Reception=DHT22_Verification_Reponse();
 80016ec:	f7ff fefc 	bl	80014e8 <DHT22_Verification_Reponse>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <main+0x148>)
 80016f6:	701a      	strb	r2, [r3, #0]
	  Humidite_octet_1 = Lecture_DHT22();
 80016f8:	f7ff ff26 	bl	8001548 <Lecture_DHT22>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <main+0x14c>)
 8001702:	701a      	strb	r2, [r3, #0]
	  Humidite_octet_2 = Lecture_DHT22();
 8001704:	f7ff ff20 	bl	8001548 <Lecture_DHT22>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b38      	ldr	r3, [pc, #224]	@ (80017f0 <main+0x150>)
 800170e:	701a      	strb	r2, [r3, #0]
	  Temperature_octet_1 = Lecture_DHT22();
 8001710:	f7ff ff1a 	bl	8001548 <Lecture_DHT22>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <main+0x154>)
 800171a:	701a      	strb	r2, [r3, #0]
	  Temperature_octet_2  = Lecture_DHT22();
 800171c:	f7ff ff14 	bl	8001548 <Lecture_DHT22>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <main+0x158>)
 8001726:	701a      	strb	r2, [r3, #0]
	  somme = Lecture_DHT22();
 8001728:	f7ff ff0e 	bl	8001548 <Lecture_DHT22>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <main+0x15c>)
 8001732:	801a      	strh	r2, [r3, #0]
	  Temperature= (Temperature_octet_1<<8)|Temperature_octet_2;
 8001734:	4b2f      	ldr	r3, [pc, #188]	@ (80017f4 <main+0x154>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21a      	sxth	r2, r3
 800173c:	4b2e      	ldr	r3, [pc, #184]	@ (80017f8 <main+0x158>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b21b      	sxth	r3, r3
 8001742:	4313      	orrs	r3, r2
 8001744:	b21b      	sxth	r3, r3
 8001746:	b29a      	uxth	r2, r3
 8001748:	4b2d      	ldr	r3, [pc, #180]	@ (8001800 <main+0x160>)
 800174a:	801a      	strh	r2, [r3, #0]
	  Humidite=(Humidite_octet_1<<8)|Humidite_octet_2;
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <main+0x14c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <main+0x150>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b21b      	sxth	r3, r3
 800175a:	4313      	orrs	r3, r2
 800175c:	b21b      	sxth	r3, r3
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <main+0x164>)
 8001762:	801a      	strh	r2, [r3, #0]
	  Temp=(float)(Temperature/10.0);
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <main+0x160>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fedb 	bl	8000524 <__aeabi_i2d>
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <main+0x168>)
 8001774:	f7ff f86a 	bl	800084c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff fa12 	bl	8000ba8 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	4a21      	ldr	r2, [pc, #132]	@ (800180c <main+0x16c>)
 8001788:	6013      	str	r3, [r2, #0]
	  Humi=(float)(Humidite/10.0);
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <main+0x164>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fec8 	bl	8000524 <__aeabi_i2d>
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <main+0x168>)
 800179a:	f7ff f857 	bl	800084c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff f9ff 	bl	8000ba8 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <main+0x170>)
 80017ae:	6013      	str	r3, [r2, #0]
	  affichage_temperature(Temp);
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <main+0x16c>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	f7ff ff0d 	bl	80015d8 <affichage_temperature>
	  affichage_humidite(Humi);
 80017be:	4b14      	ldr	r3, [pc, #80]	@ (8001810 <main+0x170>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f7ff ff34 	bl	8001634 <affichage_humidite>
	  HAL_Delay(2500);
 80017cc:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80017d0:	f000 fb2c 	bl	8001e2c <HAL_Delay>
	  start_DHT22();
 80017d4:	bf00      	nop
 80017d6:	e787      	b.n	80016e8 <main+0x48>
 80017d8:	20000260 	.word	0x20000260
 80017dc:	20000244 	.word	0x20000244
 80017e0:	200001f0 	.word	0x200001f0
 80017e4:	080080e0 	.word	0x080080e0
 80017e8:	20000252 	.word	0x20000252
 80017ec:	20000247 	.word	0x20000247
 80017f0:	20000248 	.word	0x20000248
 80017f4:	20000249 	.word	0x20000249
 80017f8:	2000024a 	.word	0x2000024a
 80017fc:	2000024c 	.word	0x2000024c
 8001800:	2000024e 	.word	0x2000024e
 8001804:	20000250 	.word	0x20000250
 8001808:	40240000 	.word	0x40240000
 800180c:	20000254 	.word	0x20000254
 8001810:	20000258 	.word	0x20000258

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	@ 0x58
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2244      	movs	r2, #68	@ 0x44
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f004 fb6d 	bl	8005f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	463b      	mov	r3, r7
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001836:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800183a:	f001 fb4d 	bl	8002ed8 <HAL_PWREx_ControlVoltageScaling>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001844:	f000 f837 	bl	80018b6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001848:	2302      	movs	r3, #2
 800184a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001850:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001852:	2310      	movs	r3, #16
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185a:	2302      	movs	r3, #2
 800185c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800185e:	2301      	movs	r3, #1
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001862:	230a      	movs	r3, #10
 8001864:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001866:	2307      	movs	r3, #7
 8001868:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186e:	2302      	movs	r3, #2
 8001870:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4618      	mov	r0, r3
 8001878:	f001 fb84 	bl	8002f84 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001882:	f000 f818 	bl	80018b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	230f      	movs	r3, #15
 8001888:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2303      	movs	r3, #3
 800188c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800189a:	463b      	mov	r3, r7
 800189c:	2104      	movs	r1, #4
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 ff4c 	bl	800373c <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018aa:	f000 f804 	bl	80018b6 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3758      	adds	r7, #88	@ 0x58
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ba:	b672      	cpsid	i
}
 80018bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018be:	bf00      	nop
 80018c0:	e7fd      	b.n	80018be <Error_Handler+0x8>
	...

080018c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_MspInit+0x44>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001908 <HAL_MspInit+0x44>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <HAL_MspInit+0x44>)
 80018d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_MspInit+0x44>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <HAL_MspInit+0x44>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_MspInit+0x44>)
 80018f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 fa43 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return 1;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_kill>:

int _kill(int pid, int sig)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001984:	f004 fb10 	bl	8005fa8 <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	2216      	movs	r2, #22
 800198c:	601a      	str	r2, [r3, #0]
  return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_exit>:

void _exit (int status)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a2:	f04f 31ff 	mov.w	r1, #4294967295
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffe7 	bl	800197a <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <_exit+0x12>

080019b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
  }

  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e009      	b.n	8001a10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	60ba      	str	r2, [r7, #8]
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_write+0x12>
  }
  return len;
 8001a18:	687b      	ldr	r3, [r7, #4]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_close>:

int _close(int file)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <_isatty>:

int _isatty(int file)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f004 fa74 	bl	8005fa8 <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20018000 	.word	0x20018000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	2000025c 	.word	0x2000025c
 8001af4:	20000488 	.word	0x20000488

08001af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b2e:	4a15      	ldr	r2, [pc, #84]	@ (8001b84 <MX_TIM6_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b34:	224f      	movs	r2, #79	@ 0x4f
 8001b36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b4e:	f002 fcd5 	bl	80044fc <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b58:	f7ff fead 	bl	80018b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM6_Init+0x64>)
 8001b6a:	f002 fe21 	bl	80047b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b74:	f7ff fe9f 	bl	80018b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000260 	.word	0x20000260
 8001b84:	40001000 	.word	0x40001000

08001b88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x38>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10b      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a09      	ldr	r2, [pc, #36]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40001000 	.word	0x40001000
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	@ (8001c24 <MX_USART2_UART_Init+0x5c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_USART2_UART_Init+0x58>)
 8001c0c:	f002 fe58 	bl	80048c0 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c16:	f7ff fe4e 	bl	80018b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002ac 	.word	0x200002ac
 8001c24:	40004400 	.word	0x40004400

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2288      	movs	r2, #136	@ 0x88
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 f95a 	bl	8005f02 <memset>
  if(uartHandle->Instance==USART2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a21      	ldr	r2, [pc, #132]	@ (8001cd8 <HAL_UART_MspInit+0xb0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d13b      	bne.n	8001cd0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4618      	mov	r0, r3
 8001c66:	f001 ff8d 	bl	8003b84 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c70:	f7ff fe21 	bl	80018b6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c78:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c80:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a12      	ldr	r2, [pc, #72]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <HAL_UART_MspInit+0xb4>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ccc:	f000 f9b8 	bl	8002040 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	37b0      	adds	r7, #176	@ 0xb0
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce4:	f7ff ff08 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001cea:	490d      	ldr	r1, [pc, #52]	@ (8001d20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cec:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <LoopForever+0xe>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d00:	4c0a      	ldr	r4, [pc, #40]	@ (8001d2c <LoopForever+0x16>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f004 f951 	bl	8005fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d12:	f7ff fcc5 	bl	80016a0 <main>

08001d16 <LoopForever>:

LoopForever:
    b LoopForever
 8001d16:	e7fe      	b.n	8001d16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d24:	080084b8 	.word	0x080084b8
  ldr r2, =_sbss
 8001d28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d2c:	20000484 	.word	0x20000484

08001d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <ADC1_2_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_Init+0x3c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <HAL_Init+0x3c>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f000 f944 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 f80f 	bl	8001d74 <HAL_InitTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	e001      	b.n	8001d66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d62:	f7ff fdaf 	bl	80018c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40022000 	.word	0x40022000

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_InitTick+0x6c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d023      	beq.n	8001dd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d88:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <HAL_InitTick+0x70>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_InitTick+0x6c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f941 	bl	8002026 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d809      	bhi.n	8001dc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f919 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_InitTick+0x74>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e007      	b.n	8001dd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e004      	b.n	8001dd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e001      	b.n	8001dd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df0:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <HAL_IncTick+0x20>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <HAL_IncTick+0x24>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_IncTick+0x24>)
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	20000334 	.word	0x20000334

08001e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_GetTick+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000334 	.word	0x20000334

08001e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e34:	f7ff ffee 	bl	8001e14 <HAL_GetTick>
 8001e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d005      	beq.n	8001e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_Delay+0x44>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e52:	bf00      	nop
 8001e54:	f7ff ffde 	bl	8001e14 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d8f7      	bhi.n	8001e54 <HAL_Delay+0x28>
  {
  }
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000008 	.word	0x20000008

08001e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	60d3      	str	r3, [r2, #12]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0307 	and.w	r3, r3, #7
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	@ (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	@ (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff47 	bl	8001e74 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff5c 	bl	8001ebc <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffb0 	bl	8001f94 <SysTick_Config>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	e17f      	b.n	8002350 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4013      	ands	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8171 	beq.w	800234a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x40>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4013      	ands	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0201 	and.w	r2, r3, #1
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d118      	bne.n	8002120 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020f4:	2201      	movs	r2, #1
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f003 0201 	and.w	r2, r3, #1
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b03      	cmp	r3, #3
 800212a:	d017      	beq.n	800215c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d123      	bne.n	80021b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	08da      	lsrs	r2, r3, #3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3208      	adds	r2, #8
 8002170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	220f      	movs	r2, #15
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3208      	adds	r2, #8
 80021aa:	6939      	ldr	r1, [r7, #16]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0203 	and.w	r2, r3, #3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ac 	beq.w	800234a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002370 <HAL_GPIO_Init+0x330>)
 80021f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002370 <HAL_GPIO_Init+0x330>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80021fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002370 <HAL_GPIO_Init+0x330>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800220a:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_GPIO_Init+0x334>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002234:	d025      	beq.n	8002282 <HAL_GPIO_Init+0x242>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4f      	ldr	r2, [pc, #316]	@ (8002378 <HAL_GPIO_Init+0x338>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d01f      	beq.n	800227e <HAL_GPIO_Init+0x23e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4e      	ldr	r2, [pc, #312]	@ (800237c <HAL_GPIO_Init+0x33c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d019      	beq.n	800227a <HAL_GPIO_Init+0x23a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4d      	ldr	r2, [pc, #308]	@ (8002380 <HAL_GPIO_Init+0x340>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0x236>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4c      	ldr	r2, [pc, #304]	@ (8002384 <HAL_GPIO_Init+0x344>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d00d      	beq.n	8002272 <HAL_GPIO_Init+0x232>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4b      	ldr	r2, [pc, #300]	@ (8002388 <HAL_GPIO_Init+0x348>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0x22e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4a      	ldr	r2, [pc, #296]	@ (800238c <HAL_GPIO_Init+0x34c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_GPIO_Init+0x22a>
 8002266:	2306      	movs	r3, #6
 8002268:	e00c      	b.n	8002284 <HAL_GPIO_Init+0x244>
 800226a:	2307      	movs	r3, #7
 800226c:	e00a      	b.n	8002284 <HAL_GPIO_Init+0x244>
 800226e:	2305      	movs	r3, #5
 8002270:	e008      	b.n	8002284 <HAL_GPIO_Init+0x244>
 8002272:	2304      	movs	r3, #4
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x244>
 8002276:	2303      	movs	r3, #3
 8002278:	e004      	b.n	8002284 <HAL_GPIO_Init+0x244>
 800227a:	2302      	movs	r3, #2
 800227c:	e002      	b.n	8002284 <HAL_GPIO_Init+0x244>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_GPIO_Init+0x244>
 8002282:	2300      	movs	r3, #0
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	f002 0203 	and.w	r2, r2, #3
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	4093      	lsls	r3, r2
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002294:	4937      	ldr	r1, [pc, #220]	@ (8002374 <HAL_GPIO_Init+0x334>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3302      	adds	r3, #2
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <HAL_GPIO_Init+0x350>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c6:	4a32      	ldr	r2, [pc, #200]	@ (8002390 <HAL_GPIO_Init+0x350>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022cc:	4b30      	ldr	r3, [pc, #192]	@ (8002390 <HAL_GPIO_Init+0x350>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022f0:	4a27      	ldr	r2, [pc, #156]	@ (8002390 <HAL_GPIO_Init+0x350>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022f6:	4b26      	ldr	r3, [pc, #152]	@ (8002390 <HAL_GPIO_Init+0x350>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800231a:	4a1d      	ldr	r2, [pc, #116]	@ (8002390 <HAL_GPIO_Init+0x350>)
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002320:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_GPIO_Init+0x350>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002344:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_GPIO_Init+0x350>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	f47f ae78 	bne.w	8002050 <HAL_GPIO_Init+0x10>
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	48000400 	.word	0x48000400
 800237c:	48000800 	.word	0x48000800
 8002380:	48000c00 	.word	0x48000c00
 8002384:	48001000 	.word	0x48001000
 8002388:	48001400 	.word	0x48001400
 800238c:	48001800 	.word	0x48001800
 8002390:	40010400 	.word	0x40010400

08002394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	887b      	ldrh	r3, [r7, #2]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
 80023b0:	e001      	b.n	80023b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e08d      	b.n	8002522 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fe32 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2224      	movs	r2, #36	@ 0x24
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d107      	bne.n	800246e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e006      	b.n	800247c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800247a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d108      	bne.n	8002496 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	e007      	b.n	80024a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69d9      	ldr	r1, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1a      	ldr	r2, [r3, #32]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	461a      	mov	r2, r3
 8002538:	460b      	mov	r3, r1
 800253a:	817b      	strh	r3, [r7, #10]
 800253c:	4613      	mov	r3, r2
 800253e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	f040 80fd 	bne.w	8002748 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_I2C_Master_Transmit+0x30>
 8002558:	2302      	movs	r3, #2
 800255a:	e0f6      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002564:	f7ff fc56 	bl	8001e14 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2319      	movs	r3, #25
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa1d 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0e1      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2221      	movs	r2, #33	@ 0x21
 800258a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2210      	movs	r2, #16
 8002592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	893a      	ldrh	r2, [r7, #8]
 80025a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2bff      	cmp	r3, #255	@ 0xff
 80025b6:	d906      	bls.n	80025c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80025be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e007      	b.n	80025d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d024      	beq.n	8002628 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3301      	adds	r3, #1
 8002616:	b2da      	uxtb	r2, r3
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	4b4e      	ldr	r3, [pc, #312]	@ (8002754 <HAL_I2C_Master_Transmit+0x228>)
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f000 fb81 	bl	8002d28 <I2C_TransferConfig>
 8002626:	e066      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	b2da      	uxtb	r2, r3
 800262e:	8979      	ldrh	r1, [r7, #10]
 8002630:	4b48      	ldr	r3, [pc, #288]	@ (8002754 <HAL_I2C_Master_Transmit+0x228>)
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fb76 	bl	8002d28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800263c:	e05b      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fa06 	bl	8002a54 <I2C_WaitOnTXISFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07b      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	781a      	ldrb	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d034      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x1ca>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002690:	2b00      	cmp	r3, #0
 8002692:	d130      	bne.n	80026f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	2200      	movs	r2, #0
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f989 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e04d      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	2bff      	cmp	r3, #255	@ 0xff
 80026b6:	d90e      	bls.n	80026d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	22ff      	movs	r2, #255	@ 0xff
 80026bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	2300      	movs	r3, #0
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb2a 	bl	8002d28 <I2C_TransferConfig>
 80026d4:	e00f      	b.n	80026f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb19 	bl	8002d28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d19e      	bne.n	800263e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	6a39      	ldr	r1, [r7, #32]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f9ec 	bl	8002ae2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01a      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2220      	movs	r2, #32
 800271a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <HAL_I2C_Master_Transmit+0x22c>)
 8002728:	400b      	ands	r3, r1
 800272a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	80002000 	.word	0x80002000
 8002758:	fe00e800 	.word	0xfe00e800

0800275c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	460b      	mov	r3, r1
 800276a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	f040 80f3 	bne.w	8002964 <HAL_I2C_IsDeviceReady+0x208>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800278c:	d101      	bne.n	8002792 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
 8002790:	e0e9      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_I2C_IsDeviceReady+0x44>
 800279c:	2302      	movs	r3, #2
 800279e:	e0e2      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2224      	movs	r2, #36	@ 0x24
 80027ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_IsDeviceReady+0x72>
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027cc:	e006      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x80>
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80027e2:	f7ff fb17 	bl	8001e14 <HAL_GetTick>
 80027e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	bf0c      	ite	eq
 80027f6:	2301      	moveq	r3, #1
 80027f8:	2300      	movne	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002814:	e034      	b.n	8002880 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d01a      	beq.n	8002854 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800281e:	f7ff faf9 	bl	8001e14 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d302      	bcc.n	8002834 <HAL_I2C_IsDeviceReady+0xd8>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e088      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002880:	7ffb      	ldrb	r3, [r7, #31]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_I2C_IsDeviceReady+0x130>
 8002886:	7fbb      	ldrb	r3, [r7, #30]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0c4      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d01a      	beq.n	80028d0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	2200      	movs	r2, #0
 80028a2:	2120      	movs	r1, #32
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 f886 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e058      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2220      	movs	r2, #32
 80028ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e04a      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2120      	movs	r1, #32
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f86b 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03d      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2210      	movs	r2, #16
 80028f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2220      	movs	r2, #32
 80028f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d118      	bne.n	8002934 <HAL_I2C_IsDeviceReady+0x1d8>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002910:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	2120      	movs	r1, #32
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f84a 	bl	80029b6 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_IsDeviceReady+0x1d0>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e01c      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2220      	movs	r2, #32
 8002932:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3301      	adds	r3, #1
 8002938:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	f63f af39 	bhi.w	80027b6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <HAL_I2C_IsDeviceReady+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	d103      	bne.n	800298c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d007      	beq.n	80029aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	619a      	str	r2, [r3, #24]
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c6:	e031      	b.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d02d      	beq.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d0:	f7ff fa20 	bl	8001e14 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d122      	bne.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d113      	bne.n	8002a2c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e00f      	b.n	8002a4c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4013      	ands	r3, r2
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d0be      	beq.n	80029c8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a60:	e033      	b.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f87e 	bl	8002b68 <I2C_IsErrorOccurred>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e031      	b.n	8002ada <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d025      	beq.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f9c9 	bl	8001e14 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d013      	beq.n	8002aca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e007      	b.n	8002ada <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d1c4      	bne.n	8002a62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aee:	e02f      	b.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f837 	bl	8002b68 <I2C_IsErrorOccurred>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e02d      	b.n	8002b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7ff f986 	bl	8001e14 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11a      	bne.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d013      	beq.n	8002b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d1c8      	bne.n	8002af0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d068      	beq.n	8002c66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b9c:	e049      	b.n	8002c32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d045      	beq.n	8002c32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7ff f935 	bl	8001e14 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <I2C_IsErrorOccurred+0x54>
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d13a      	bne.n	8002c32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bde:	d121      	bne.n	8002c24 <I2C_IsErrorOccurred+0xbc>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002be6:	d01d      	beq.n	8002c24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d01a      	beq.n	8002c24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bfe:	f7ff f909 	bl	8001e14 <HAL_GetTick>
 8002c02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c04:	e00e      	b.n	8002c24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c06:	f7ff f905 	bl	8001e14 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b19      	cmp	r3, #25
 8002c12:	d907      	bls.n	8002c24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f043 0320 	orr.w	r3, r3, #32
 8002c1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c22:	e006      	b.n	8002c32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d1e9      	bne.n	8002c06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d003      	beq.n	8002c48 <I2C_IsErrorOccurred+0xe0>
 8002c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0aa      	beq.n	8002b9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d103      	bne.n	8002c58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2220      	movs	r2, #32
 8002c56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00b      	beq.n	8002c90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f043 0308 	orr.w	r3, r3, #8
 8002ca0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002caa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	f043 0302 	orr.w	r3, r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ccc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01c      	beq.n	8002d16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff fe46 	bl	800296e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <I2C_IsErrorOccurred+0x1bc>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3728      	adds	r7, #40	@ 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	4613      	mov	r3, r2
 8002d38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d40:	7a7b      	ldrb	r3, [r7, #9]
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	0d5b      	lsrs	r3, r3, #21
 8002d62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <I2C_TransferConfig+0x60>)
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	ea02 0103 	and.w	r1, r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d7a:	bf00      	nop
 8002d7c:	371c      	adds	r7, #28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	03ff63ff 	.word	0x03ff63ff

08002d8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d138      	bne.n	8002e14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e032      	b.n	8002e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	@ 0x24
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d139      	bne.n	8002eac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e033      	b.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2224      	movs	r2, #36	@ 0x24
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0201 	bic.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40007000 	.word	0x40007000

08002ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee6:	d130      	bne.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ee8:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef4:	d038      	beq.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ef6:	4b20      	ldr	r3, [pc, #128]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002efe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2232      	movs	r2, #50	@ 0x32
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	4a1b      	ldr	r2, [pc, #108]	@ (8002f80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	0c9b      	lsrs	r3, r3, #18
 8002f18:	3301      	adds	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f1c:	e002      	b.n	8002f24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f24:	4b14      	ldr	r3, [pc, #80]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f30:	d102      	bne.n	8002f38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f2      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f38:	4b0f      	ldr	r3, [pc, #60]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f44:	d110      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e00f      	b.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f56:	d007      	beq.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f58:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f60:	4a05      	ldr	r2, [pc, #20]	@ (8002f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	20000000 	.word	0x20000000
 8002f80:	431bde83 	.word	0x431bde83

08002f84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e3ca      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f96:	4b97      	ldr	r3, [pc, #604]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa0:	4b94      	ldr	r3, [pc, #592]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80e4 	beq.w	8003180 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_RCC_OscConfig+0x4a>
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	f040 808b 	bne.w	80030dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 8087 	bne.w	80030dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fce:	4b89      	ldr	r3, [pc, #548]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e3a2      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	4b82      	ldr	r3, [pc, #520]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <HAL_RCC_OscConfig+0x7c>
 8002ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ffe:	e005      	b.n	800300c <HAL_RCC_OscConfig+0x88>
 8003000:	4b7c      	ldr	r3, [pc, #496]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800300c:	4293      	cmp	r3, r2
 800300e:	d223      	bcs.n	8003058 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fd55 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e383      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003024:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a72      	ldr	r2, [pc, #456]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b70      	ldr	r3, [pc, #448]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	496d      	ldr	r1, [pc, #436]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003042:	4b6c      	ldr	r3, [pc, #432]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	4968      	ldr	r1, [pc, #416]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	e025      	b.n	80030a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003058:	4b66      	ldr	r3, [pc, #408]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a65      	ldr	r2, [pc, #404]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	4960      	ldr	r1, [pc, #384]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003076:	4b5f      	ldr	r3, [pc, #380]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	495b      	ldr	r1, [pc, #364]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003086:	4313      	orrs	r3, r2
 8003088:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fd15 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e343      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030a4:	f000 fc4a 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b52      	ldr	r3, [pc, #328]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	f003 030f 	and.w	r3, r3, #15
 80030b4:	4950      	ldr	r1, [pc, #320]	@ (80031f8 <HAL_RCC_OscConfig+0x274>)
 80030b6:	5ccb      	ldrb	r3, [r1, r3]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	4a4e      	ldr	r2, [pc, #312]	@ (80031fc <HAL_RCC_OscConfig+0x278>)
 80030c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003200 <HAL_RCC_OscConfig+0x27c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fe53 	bl	8001d74 <HAL_InitTick>
 80030ce:	4603      	mov	r3, r0
 80030d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d052      	beq.n	800317e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	e327      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d032      	beq.n	800314a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030e4:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a42      	ldr	r2, [pc, #264]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fe90 	bl	8001e14 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030f8:	f7fe fe8c 	bl	8001e14 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e310      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800310a:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003116:	4b37      	ldr	r3, [pc, #220]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a36      	ldr	r2, [pc, #216]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4931      	ldr	r1, [pc, #196]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003134:	4b2f      	ldr	r3, [pc, #188]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	492c      	ldr	r1, [pc, #176]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	e01a      	b.n	8003180 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800314a:	4b2a      	ldr	r3, [pc, #168]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a29      	ldr	r2, [pc, #164]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003156:	f7fe fe5d 	bl	8001e14 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800315e:	f7fe fe59 	bl	8001e14 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e2dd      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003170:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x1da>
 800317c:	e000      	b.n	8003180 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800317e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d074      	beq.n	8003276 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b08      	cmp	r3, #8
 8003190:	d005      	beq.n	800319e <HAL_RCC_OscConfig+0x21a>
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d10e      	bne.n	80031b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d10b      	bne.n	80031b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319e:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d064      	beq.n	8003274 <HAL_RCC_OscConfig+0x2f0>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d160      	bne.n	8003274 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e2ba      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x24a>
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0b      	ldr	r2, [pc, #44]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	e026      	b.n	800321c <HAL_RCC_OscConfig+0x298>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d6:	d115      	bne.n	8003204 <HAL_RCC_OscConfig+0x280>
 80031d8:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a05      	ldr	r2, [pc, #20]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b03      	ldr	r3, [pc, #12]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a02      	ldr	r2, [pc, #8]	@ (80031f4 <HAL_RCC_OscConfig+0x270>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	e014      	b.n	800321c <HAL_RCC_OscConfig+0x298>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	080080f0 	.word	0x080080f0
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000004 	.word	0x20000004
 8003204:	4ba0      	ldr	r3, [pc, #640]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a9f      	ldr	r2, [pc, #636]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800320a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	4b9d      	ldr	r3, [pc, #628]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a9c      	ldr	r2, [pc, #624]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800321a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d013      	beq.n	800324c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7fe fdf6 	bl	8001e14 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fdf2 	bl	8001e14 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	@ 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e276      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323e:	4b92      	ldr	r3, [pc, #584]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x2a8>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fe fde2 	bl	8001e14 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003254:	f7fe fdde 	bl	8001e14 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	@ 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e262      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003266:	4b88      	ldr	r3, [pc, #544]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x2d0>
 8003272:	e000      	b.n	8003276 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d060      	beq.n	8003344 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x310>
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d119      	bne.n	80032c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d116      	bne.n	80032c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003294:	4b7c      	ldr	r3, [pc, #496]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x328>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e23f      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ac:	4b76      	ldr	r3, [pc, #472]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	4973      	ldr	r1, [pc, #460]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c0:	e040      	b.n	8003344 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d023      	beq.n	8003312 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fd9d 	bl	8001e14 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe fd99 	bl	8001e14 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e21d      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f0:	4b65      	ldr	r3, [pc, #404]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b62      	ldr	r3, [pc, #392]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	495f      	ldr	r1, [pc, #380]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e018      	b.n	8003344 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b5d      	ldr	r3, [pc, #372]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5c      	ldr	r2, [pc, #368]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800331c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fd79 	bl	8001e14 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe fd75 	bl	8001e14 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1f9      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003338:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d03c      	beq.n	80033ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01c      	beq.n	8003392 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003358:	4b4b      	ldr	r3, [pc, #300]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800335a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800335e:	4a4a      	ldr	r2, [pc, #296]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003368:	f7fe fd54 	bl	8001e14 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003370:	f7fe fd50 	bl	8001e14 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e1d4      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003382:	4b41      	ldr	r3, [pc, #260]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0ef      	beq.n	8003370 <HAL_RCC_OscConfig+0x3ec>
 8003390:	e01b      	b.n	80033ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003392:	4b3d      	ldr	r3, [pc, #244]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003398:	4a3b      	ldr	r2, [pc, #236]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800339a:	f023 0301 	bic.w	r3, r3, #1
 800339e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fe fd37 	bl	8001e14 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe fd33 	bl	8001e14 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1b7      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033bc:	4b32      	ldr	r3, [pc, #200]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ef      	bne.n	80033aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 80a6 	beq.w	8003524 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b27      	ldr	r3, [pc, #156]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	4a26      	ldr	r2, [pc, #152]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f4:	4b24      	ldr	r3, [pc, #144]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003404:	4b21      	ldr	r3, [pc, #132]	@ (800348c <HAL_RCC_OscConfig+0x508>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d118      	bne.n	8003442 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003410:	4b1e      	ldr	r3, [pc, #120]	@ (800348c <HAL_RCC_OscConfig+0x508>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <HAL_RCC_OscConfig+0x508>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fe fcfa 	bl	8001e14 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fcf6 	bl	8001e14 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e17a      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <HAL_RCC_OscConfig+0x508>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_RCC_OscConfig+0x4d8>
 800344a:	4b0f      	ldr	r3, [pc, #60]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003450:	4a0d      	ldr	r2, [pc, #52]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800345a:	e029      	b.n	80034b0 <HAL_RCC_OscConfig+0x52c>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b05      	cmp	r3, #5
 8003462:	d115      	bne.n	8003490 <HAL_RCC_OscConfig+0x50c>
 8003464:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346a:	4a07      	ldr	r2, [pc, #28]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a03      	ldr	r2, [pc, #12]	@ (8003488 <HAL_RCC_OscConfig+0x504>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x52c>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
 8003490:	4b9c      	ldr	r3, [pc, #624]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003496:	4a9b      	ldr	r2, [pc, #620]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a0:	4b98      	ldr	r3, [pc, #608]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a6:	4a97      	ldr	r2, [pc, #604]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80034a8:	f023 0304 	bic.w	r3, r3, #4
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d016      	beq.n	80034e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7fe fcac 	bl	8001e14 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7fe fca8 	bl	8001e14 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e12a      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ed      	beq.n	80034c0 <HAL_RCC_OscConfig+0x53c>
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe fc95 	bl	8001e14 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fc91 	bl	8001e14 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e113      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003504:	4b7f      	ldr	r3, [pc, #508]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ed      	bne.n	80034ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d105      	bne.n	8003524 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003518:	4b7a      	ldr	r3, [pc, #488]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	4a79      	ldr	r2, [pc, #484]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003522:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80fe 	beq.w	800372a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003532:	2b02      	cmp	r3, #2
 8003534:	f040 80d0 	bne.w	80036d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003538:	4b72      	ldr	r3, [pc, #456]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d130      	bne.n	80035ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	3b01      	subs	r3, #1
 8003558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d127      	bne.n	80035ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003568:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d11f      	bne.n	80035ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003578:	2a07      	cmp	r2, #7
 800357a:	bf14      	ite	ne
 800357c:	2201      	movne	r2, #1
 800357e:	2200      	moveq	r2, #0
 8003580:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003582:	4293      	cmp	r3, r2
 8003584:	d113      	bne.n	80035ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d109      	bne.n	80035ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d06e      	beq.n	800368c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d069      	beq.n	8003688 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035b4:	4b53      	ldr	r3, [pc, #332]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d105      	bne.n	80035cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035c0:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0ad      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035dc:	f7fe fc1a 	bl	8001e14 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe fc16 	bl	8001e14 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e09a      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035f6:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003602:	4b40      	ldr	r3, [pc, #256]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4b40      	ldr	r3, [pc, #256]	@ (8003708 <HAL_RCC_OscConfig+0x784>)
 8003608:	4013      	ands	r3, r2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003612:	3a01      	subs	r2, #1
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800361c:	0212      	lsls	r2, r2, #8
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003624:	0852      	lsrs	r2, r2, #1
 8003626:	3a01      	subs	r2, #1
 8003628:	0552      	lsls	r2, r2, #21
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	3a01      	subs	r2, #1
 8003634:	0652      	lsls	r2, r2, #25
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800363c:	0912      	lsrs	r2, r2, #4
 800363e:	0452      	lsls	r2, r2, #17
 8003640:	430a      	orrs	r2, r1
 8003642:	4930      	ldr	r1, [pc, #192]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003644:	4313      	orrs	r3, r2
 8003646:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003648:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003654:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a2a      	ldr	r2, [pc, #168]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003660:	f7fe fbd8 	bl	8001e14 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003668:	f7fe fbd4 	bl	8001e14 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e058      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003686:	e050      	b.n	800372a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e04f      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368c:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d148      	bne.n	800372a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003698:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a4:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80036aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036b0:	f7fe fbb0 	bl	8001e14 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fbac 	bl	8001e14 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e030      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x734>
 80036d6:	e028      	b.n	800372a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d023      	beq.n	8003726 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036de:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a08      	ldr	r2, [pc, #32]	@ (8003704 <HAL_RCC_OscConfig+0x780>)
 80036e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe fb93 	bl	8001e14 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e00c      	b.n	800370c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fe fb8f 	bl	8001e14 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d905      	bls.n	800370c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e013      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
 8003704:	40021000 	.word	0x40021000
 8003708:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x7b0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ec      	bne.n	80036f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003718:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <HAL_RCC_OscConfig+0x7b0>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4905      	ldr	r1, [pc, #20]	@ (8003734 <HAL_RCC_OscConfig+0x7b0>)
 800371e:	4b06      	ldr	r3, [pc, #24]	@ (8003738 <HAL_RCC_OscConfig+0x7b4>)
 8003720:	4013      	ands	r3, r2
 8003722:	60cb      	str	r3, [r1, #12]
 8003724:	e001      	b.n	800372a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000
 8003738:	feeefffc 	.word	0xfeeefffc

0800373c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0e7      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b75      	ldr	r3, [pc, #468]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d910      	bls.n	8003780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b72      	ldr	r3, [pc, #456]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 0207 	bic.w	r2, r3, #7
 8003766:	4970      	ldr	r1, [pc, #448]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b6e      	ldr	r3, [pc, #440]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0cf      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	4b66      	ldr	r3, [pc, #408]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003798:	429a      	cmp	r2, r3
 800379a:	d908      	bls.n	80037ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4960      	ldr	r1, [pc, #384]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d04c      	beq.n	8003854 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b5a      	ldr	r3, [pc, #360]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d121      	bne.n	8003812 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0a6      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037da:	4b54      	ldr	r3, [pc, #336]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d115      	bne.n	8003812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e09a      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037f2:	4b4e      	ldr	r3, [pc, #312]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e08e      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003802:	4b4a      	ldr	r3, [pc, #296]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e086      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b46      	ldr	r3, [pc, #280]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4943      	ldr	r1, [pc, #268]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fe faf6 	bl	8001e14 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe faf2 	bl	8001e14 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e06e      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	4b31      	ldr	r3, [pc, #196]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800386c:	429a      	cmp	r2, r3
 800386e:	d208      	bcs.n	8003882 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b2e      	ldr	r3, [pc, #184]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	492b      	ldr	r1, [pc, #172]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003882:	4b29      	ldr	r3, [pc, #164]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d210      	bcs.n	80038b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003890:	4b25      	ldr	r3, [pc, #148]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 0207 	bic.w	r2, r3, #7
 8003898:	4923      	ldr	r1, [pc, #140]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a0:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <HAL_RCC_ClockConfig+0x1ec>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e036      	b.n	8003920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038be:	4b1b      	ldr	r3, [pc, #108]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4918      	ldr	r1, [pc, #96]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038dc:	4b13      	ldr	r3, [pc, #76]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4910      	ldr	r1, [pc, #64]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038f0:	f000 f824 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	490b      	ldr	r1, [pc, #44]	@ (8003930 <HAL_RCC_ClockConfig+0x1f4>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <HAL_RCC_ClockConfig+0x1f8>)
 800390e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003910:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <HAL_RCC_ClockConfig+0x1fc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fa2d 	bl	8001d74 <HAL_InitTick>
 800391a:	4603      	mov	r3, r0
 800391c:	72fb      	strb	r3, [r7, #11]

  return status;
 800391e:	7afb      	ldrb	r3, [r7, #11]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	080080f0 	.word	0x080080f0
 8003934:	20000000 	.word	0x20000000
 8003938:	20000004 	.word	0x20000004

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003954:	4b3b      	ldr	r3, [pc, #236]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d121      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11e      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003970:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d107      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800397c:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800397e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800398c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003998:	4a2b      	ldr	r2, [pc, #172]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d102      	bne.n	80039ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039b4:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e004      	b.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039c0:	4b23      	ldr	r3, [pc, #140]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d134      	bne.n	8003a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d003      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0xac>
 80039e0:	e005      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80039e4:	617b      	str	r3, [r7, #20]
      break;
 80039e6:	e005      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80039ea:	617b      	str	r3, [r7, #20]
      break;
 80039ec:	e002      	b.n	80039f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	617b      	str	r3, [r7, #20]
      break;
 80039f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	3301      	adds	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	fb03 f202 	mul.w	r2, r3, r2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	0e5b      	lsrs	r3, r3, #25
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	3301      	adds	r3, #1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a34:	69bb      	ldr	r3, [r7, #24]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	@ 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08008108 	.word	0x08008108
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	007a1200 	.word	0x007a1200

08003a54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000000 	.word	0x20000000

08003a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a70:	f7ff fff0 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	08008100 	.word	0x08008100

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a9c:	f7ff ffda 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0adb      	lsrs	r3, r3, #11
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4904      	ldr	r1, [pc, #16]	@ (8003ac0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08008100 	.word	0x08008100

08003ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003adc:	f7ff f9ee 	bl	8002ebc <HAL_PWREx_GetVoltageRange>
 8003ae0:	6178      	str	r0, [r7, #20]
 8003ae2:	e014      	b.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b25      	ldr	r3, [pc, #148]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	4a24      	ldr	r2, [pc, #144]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af0:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f9de 	bl	8002ebc <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b1e      	ldr	r3, [pc, #120]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b14:	d10b      	bne.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	@ 0x80
 8003b1a:	d919      	bls.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b20:	d902      	bls.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b22:	2302      	movs	r3, #2
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e013      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e010      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b80      	cmp	r3, #128	@ 0x80
 8003b32:	d902      	bls.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b34:	2303      	movs	r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	e00a      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b80      	cmp	r3, #128	@ 0x80
 8003b3e:	d102      	bne.n	8003b46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b40:	2302      	movs	r3, #2
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	e004      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b70      	cmp	r3, #112	@ 0x70
 8003b4a:	d101      	bne.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b50:	4b0b      	ldr	r3, [pc, #44]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	4909      	ldr	r1, [pc, #36]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d001      	beq.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40022000 	.word	0x40022000

08003b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b90:	2300      	movs	r3, #0
 8003b92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d041      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ba4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ba8:	d02a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003baa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003bae:	d824      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003bb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bba:	d81e      	bhi.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bc4:	d010      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003bc6:	e018      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bc8:	4b86      	ldr	r3, [pc, #536]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a85      	ldr	r2, [pc, #532]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd4:	e015      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fabb 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003be6:	e00c      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3320      	adds	r3, #32
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fba6 	bl	8004340 <RCCEx_PLLSAI2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bf8:	e003      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	74fb      	strb	r3, [r7, #19]
      break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c02:	7cfb      	ldrb	r3, [r7, #19]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c08:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c16:	4973      	ldr	r1, [pc, #460]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c1e:	e001      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	7cfb      	ldrb	r3, [r7, #19]
 8003c22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d041      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c38:	d02a      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c3e:	d824      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c4a:	d81e      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c54:	d010      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c56:	e018      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c58:	4b62      	ldr	r3, [pc, #392]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a61      	ldr	r2, [pc, #388]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c64:	e015      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fa73 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c76:	e00c      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fb5e 	bl	8004340 <RCCEx_PLLSAI2_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c98:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca6:	494f      	ldr	r1, [pc, #316]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003cae:	e001      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	7cfb      	ldrb	r3, [r7, #19]
 8003cb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a0 	beq.w	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	4a40      	ldr	r2, [pc, #256]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d04:	f7fe f886 	bl	8001e14 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d0a:	e009      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0c:	f7fe f882 	bl	8001e14 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d20:	4b31      	ldr	r3, [pc, #196]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d15c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d32:	4b2c      	ldr	r3, [pc, #176]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01f      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d019      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d62:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d72:	4a1c      	ldr	r2, [pc, #112]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d7c:	4a19      	ldr	r2, [pc, #100]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d016      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8e:	f7fe f841 	bl	8001e14 <HAL_GetTick>
 8003d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d94:	e00b      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fe f83d 	bl	8001e14 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d902      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	74fb      	strb	r3, [r7, #19]
            break;
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dae:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ec      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dd2:	4904      	ldr	r1, [pc, #16]	@ (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dda:	e009      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	74bb      	strb	r3, [r7, #18]
 8003de0:	e006      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	7cfb      	ldrb	r3, [r7, #19]
 8003dee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df0:	7c7b      	ldrb	r3, [r7, #17]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b9e      	ldr	r3, [pc, #632]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfa:	4a9d      	ldr	r2, [pc, #628]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e0e:	4b98      	ldr	r3, [pc, #608]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e14:	f023 0203 	bic.w	r2, r3, #3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	4994      	ldr	r1, [pc, #592]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00a      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e30:	4b8f      	ldr	r3, [pc, #572]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e36:	f023 020c 	bic.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	498c      	ldr	r1, [pc, #560]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e52:	4b87      	ldr	r3, [pc, #540]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	4983      	ldr	r1, [pc, #524]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0308 	and.w	r3, r3, #8
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e74:	4b7e      	ldr	r3, [pc, #504]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	497b      	ldr	r1, [pc, #492]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00a      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e96:	4b76      	ldr	r3, [pc, #472]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea4:	4972      	ldr	r1, [pc, #456]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	496a      	ldr	r1, [pc, #424]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eda:	4b65      	ldr	r3, [pc, #404]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	4961      	ldr	r1, [pc, #388]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003efc:	4b5c      	ldr	r3, [pc, #368]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0a:	4959      	ldr	r1, [pc, #356]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f1e:	4b54      	ldr	r3, [pc, #336]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f24:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f2c:	4950      	ldr	r1, [pc, #320]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f40:	4b4b      	ldr	r3, [pc, #300]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	4948      	ldr	r1, [pc, #288]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f62:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f70:	493f      	ldr	r1, [pc, #252]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d028      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f84:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f92:	4937      	ldr	r1, [pc, #220]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fae:	60d3      	str	r3, [r2, #12]
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f8c8 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d028      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fe2:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	491f      	ldr	r1, [pc, #124]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004000:	d106      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004002:	4b1b      	ldr	r3, [pc, #108]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400c:	60d3      	str	r3, [r2, #12]
 800400e:	e011      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004018:	d10c      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3304      	adds	r3, #4
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 f899 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402a:	7cfb      	ldrb	r3, [r7, #19]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800404e:	4908      	ldr	r1, [pc, #32]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405e:	d109      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004060:	4b03      	ldr	r3, [pc, #12]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a02      	ldr	r2, [pc, #8]	@ (8004070 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e014      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800406e:	bf00      	nop
 8004070:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2101      	movs	r1, #1
 8004084:	4618      	mov	r0, r3
 8004086:	f000 f867 	bl	8004158 <RCCEx_PLLSAI1_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004094:	7cfb      	ldrb	r3, [r7, #19]
 8004096:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040b2:	4928      	ldr	r1, [pc, #160]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040c2:	d10d      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f844 	bl	8004158 <RCCEx_PLLSAI1_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d014      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040da:	7cfb      	ldrb	r3, [r7, #19]
 80040dc:	74bb      	strb	r3, [r7, #18]
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3320      	adds	r3, #32
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f925 	bl	8004340 <RCCEx_PLLSAI2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040fa:	7cfb      	ldrb	r3, [r7, #19]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004110:	4b10      	ldr	r3, [pc, #64]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800411e:	490d      	ldr	r1, [pc, #52]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004142:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800414a:	7cbb      	ldrb	r3, [r7, #18]
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40021000 	.word	0x40021000

08004158 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004166:	4b75      	ldr	r3, [pc, #468]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004172:	4b72      	ldr	r3, [pc, #456]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10d      	bne.n	800419e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
       ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800418a:	4b6c      	ldr	r3, [pc, #432]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
       ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d047      	beq.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	e044      	b.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d018      	beq.n	80041de <RCCEx_PLLSAI1_Config+0x86>
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d825      	bhi.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d002      	beq.n	80041ba <RCCEx_PLLSAI1_Config+0x62>
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d009      	beq.n	80041cc <RCCEx_PLLSAI1_Config+0x74>
 80041b8:	e020      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ba:	4b60      	ldr	r3, [pc, #384]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d11d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ca:	e01a      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041cc:	4b5b      	ldr	r3, [pc, #364]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041dc:	e013      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041de:	4b57      	ldr	r3, [pc, #348]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ea:	4b54      	ldr	r3, [pc, #336]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041fa:	e006      	b.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e004      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800420a:	bf00      	nop
    }

    if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004212:	4b4a      	ldr	r3, [pc, #296]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	430b      	orrs	r3, r1
 8004228:	4944      	ldr	r1, [pc, #272]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d17d      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004234:	4b41      	ldr	r3, [pc, #260]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a40      	ldr	r2, [pc, #256]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 800423a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800423e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fd fde8 	bl	8001e14 <HAL_GetTick>
 8004244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004246:	e009      	b.n	800425c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004248:	f7fd fde4 	bl	8001e14 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d902      	bls.n	800425c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	73fb      	strb	r3, [r7, #15]
        break;
 800425a:	e005      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425c:	4b37      	ldr	r3, [pc, #220]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ef      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d160      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d111      	bne.n	8004298 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004274:	4b31      	ldr	r3, [pc, #196]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800427c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	0211      	lsls	r1, r2, #8
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	0912      	lsrs	r2, r2, #4
 800428c:	0452      	lsls	r2, r2, #17
 800428e:	430a      	orrs	r2, r1
 8004290:	492a      	ldr	r1, [pc, #168]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]
 8004296:	e027      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d112      	bne.n	80042c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800429e:	4b27      	ldr	r3, [pc, #156]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6892      	ldr	r2, [r2, #8]
 80042ae:	0211      	lsls	r1, r2, #8
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6912      	ldr	r2, [r2, #16]
 80042b4:	0852      	lsrs	r2, r2, #1
 80042b6:	3a01      	subs	r2, #1
 80042b8:	0552      	lsls	r2, r2, #21
 80042ba:	430a      	orrs	r2, r1
 80042bc:	491f      	ldr	r1, [pc, #124]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
 80042c2:	e011      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042c4:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6892      	ldr	r2, [r2, #8]
 80042d4:	0211      	lsls	r1, r2, #8
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6952      	ldr	r2, [r2, #20]
 80042da:	0852      	lsrs	r2, r2, #1
 80042dc:	3a01      	subs	r2, #1
 80042de:	0652      	lsls	r2, r2, #25
 80042e0:	430a      	orrs	r2, r1
 80042e2:	4916      	ldr	r1, [pc, #88]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e8:	4b14      	ldr	r3, [pc, #80]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a13      	ldr	r2, [pc, #76]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f4:	f7fd fd8e 	bl	8001e14 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042fa:	e009      	b.n	8004310 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042fc:	f7fd fd8a 	bl	8001e14 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d902      	bls.n	8004310 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	73fb      	strb	r3, [r7, #15]
          break;
 800430e:	e005      	b.n	800431c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0ef      	beq.n	80042fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	4904      	ldr	r1, [pc, #16]	@ (800433c <RCCEx_PLLSAI1_Config+0x1e4>)
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40021000 	.word	0x40021000

08004340 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800434e:	4b6a      	ldr	r3, [pc, #424]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800435a:	4b67      	ldr	r3, [pc, #412]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0203 	and.w	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d10d      	bne.n	8004386 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
       ||
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004372:	4b61      	ldr	r3, [pc, #388]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
       ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d047      	beq.n	8004416 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e044      	b.n	8004416 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b03      	cmp	r3, #3
 8004392:	d018      	beq.n	80043c6 <RCCEx_PLLSAI2_Config+0x86>
 8004394:	2b03      	cmp	r3, #3
 8004396:	d825      	bhi.n	80043e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004398:	2b01      	cmp	r3, #1
 800439a:	d002      	beq.n	80043a2 <RCCEx_PLLSAI2_Config+0x62>
 800439c:	2b02      	cmp	r3, #2
 800439e:	d009      	beq.n	80043b4 <RCCEx_PLLSAI2_Config+0x74>
 80043a0:	e020      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043a2:	4b55      	ldr	r3, [pc, #340]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11d      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b2:	e01a      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b4:	4b50      	ldr	r3, [pc, #320]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e013      	b.n	80043ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043c6:	4b4c      	ldr	r3, [pc, #304]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043d2:	4b49      	ldr	r3, [pc, #292]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043e2:	e006      	b.n	80043f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e004      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043fa:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	430b      	orrs	r3, r1
 8004410:	4939      	ldr	r1, [pc, #228]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004412:	4313      	orrs	r3, r2
 8004414:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d167      	bne.n	80044ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800441c:	4b36      	ldr	r3, [pc, #216]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a35      	ldr	r2, [pc, #212]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004428:	f7fd fcf4 	bl	8001e14 <HAL_GetTick>
 800442c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800442e:	e009      	b.n	8004444 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004430:	f7fd fcf0 	bl	8001e14 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d902      	bls.n	8004444 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	73fb      	strb	r3, [r7, #15]
        break;
 8004442:	e005      	b.n	8004450 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004444:	4b2c      	ldr	r3, [pc, #176]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1ef      	bne.n	8004430 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d14a      	bne.n	80044ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d111      	bne.n	8004480 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800445c:	4b26      	ldr	r3, [pc, #152]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
 800446c:	0211      	lsls	r1, r2, #8
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68d2      	ldr	r2, [r2, #12]
 8004472:	0912      	lsrs	r2, r2, #4
 8004474:	0452      	lsls	r2, r2, #17
 8004476:	430a      	orrs	r2, r1
 8004478:	491f      	ldr	r1, [pc, #124]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800447a:	4313      	orrs	r3, r2
 800447c:	614b      	str	r3, [r1, #20]
 800447e:	e011      	b.n	80044a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004480:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004488:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	0211      	lsls	r1, r2, #8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6912      	ldr	r2, [r2, #16]
 8004496:	0852      	lsrs	r2, r2, #1
 8004498:	3a01      	subs	r2, #1
 800449a:	0652      	lsls	r2, r2, #25
 800449c:	430a      	orrs	r2, r1
 800449e:	4916      	ldr	r1, [pc, #88]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80044a4:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a13      	ldr	r2, [pc, #76]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fd fcb0 	bl	8001e14 <HAL_GetTick>
 80044b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b6:	e009      	b.n	80044cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b8:	f7fd fcac 	bl	8001e14 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d902      	bls.n	80044cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	73fb      	strb	r3, [r7, #15]
          break;
 80044ca:	e005      	b.n	80044d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044cc:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ef      	beq.n	80044b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044de:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4904      	ldr	r1, [pc, #16]	@ (80044f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e049      	b.n	80045a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fd fb30 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 f89e 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d001      	beq.n	80045c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e047      	b.n	8004654 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a23      	ldr	r2, [pc, #140]	@ (8004660 <HAL_TIM_Base_Start+0xb4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d01d      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045de:	d018      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004664 <HAL_TIM_Base_Start+0xb8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004668 <HAL_TIM_Base_Start+0xbc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00e      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a1c      	ldr	r2, [pc, #112]	@ (800466c <HAL_TIM_Base_Start+0xc0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a1b      	ldr	r2, [pc, #108]	@ (8004670 <HAL_TIM_Base_Start+0xc4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <HAL_TIM_Base_Start+0x66>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a19      	ldr	r2, [pc, #100]	@ (8004674 <HAL_TIM_Base_Start+0xc8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d115      	bne.n	800463e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b17      	ldr	r3, [pc, #92]	@ (8004678 <HAL_TIM_Base_Start+0xcc>)
 800461a:	4013      	ands	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b06      	cmp	r3, #6
 8004622:	d015      	beq.n	8004650 <HAL_TIM_Base_Start+0xa4>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462a:	d011      	beq.n	8004650 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463c:	e008      	b.n	8004650 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	e000      	b.n	8004652 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004650:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012c00 	.word	0x40012c00
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40013400 	.word	0x40013400
 8004674:	40014000 	.word	0x40014000
 8004678:	00010007 	.word	0x00010007

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <TIM_Base_SetConfig+0x114>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469a:	d00f      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3d      	ldr	r2, [pc, #244]	@ (8004794 <TIM_Base_SetConfig+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004798 <TIM_Base_SetConfig+0x11c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3b      	ldr	r2, [pc, #236]	@ (800479c <TIM_Base_SetConfig+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3a      	ldr	r2, [pc, #232]	@ (80047a0 <TIM_Base_SetConfig+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004790 <TIM_Base_SetConfig+0x114>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01f      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046dc:	d01b      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004794 <TIM_Base_SetConfig+0x118>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d017      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004798 <TIM_Base_SetConfig+0x11c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <TIM_Base_SetConfig+0x120>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a29      	ldr	r2, [pc, #164]	@ (80047a0 <TIM_Base_SetConfig+0x124>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	@ (80047a4 <TIM_Base_SetConfig+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a27      	ldr	r2, [pc, #156]	@ (80047a8 <TIM_Base_SetConfig+0x12c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_Base_SetConfig+0x9a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a26      	ldr	r2, [pc, #152]	@ (80047ac <TIM_Base_SetConfig+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <TIM_Base_SetConfig+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00f      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d00b      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a11      	ldr	r2, [pc, #68]	@ (80047a4 <TIM_Base_SetConfig+0x128>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d007      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <TIM_Base_SetConfig+0x12c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0f      	ldr	r2, [pc, #60]	@ (80047ac <TIM_Base_SetConfig+0x130>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047c4:	2302      	movs	r3, #2
 80047c6:	e068      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2e      	ldr	r2, [pc, #184]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1e      	ldr	r2, [pc, #120]	@ (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01d      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483a:	d018      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1b      	ldr	r2, [pc, #108]	@ (80048b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a18      	ldr	r2, [pc, #96]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a13      	ldr	r2, [pc, #76]	@ (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a14      	ldr	r2, [pc, #80]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10c      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40013400 	.word	0x40013400
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40014000 	.word	0x40014000

080048c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e040      	b.n	8004954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fd f9a0 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fb6a 	bl	8004fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8af 	bl	8004a70 <UART_SetConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e01b      	b.n	8004954 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800492a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800493a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fbe9 	bl	8005124 <UART_CheckIdleState>
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004970:	2b20      	cmp	r3, #32
 8004972:	d177      	bne.n	8004a64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Transmit+0x24>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e070      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2221      	movs	r2, #33	@ 0x21
 8004990:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004992:	f7fd fa3f 	bl	8001e14 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b0:	d108      	bne.n	80049c4 <HAL_UART_Transmit+0x68>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e003      	b.n	80049cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049cc:	e02f      	b.n	8004a2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	@ 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fc4b 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e03b      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	881a      	ldrh	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	b292      	uxth	r2, r2
 8004a02:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	3302      	adds	r3, #2
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e007      	b.n	8004a1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1c9      	bne.n	80049ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fc15 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e005      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e000      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a74:	b08a      	sub	sp, #40	@ 0x28
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4ba4      	ldr	r3, [pc, #656]	@ (8004d30 <UART_SetConfig+0x2c0>)
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a99      	ldr	r2, [pc, #612]	@ (8004d34 <UART_SetConfig+0x2c4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d004      	beq.n	8004adc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aec:	430a      	orrs	r2, r1
 8004aee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a90      	ldr	r2, [pc, #576]	@ (8004d38 <UART_SetConfig+0x2c8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d126      	bne.n	8004b48 <UART_SetConfig+0xd8>
 8004afa:	4b90      	ldr	r3, [pc, #576]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d81b      	bhi.n	8004b40 <UART_SetConfig+0xd0>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0xa0>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e116      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e112      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004b30:	2304      	movs	r3, #4
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e10e      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004b38:	2308      	movs	r3, #8
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3e:	e10a      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004b40:	2310      	movs	r3, #16
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b46:	e106      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a7c      	ldr	r2, [pc, #496]	@ (8004d40 <UART_SetConfig+0x2d0>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d138      	bne.n	8004bc4 <UART_SetConfig+0x154>
 8004b52:	4b7a      	ldr	r3, [pc, #488]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b0c      	cmp	r3, #12
 8004b5e:	d82d      	bhi.n	8004bbc <UART_SetConfig+0x14c>
 8004b60:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <UART_SetConfig+0xf8>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	08004b9d 	.word	0x08004b9d
 8004b6c:	08004bbd 	.word	0x08004bbd
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bbd 	.word	0x08004bbd
 8004b80:	08004bbd 	.word	0x08004bbd
 8004b84:	08004bbd 	.word	0x08004bbd
 8004b88:	08004ba5 	.word	0x08004ba5
 8004b8c:	08004bbd 	.word	0x08004bbd
 8004b90:	08004bbd 	.word	0x08004bbd
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba2:	e0d8      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004baa:	e0d4      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004bac:	2304      	movs	r3, #4
 8004bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb2:	e0d0      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bba:	e0cc      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004bbc:	2310      	movs	r3, #16
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc2:	e0c8      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004d44 <UART_SetConfig+0x2d4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d125      	bne.n	8004c1a <UART_SetConfig+0x1aa>
 8004bce:	4b5b      	ldr	r3, [pc, #364]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bd8:	2b30      	cmp	r3, #48	@ 0x30
 8004bda:	d016      	beq.n	8004c0a <UART_SetConfig+0x19a>
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d818      	bhi.n	8004c12 <UART_SetConfig+0x1a2>
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	d00a      	beq.n	8004bfa <UART_SetConfig+0x18a>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d814      	bhi.n	8004c12 <UART_SetConfig+0x1a2>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <UART_SetConfig+0x182>
 8004bec:	2b10      	cmp	r3, #16
 8004bee:	d008      	beq.n	8004c02 <UART_SetConfig+0x192>
 8004bf0:	e00f      	b.n	8004c12 <UART_SetConfig+0x1a2>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf8:	e0ad      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c00:	e0a9      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c02:	2304      	movs	r3, #4
 8004c04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c08:	e0a5      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c0a:	2308      	movs	r3, #8
 8004c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c10:	e0a1      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c12:	2310      	movs	r3, #16
 8004c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c18:	e09d      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <UART_SetConfig+0x2d8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d125      	bne.n	8004c70 <UART_SetConfig+0x200>
 8004c24:	4b45      	ldr	r3, [pc, #276]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c30:	d016      	beq.n	8004c60 <UART_SetConfig+0x1f0>
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d818      	bhi.n	8004c68 <UART_SetConfig+0x1f8>
 8004c36:	2b80      	cmp	r3, #128	@ 0x80
 8004c38:	d00a      	beq.n	8004c50 <UART_SetConfig+0x1e0>
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d814      	bhi.n	8004c68 <UART_SetConfig+0x1f8>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <UART_SetConfig+0x1d8>
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d008      	beq.n	8004c58 <UART_SetConfig+0x1e8>
 8004c46:	e00f      	b.n	8004c68 <UART_SetConfig+0x1f8>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4e:	e082      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c50:	2302      	movs	r3, #2
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c56:	e07e      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5e:	e07a      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c60:	2308      	movs	r3, #8
 8004c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c66:	e076      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c6e:	e072      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a35      	ldr	r2, [pc, #212]	@ (8004d4c <UART_SetConfig+0x2dc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d12a      	bne.n	8004cd0 <UART_SetConfig+0x260>
 8004c7a:	4b30      	ldr	r3, [pc, #192]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c88:	d01a      	beq.n	8004cc0 <UART_SetConfig+0x250>
 8004c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8e:	d81b      	bhi.n	8004cc8 <UART_SetConfig+0x258>
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c94:	d00c      	beq.n	8004cb0 <UART_SetConfig+0x240>
 8004c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9a:	d815      	bhi.n	8004cc8 <UART_SetConfig+0x258>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <UART_SetConfig+0x238>
 8004ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca4:	d008      	beq.n	8004cb8 <UART_SetConfig+0x248>
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x258>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cae:	e052      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb6:	e04e      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cbe:	e04a      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc6:	e046      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004cc8:	2310      	movs	r3, #16
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cce:	e042      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <UART_SetConfig+0x2c4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d13a      	bne.n	8004d50 <UART_SetConfig+0x2e0>
 8004cda:	4b18      	ldr	r3, [pc, #96]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ce4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ce8:	d01a      	beq.n	8004d20 <UART_SetConfig+0x2b0>
 8004cea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cee:	d81b      	bhi.n	8004d28 <UART_SetConfig+0x2b8>
 8004cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf4:	d00c      	beq.n	8004d10 <UART_SetConfig+0x2a0>
 8004cf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfa:	d815      	bhi.n	8004d28 <UART_SetConfig+0x2b8>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <UART_SetConfig+0x298>
 8004d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d04:	d008      	beq.n	8004d18 <UART_SetConfig+0x2a8>
 8004d06:	e00f      	b.n	8004d28 <UART_SetConfig+0x2b8>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d0e:	e022      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d16:	e01e      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d1e:	e01a      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d26:	e016      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d2e:	e012      	b.n	8004d56 <UART_SetConfig+0x2e6>
 8004d30:	efff69f3 	.word	0xefff69f3
 8004d34:	40008000 	.word	0x40008000
 8004d38:	40013800 	.word	0x40013800
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40004400 	.word	0x40004400
 8004d44:	40004800 	.word	0x40004800
 8004d48:	40004c00 	.word	0x40004c00
 8004d4c:	40005000 	.word	0x40005000
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a9f      	ldr	r2, [pc, #636]	@ (8004fd8 <UART_SetConfig+0x568>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d17a      	bne.n	8004e56 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d824      	bhi.n	8004db2 <UART_SetConfig+0x342>
 8004d68:	a201      	add	r2, pc, #4	@ (adr r2, 8004d70 <UART_SetConfig+0x300>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004db3 	.word	0x08004db3
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004da3 	.word	0x08004da3
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004db3 	.word	0x08004db3
 8004d8c:	08004db3 	.word	0x08004db3
 8004d90:	08004dab 	.word	0x08004dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d94:	f7fe fe6a 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004d98:	61f8      	str	r0, [r7, #28]
        break;
 8004d9a:	e010      	b.n	8004dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9c:	4b8f      	ldr	r3, [pc, #572]	@ (8004fdc <UART_SetConfig+0x56c>)
 8004d9e:	61fb      	str	r3, [r7, #28]
        break;
 8004da0:	e00d      	b.n	8004dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da2:	f7fe fdcb 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004da6:	61f8      	str	r0, [r7, #28]
        break;
 8004da8:	e009      	b.n	8004dbe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dae:	61fb      	str	r3, [r7, #28]
        break;
 8004db0:	e005      	b.n	8004dbe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004dbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80fb 	beq.w	8004fbc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	4413      	add	r3, r2
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d305      	bcc.n	8004de2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d903      	bls.n	8004dea <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004de8:	e0e8      	b.n	8004fbc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2200      	movs	r2, #0
 8004dee:	461c      	mov	r4, r3
 8004df0:	4615      	mov	r5, r2
 8004df2:	f04f 0200 	mov.w	r2, #0
 8004df6:	f04f 0300 	mov.w	r3, #0
 8004dfa:	022b      	lsls	r3, r5, #8
 8004dfc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e00:	0222      	lsls	r2, r4, #8
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	6849      	ldr	r1, [r1, #4]
 8004e06:	0849      	lsrs	r1, r1, #1
 8004e08:	2000      	movs	r0, #0
 8004e0a:	4688      	mov	r8, r1
 8004e0c:	4681      	mov	r9, r0
 8004e0e:	eb12 0a08 	adds.w	sl, r2, r8
 8004e12:	eb43 0b09 	adc.w	fp, r3, r9
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e24:	4650      	mov	r0, sl
 8004e26:	4659      	mov	r1, fp
 8004e28:	f7fb ff0e 	bl	8000c48 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3a:	d308      	bcc.n	8004e4e <UART_SetConfig+0x3de>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e42:	d204      	bcs.n	8004e4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e0b6      	b.n	8004fbc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e54:	e0b2      	b.n	8004fbc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5e:	d15e      	bne.n	8004f1e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d828      	bhi.n	8004eba <UART_SetConfig+0x44a>
 8004e68:	a201      	add	r2, pc, #4	@ (adr r2, 8004e70 <UART_SetConfig+0x400>)
 8004e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6e:	bf00      	nop
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08004e9d 	.word	0x08004e9d
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	08004ebb 	.word	0x08004ebb
 8004e80:	08004eab 	.word	0x08004eab
 8004e84:	08004ebb 	.word	0x08004ebb
 8004e88:	08004ebb 	.word	0x08004ebb
 8004e8c:	08004ebb 	.word	0x08004ebb
 8004e90:	08004eb3 	.word	0x08004eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e94:	f7fe fdea 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004e98:	61f8      	str	r0, [r7, #28]
        break;
 8004e9a:	e014      	b.n	8004ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e9c:	f7fe fdfc 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8004ea0:	61f8      	str	r0, [r7, #28]
        break;
 8004ea2:	e010      	b.n	8004ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8004fdc <UART_SetConfig+0x56c>)
 8004ea6:	61fb      	str	r3, [r7, #28]
        break;
 8004ea8:	e00d      	b.n	8004ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eaa:	f7fe fd47 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004eae:	61f8      	str	r0, [r7, #28]
        break;
 8004eb0:	e009      	b.n	8004ec6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eb6:	61fb      	str	r3, [r7, #28]
        break;
 8004eb8:	e005      	b.n	8004ec6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ec4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d077      	beq.n	8004fbc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005a      	lsls	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	441a      	add	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b0f      	cmp	r3, #15
 8004ee6:	d916      	bls.n	8004f16 <UART_SetConfig+0x4a6>
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eee:	d212      	bcs.n	8004f16 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f023 030f 	bic.w	r3, r3, #15
 8004ef8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f003 0307 	and.w	r3, r3, #7
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	8afa      	ldrh	r2, [r7, #22]
 8004f12:	60da      	str	r2, [r3, #12]
 8004f14:	e052      	b.n	8004fbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004f1c:	e04e      	b.n	8004fbc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d827      	bhi.n	8004f76 <UART_SetConfig+0x506>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0x4bc>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f51 	.word	0x08004f51
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	08004f77 	.word	0x08004f77
 8004f3c:	08004f67 	.word	0x08004f67
 8004f40:	08004f77 	.word	0x08004f77
 8004f44:	08004f77 	.word	0x08004f77
 8004f48:	08004f77 	.word	0x08004f77
 8004f4c:	08004f6f 	.word	0x08004f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f50:	f7fe fd8c 	bl	8003a6c <HAL_RCC_GetPCLK1Freq>
 8004f54:	61f8      	str	r0, [r7, #28]
        break;
 8004f56:	e014      	b.n	8004f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7fe fd9e 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	61f8      	str	r0, [r7, #28]
        break;
 8004f5e:	e010      	b.n	8004f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f60:	4b1e      	ldr	r3, [pc, #120]	@ (8004fdc <UART_SetConfig+0x56c>)
 8004f62:	61fb      	str	r3, [r7, #28]
        break;
 8004f64:	e00d      	b.n	8004f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f66:	f7fe fce9 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004f6a:	61f8      	str	r0, [r7, #28]
        break;
 8004f6c:	e009      	b.n	8004f82 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f72:	61fb      	str	r3, [r7, #28]
        break;
 8004f74:	e005      	b.n	8004f82 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f80:	bf00      	nop
    }

    if (pclk != 0U)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d019      	beq.n	8004fbc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	085a      	lsrs	r2, r3, #1
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d909      	bls.n	8004fb6 <UART_SetConfig+0x546>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d205      	bcs.n	8004fb6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60da      	str	r2, [r3, #12]
 8004fb4:	e002      	b.n	8004fbc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	@ 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40008000 	.word	0x40008000
 8004fdc:	00f42400 	.word	0x00f42400

08004fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	430a      	orrs	r2, r1
 80050d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050de:	d10a      	bne.n	80050f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	605a      	str	r2, [r3, #4]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b098      	sub	sp, #96	@ 0x60
 8005128:	af02      	add	r7, sp, #8
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005134:	f7fc fe6e 	bl	8001e14 <HAL_GetTick>
 8005138:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b08      	cmp	r3, #8
 8005146:	d12e      	bne.n	80051a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f88c 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d021      	beq.n	80051a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005172:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005176:	653b      	str	r3, [r7, #80]	@ 0x50
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005180:	647b      	str	r3, [r7, #68]	@ 0x44
 8005182:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800518e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e062      	b.n	800526c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d149      	bne.n	8005248 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051bc:	2200      	movs	r2, #0
 80051be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f856 	bl	8005274 <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03c      	beq.n	8005248 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	623b      	str	r3, [r7, #32]
   return(result);
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005220:	61fa      	str	r2, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	617b      	str	r3, [r7, #20]
   return(result);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e011      	b.n	800526c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2220      	movs	r2, #32
 8005252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3758      	adds	r7, #88	@ 0x58
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	e049      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d045      	beq.n	800531a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fc fdc1 	bl	8001e14 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e048      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d031      	beq.n	800531a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d110      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2208      	movs	r2, #8
 80052ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f838 	bl	8005342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2208      	movs	r2, #8
 80052d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e029      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f4:	d111      	bne.n	800531a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f81e 	bl	8005342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e00f      	b.n	800533a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69da      	ldr	r2, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	bf0c      	ite	eq
 800532a:	2301      	moveq	r3, #1
 800532c:	2300      	movne	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	461a      	mov	r2, r3
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	429a      	cmp	r2, r3
 8005336:	d0a6      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005342:	b480      	push	{r7}
 8005344:	b095      	sub	sp, #84	@ 0x54
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005368:	643b      	str	r3, [r7, #64]	@ 0x40
 800536a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e6      	bne.n	800534a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3308      	adds	r3, #8
 8005382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	61fb      	str	r3, [r7, #28]
   return(result);
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d118      	bne.n	80053ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f023 0310 	bic.w	r3, r3, #16
 80053cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6979      	ldr	r1, [r7, #20]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	613b      	str	r3, [r7, #16]
   return(result);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053fe:	bf00      	nop
 8005400:	3754      	adds	r7, #84	@ 0x54
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <__cvt>:
 800540a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800540e:	ec57 6b10 	vmov	r6, r7, d0
 8005412:	2f00      	cmp	r7, #0
 8005414:	460c      	mov	r4, r1
 8005416:	4619      	mov	r1, r3
 8005418:	463b      	mov	r3, r7
 800541a:	bfbb      	ittet	lt
 800541c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005420:	461f      	movlt	r7, r3
 8005422:	2300      	movge	r3, #0
 8005424:	232d      	movlt	r3, #45	@ 0x2d
 8005426:	700b      	strb	r3, [r1, #0]
 8005428:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800542a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800542e:	4691      	mov	r9, r2
 8005430:	f023 0820 	bic.w	r8, r3, #32
 8005434:	bfbc      	itt	lt
 8005436:	4632      	movlt	r2, r6
 8005438:	4616      	movlt	r6, r2
 800543a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800543e:	d005      	beq.n	800544c <__cvt+0x42>
 8005440:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005444:	d100      	bne.n	8005448 <__cvt+0x3e>
 8005446:	3401      	adds	r4, #1
 8005448:	2102      	movs	r1, #2
 800544a:	e000      	b.n	800544e <__cvt+0x44>
 800544c:	2103      	movs	r1, #3
 800544e:	ab03      	add	r3, sp, #12
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	ab02      	add	r3, sp, #8
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	ec47 6b10 	vmov	d0, r6, r7
 800545a:	4653      	mov	r3, sl
 800545c:	4622      	mov	r2, r4
 800545e:	f000 fe5b 	bl	8006118 <_dtoa_r>
 8005462:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005466:	4605      	mov	r5, r0
 8005468:	d119      	bne.n	800549e <__cvt+0x94>
 800546a:	f019 0f01 	tst.w	r9, #1
 800546e:	d00e      	beq.n	800548e <__cvt+0x84>
 8005470:	eb00 0904 	add.w	r9, r0, r4
 8005474:	2200      	movs	r2, #0
 8005476:	2300      	movs	r3, #0
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fb fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8005480:	b108      	cbz	r0, 8005486 <__cvt+0x7c>
 8005482:	f8cd 900c 	str.w	r9, [sp, #12]
 8005486:	2230      	movs	r2, #48	@ 0x30
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	454b      	cmp	r3, r9
 800548c:	d31e      	bcc.n	80054cc <__cvt+0xc2>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005492:	1b5b      	subs	r3, r3, r5
 8005494:	4628      	mov	r0, r5
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	b004      	add	sp, #16
 800549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054a2:	eb00 0904 	add.w	r9, r0, r4
 80054a6:	d1e5      	bne.n	8005474 <__cvt+0x6a>
 80054a8:	7803      	ldrb	r3, [r0, #0]
 80054aa:	2b30      	cmp	r3, #48	@ 0x30
 80054ac:	d10a      	bne.n	80054c4 <__cvt+0xba>
 80054ae:	2200      	movs	r2, #0
 80054b0:	2300      	movs	r3, #0
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fb fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80054ba:	b918      	cbnz	r0, 80054c4 <__cvt+0xba>
 80054bc:	f1c4 0401 	rsb	r4, r4, #1
 80054c0:	f8ca 4000 	str.w	r4, [sl]
 80054c4:	f8da 3000 	ldr.w	r3, [sl]
 80054c8:	4499      	add	r9, r3
 80054ca:	e7d3      	b.n	8005474 <__cvt+0x6a>
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	9103      	str	r1, [sp, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e7d9      	b.n	8005488 <__cvt+0x7e>

080054d4 <__exponent>:
 80054d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054d6:	2900      	cmp	r1, #0
 80054d8:	bfba      	itte	lt
 80054da:	4249      	neglt	r1, r1
 80054dc:	232d      	movlt	r3, #45	@ 0x2d
 80054de:	232b      	movge	r3, #43	@ 0x2b
 80054e0:	2909      	cmp	r1, #9
 80054e2:	7002      	strb	r2, [r0, #0]
 80054e4:	7043      	strb	r3, [r0, #1]
 80054e6:	dd29      	ble.n	800553c <__exponent+0x68>
 80054e8:	f10d 0307 	add.w	r3, sp, #7
 80054ec:	461d      	mov	r5, r3
 80054ee:	270a      	movs	r7, #10
 80054f0:	461a      	mov	r2, r3
 80054f2:	fbb1 f6f7 	udiv	r6, r1, r7
 80054f6:	fb07 1416 	mls	r4, r7, r6, r1
 80054fa:	3430      	adds	r4, #48	@ 0x30
 80054fc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005500:	460c      	mov	r4, r1
 8005502:	2c63      	cmp	r4, #99	@ 0x63
 8005504:	f103 33ff 	add.w	r3, r3, #4294967295
 8005508:	4631      	mov	r1, r6
 800550a:	dcf1      	bgt.n	80054f0 <__exponent+0x1c>
 800550c:	3130      	adds	r1, #48	@ 0x30
 800550e:	1e94      	subs	r4, r2, #2
 8005510:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005514:	1c41      	adds	r1, r0, #1
 8005516:	4623      	mov	r3, r4
 8005518:	42ab      	cmp	r3, r5
 800551a:	d30a      	bcc.n	8005532 <__exponent+0x5e>
 800551c:	f10d 0309 	add.w	r3, sp, #9
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	42ac      	cmp	r4, r5
 8005524:	bf88      	it	hi
 8005526:	2300      	movhi	r3, #0
 8005528:	3302      	adds	r3, #2
 800552a:	4403      	add	r3, r0
 800552c:	1a18      	subs	r0, r3, r0
 800552e:	b003      	add	sp, #12
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005536:	f801 6f01 	strb.w	r6, [r1, #1]!
 800553a:	e7ed      	b.n	8005518 <__exponent+0x44>
 800553c:	2330      	movs	r3, #48	@ 0x30
 800553e:	3130      	adds	r1, #48	@ 0x30
 8005540:	7083      	strb	r3, [r0, #2]
 8005542:	70c1      	strb	r1, [r0, #3]
 8005544:	1d03      	adds	r3, r0, #4
 8005546:	e7f1      	b.n	800552c <__exponent+0x58>

08005548 <_printf_float>:
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	b08d      	sub	sp, #52	@ 0x34
 800554e:	460c      	mov	r4, r1
 8005550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005554:	4616      	mov	r6, r2
 8005556:	461f      	mov	r7, r3
 8005558:	4605      	mov	r5, r0
 800555a:	f000 fcdb 	bl	8005f14 <_localeconv_r>
 800555e:	6803      	ldr	r3, [r0, #0]
 8005560:	9304      	str	r3, [sp, #16]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fa fe84 	bl	8000270 <strlen>
 8005568:	2300      	movs	r3, #0
 800556a:	930a      	str	r3, [sp, #40]	@ 0x28
 800556c:	f8d8 3000 	ldr.w	r3, [r8]
 8005570:	9005      	str	r0, [sp, #20]
 8005572:	3307      	adds	r3, #7
 8005574:	f023 0307 	bic.w	r3, r3, #7
 8005578:	f103 0208 	add.w	r2, r3, #8
 800557c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005580:	f8d4 b000 	ldr.w	fp, [r4]
 8005584:	f8c8 2000 	str.w	r2, [r8]
 8005588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800558c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005590:	9307      	str	r3, [sp, #28]
 8005592:	f8cd 8018 	str.w	r8, [sp, #24]
 8005596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800559a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800559e:	4b9c      	ldr	r3, [pc, #624]	@ (8005810 <_printf_float+0x2c8>)
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	f7fb fac2 	bl	8000b2c <__aeabi_dcmpun>
 80055a8:	bb70      	cbnz	r0, 8005608 <_printf_float+0xc0>
 80055aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ae:	4b98      	ldr	r3, [pc, #608]	@ (8005810 <_printf_float+0x2c8>)
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	f7fb fa9c 	bl	8000af0 <__aeabi_dcmple>
 80055b8:	bb30      	cbnz	r0, 8005608 <_printf_float+0xc0>
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	4640      	mov	r0, r8
 80055c0:	4649      	mov	r1, r9
 80055c2:	f7fb fa8b 	bl	8000adc <__aeabi_dcmplt>
 80055c6:	b110      	cbz	r0, 80055ce <_printf_float+0x86>
 80055c8:	232d      	movs	r3, #45	@ 0x2d
 80055ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ce:	4a91      	ldr	r2, [pc, #580]	@ (8005814 <_printf_float+0x2cc>)
 80055d0:	4b91      	ldr	r3, [pc, #580]	@ (8005818 <_printf_float+0x2d0>)
 80055d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055d6:	bf94      	ite	ls
 80055d8:	4690      	movls	r8, r2
 80055da:	4698      	movhi	r8, r3
 80055dc:	2303      	movs	r3, #3
 80055de:	6123      	str	r3, [r4, #16]
 80055e0:	f02b 0304 	bic.w	r3, fp, #4
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	f04f 0900 	mov.w	r9, #0
 80055ea:	9700      	str	r7, [sp, #0]
 80055ec:	4633      	mov	r3, r6
 80055ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f9d2 	bl	800599c <_printf_common>
 80055f8:	3001      	adds	r0, #1
 80055fa:	f040 808d 	bne.w	8005718 <_printf_float+0x1d0>
 80055fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005602:	b00d      	add	sp, #52	@ 0x34
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	4642      	mov	r2, r8
 800560a:	464b      	mov	r3, r9
 800560c:	4640      	mov	r0, r8
 800560e:	4649      	mov	r1, r9
 8005610:	f7fb fa8c 	bl	8000b2c <__aeabi_dcmpun>
 8005614:	b140      	cbz	r0, 8005628 <_printf_float+0xe0>
 8005616:	464b      	mov	r3, r9
 8005618:	2b00      	cmp	r3, #0
 800561a:	bfbc      	itt	lt
 800561c:	232d      	movlt	r3, #45	@ 0x2d
 800561e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005622:	4a7e      	ldr	r2, [pc, #504]	@ (800581c <_printf_float+0x2d4>)
 8005624:	4b7e      	ldr	r3, [pc, #504]	@ (8005820 <_printf_float+0x2d8>)
 8005626:	e7d4      	b.n	80055d2 <_printf_float+0x8a>
 8005628:	6863      	ldr	r3, [r4, #4]
 800562a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800562e:	9206      	str	r2, [sp, #24]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	d13b      	bne.n	80056ac <_printf_float+0x164>
 8005634:	2306      	movs	r3, #6
 8005636:	6063      	str	r3, [r4, #4]
 8005638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800563c:	2300      	movs	r3, #0
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	ab0a      	add	r3, sp, #40	@ 0x28
 8005644:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005648:	ab09      	add	r3, sp, #36	@ 0x24
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	6861      	ldr	r1, [r4, #4]
 800564e:	ec49 8b10 	vmov	d0, r8, r9
 8005652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005656:	4628      	mov	r0, r5
 8005658:	f7ff fed7 	bl	800540a <__cvt>
 800565c:	9b06      	ldr	r3, [sp, #24]
 800565e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005660:	2b47      	cmp	r3, #71	@ 0x47
 8005662:	4680      	mov	r8, r0
 8005664:	d129      	bne.n	80056ba <_printf_float+0x172>
 8005666:	1cc8      	adds	r0, r1, #3
 8005668:	db02      	blt.n	8005670 <_printf_float+0x128>
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	4299      	cmp	r1, r3
 800566e:	dd41      	ble.n	80056f4 <_printf_float+0x1ac>
 8005670:	f1aa 0a02 	sub.w	sl, sl, #2
 8005674:	fa5f fa8a 	uxtb.w	sl, sl
 8005678:	3901      	subs	r1, #1
 800567a:	4652      	mov	r2, sl
 800567c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005680:	9109      	str	r1, [sp, #36]	@ 0x24
 8005682:	f7ff ff27 	bl	80054d4 <__exponent>
 8005686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005688:	1813      	adds	r3, r2, r0
 800568a:	2a01      	cmp	r2, #1
 800568c:	4681      	mov	r9, r0
 800568e:	6123      	str	r3, [r4, #16]
 8005690:	dc02      	bgt.n	8005698 <_printf_float+0x150>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	07d2      	lsls	r2, r2, #31
 8005696:	d501      	bpl.n	800569c <_printf_float+0x154>
 8005698:	3301      	adds	r3, #1
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0a2      	beq.n	80055ea <_printf_float+0xa2>
 80056a4:	232d      	movs	r3, #45	@ 0x2d
 80056a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056aa:	e79e      	b.n	80055ea <_printf_float+0xa2>
 80056ac:	9a06      	ldr	r2, [sp, #24]
 80056ae:	2a47      	cmp	r2, #71	@ 0x47
 80056b0:	d1c2      	bne.n	8005638 <_printf_float+0xf0>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1c0      	bne.n	8005638 <_printf_float+0xf0>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e7bd      	b.n	8005636 <_printf_float+0xee>
 80056ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056be:	d9db      	bls.n	8005678 <_printf_float+0x130>
 80056c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056c4:	d118      	bne.n	80056f8 <_printf_float+0x1b0>
 80056c6:	2900      	cmp	r1, #0
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	dd0b      	ble.n	80056e4 <_printf_float+0x19c>
 80056cc:	6121      	str	r1, [r4, #16]
 80056ce:	b913      	cbnz	r3, 80056d6 <_printf_float+0x18e>
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	07d0      	lsls	r0, r2, #31
 80056d4:	d502      	bpl.n	80056dc <_printf_float+0x194>
 80056d6:	3301      	adds	r3, #1
 80056d8:	440b      	add	r3, r1
 80056da:	6123      	str	r3, [r4, #16]
 80056dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056de:	f04f 0900 	mov.w	r9, #0
 80056e2:	e7db      	b.n	800569c <_printf_float+0x154>
 80056e4:	b913      	cbnz	r3, 80056ec <_printf_float+0x1a4>
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	07d2      	lsls	r2, r2, #31
 80056ea:	d501      	bpl.n	80056f0 <_printf_float+0x1a8>
 80056ec:	3302      	adds	r3, #2
 80056ee:	e7f4      	b.n	80056da <_printf_float+0x192>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e7f2      	b.n	80056da <_printf_float+0x192>
 80056f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80056f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056fa:	4299      	cmp	r1, r3
 80056fc:	db05      	blt.n	800570a <_printf_float+0x1c2>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	6121      	str	r1, [r4, #16]
 8005702:	07d8      	lsls	r0, r3, #31
 8005704:	d5ea      	bpl.n	80056dc <_printf_float+0x194>
 8005706:	1c4b      	adds	r3, r1, #1
 8005708:	e7e7      	b.n	80056da <_printf_float+0x192>
 800570a:	2900      	cmp	r1, #0
 800570c:	bfd4      	ite	le
 800570e:	f1c1 0202 	rsble	r2, r1, #2
 8005712:	2201      	movgt	r2, #1
 8005714:	4413      	add	r3, r2
 8005716:	e7e0      	b.n	80056da <_printf_float+0x192>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	055a      	lsls	r2, r3, #21
 800571c:	d407      	bmi.n	800572e <_printf_float+0x1e6>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	4642      	mov	r2, r8
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	d12b      	bne.n	8005784 <_printf_float+0x23c>
 800572c:	e767      	b.n	80055fe <_printf_float+0xb6>
 800572e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005732:	f240 80dd 	bls.w	80058f0 <_printf_float+0x3a8>
 8005736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800573a:	2200      	movs	r2, #0
 800573c:	2300      	movs	r3, #0
 800573e:	f7fb f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005742:	2800      	cmp	r0, #0
 8005744:	d033      	beq.n	80057ae <_printf_float+0x266>
 8005746:	4a37      	ldr	r2, [pc, #220]	@ (8005824 <_printf_float+0x2dc>)
 8005748:	2301      	movs	r3, #1
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f af54 	beq.w	80055fe <_printf_float+0xb6>
 8005756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800575a:	4543      	cmp	r3, r8
 800575c:	db02      	blt.n	8005764 <_printf_float+0x21c>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	07d8      	lsls	r0, r3, #31
 8005762:	d50f      	bpl.n	8005784 <_printf_float+0x23c>
 8005764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f af45 	beq.w	80055fe <_printf_float+0xb6>
 8005774:	f04f 0900 	mov.w	r9, #0
 8005778:	f108 38ff 	add.w	r8, r8, #4294967295
 800577c:	f104 0a1a 	add.w	sl, r4, #26
 8005780:	45c8      	cmp	r8, r9
 8005782:	dc09      	bgt.n	8005798 <_printf_float+0x250>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	079b      	lsls	r3, r3, #30
 8005788:	f100 8103 	bmi.w	8005992 <_printf_float+0x44a>
 800578c:	68e0      	ldr	r0, [r4, #12]
 800578e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005790:	4298      	cmp	r0, r3
 8005792:	bfb8      	it	lt
 8005794:	4618      	movlt	r0, r3
 8005796:	e734      	b.n	8005602 <_printf_float+0xba>
 8005798:	2301      	movs	r3, #1
 800579a:	4652      	mov	r2, sl
 800579c:	4631      	mov	r1, r6
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	f43f af2b 	beq.w	80055fe <_printf_float+0xb6>
 80057a8:	f109 0901 	add.w	r9, r9, #1
 80057ac:	e7e8      	b.n	8005780 <_printf_float+0x238>
 80057ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dc39      	bgt.n	8005828 <_printf_float+0x2e0>
 80057b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005824 <_printf_float+0x2dc>)
 80057b6:	2301      	movs	r3, #1
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af1d 	beq.w	80055fe <_printf_float+0xb6>
 80057c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80057c8:	ea59 0303 	orrs.w	r3, r9, r3
 80057cc:	d102      	bne.n	80057d4 <_printf_float+0x28c>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	07d9      	lsls	r1, r3, #31
 80057d2:	d5d7      	bpl.n	8005784 <_printf_float+0x23c>
 80057d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af0d 	beq.w	80055fe <_printf_float+0xb6>
 80057e4:	f04f 0a00 	mov.w	sl, #0
 80057e8:	f104 0b1a 	add.w	fp, r4, #26
 80057ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ee:	425b      	negs	r3, r3
 80057f0:	4553      	cmp	r3, sl
 80057f2:	dc01      	bgt.n	80057f8 <_printf_float+0x2b0>
 80057f4:	464b      	mov	r3, r9
 80057f6:	e793      	b.n	8005720 <_printf_float+0x1d8>
 80057f8:	2301      	movs	r3, #1
 80057fa:	465a      	mov	r2, fp
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f aefb 	beq.w	80055fe <_printf_float+0xb6>
 8005808:	f10a 0a01 	add.w	sl, sl, #1
 800580c:	e7ee      	b.n	80057ec <_printf_float+0x2a4>
 800580e:	bf00      	nop
 8005810:	7fefffff 	.word	0x7fefffff
 8005814:	08008138 	.word	0x08008138
 8005818:	0800813c 	.word	0x0800813c
 800581c:	08008140 	.word	0x08008140
 8005820:	08008144 	.word	0x08008144
 8005824:	08008148 	.word	0x08008148
 8005828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800582a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800582e:	4553      	cmp	r3, sl
 8005830:	bfa8      	it	ge
 8005832:	4653      	movge	r3, sl
 8005834:	2b00      	cmp	r3, #0
 8005836:	4699      	mov	r9, r3
 8005838:	dc36      	bgt.n	80058a8 <_printf_float+0x360>
 800583a:	f04f 0b00 	mov.w	fp, #0
 800583e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005842:	f104 021a 	add.w	r2, r4, #26
 8005846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005848:	9306      	str	r3, [sp, #24]
 800584a:	eba3 0309 	sub.w	r3, r3, r9
 800584e:	455b      	cmp	r3, fp
 8005850:	dc31      	bgt.n	80058b6 <_printf_float+0x36e>
 8005852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005854:	459a      	cmp	sl, r3
 8005856:	dc3a      	bgt.n	80058ce <_printf_float+0x386>
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	07da      	lsls	r2, r3, #31
 800585c:	d437      	bmi.n	80058ce <_printf_float+0x386>
 800585e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005860:	ebaa 0903 	sub.w	r9, sl, r3
 8005864:	9b06      	ldr	r3, [sp, #24]
 8005866:	ebaa 0303 	sub.w	r3, sl, r3
 800586a:	4599      	cmp	r9, r3
 800586c:	bfa8      	it	ge
 800586e:	4699      	movge	r9, r3
 8005870:	f1b9 0f00 	cmp.w	r9, #0
 8005874:	dc33      	bgt.n	80058de <_printf_float+0x396>
 8005876:	f04f 0800 	mov.w	r8, #0
 800587a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800587e:	f104 0b1a 	add.w	fp, r4, #26
 8005882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005884:	ebaa 0303 	sub.w	r3, sl, r3
 8005888:	eba3 0309 	sub.w	r3, r3, r9
 800588c:	4543      	cmp	r3, r8
 800588e:	f77f af79 	ble.w	8005784 <_printf_float+0x23c>
 8005892:	2301      	movs	r3, #1
 8005894:	465a      	mov	r2, fp
 8005896:	4631      	mov	r1, r6
 8005898:	4628      	mov	r0, r5
 800589a:	47b8      	blx	r7
 800589c:	3001      	adds	r0, #1
 800589e:	f43f aeae 	beq.w	80055fe <_printf_float+0xb6>
 80058a2:	f108 0801 	add.w	r8, r8, #1
 80058a6:	e7ec      	b.n	8005882 <_printf_float+0x33a>
 80058a8:	4642      	mov	r2, r8
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1c2      	bne.n	800583a <_printf_float+0x2f2>
 80058b4:	e6a3      	b.n	80055fe <_printf_float+0xb6>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4631      	mov	r1, r6
 80058ba:	4628      	mov	r0, r5
 80058bc:	9206      	str	r2, [sp, #24]
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f ae9c 	beq.w	80055fe <_printf_float+0xb6>
 80058c6:	9a06      	ldr	r2, [sp, #24]
 80058c8:	f10b 0b01 	add.w	fp, fp, #1
 80058cc:	e7bb      	b.n	8005846 <_printf_float+0x2fe>
 80058ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	47b8      	blx	r7
 80058d8:	3001      	adds	r0, #1
 80058da:	d1c0      	bne.n	800585e <_printf_float+0x316>
 80058dc:	e68f      	b.n	80055fe <_printf_float+0xb6>
 80058de:	9a06      	ldr	r2, [sp, #24]
 80058e0:	464b      	mov	r3, r9
 80058e2:	4442      	add	r2, r8
 80058e4:	4631      	mov	r1, r6
 80058e6:	4628      	mov	r0, r5
 80058e8:	47b8      	blx	r7
 80058ea:	3001      	adds	r0, #1
 80058ec:	d1c3      	bne.n	8005876 <_printf_float+0x32e>
 80058ee:	e686      	b.n	80055fe <_printf_float+0xb6>
 80058f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058f4:	f1ba 0f01 	cmp.w	sl, #1
 80058f8:	dc01      	bgt.n	80058fe <_printf_float+0x3b6>
 80058fa:	07db      	lsls	r3, r3, #31
 80058fc:	d536      	bpl.n	800596c <_printf_float+0x424>
 80058fe:	2301      	movs	r3, #1
 8005900:	4642      	mov	r2, r8
 8005902:	4631      	mov	r1, r6
 8005904:	4628      	mov	r0, r5
 8005906:	47b8      	blx	r7
 8005908:	3001      	adds	r0, #1
 800590a:	f43f ae78 	beq.w	80055fe <_printf_float+0xb6>
 800590e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005912:	4631      	mov	r1, r6
 8005914:	4628      	mov	r0, r5
 8005916:	47b8      	blx	r7
 8005918:	3001      	adds	r0, #1
 800591a:	f43f ae70 	beq.w	80055fe <_printf_float+0xb6>
 800591e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005922:	2200      	movs	r2, #0
 8005924:	2300      	movs	r3, #0
 8005926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800592a:	f7fb f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800592e:	b9c0      	cbnz	r0, 8005962 <_printf_float+0x41a>
 8005930:	4653      	mov	r3, sl
 8005932:	f108 0201 	add.w	r2, r8, #1
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d10c      	bne.n	800595a <_printf_float+0x412>
 8005940:	e65d      	b.n	80055fe <_printf_float+0xb6>
 8005942:	2301      	movs	r3, #1
 8005944:	465a      	mov	r2, fp
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f ae56 	beq.w	80055fe <_printf_float+0xb6>
 8005952:	f108 0801 	add.w	r8, r8, #1
 8005956:	45d0      	cmp	r8, sl
 8005958:	dbf3      	blt.n	8005942 <_printf_float+0x3fa>
 800595a:	464b      	mov	r3, r9
 800595c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005960:	e6df      	b.n	8005722 <_printf_float+0x1da>
 8005962:	f04f 0800 	mov.w	r8, #0
 8005966:	f104 0b1a 	add.w	fp, r4, #26
 800596a:	e7f4      	b.n	8005956 <_printf_float+0x40e>
 800596c:	2301      	movs	r3, #1
 800596e:	4642      	mov	r2, r8
 8005970:	e7e1      	b.n	8005936 <_printf_float+0x3ee>
 8005972:	2301      	movs	r3, #1
 8005974:	464a      	mov	r2, r9
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	47b8      	blx	r7
 800597c:	3001      	adds	r0, #1
 800597e:	f43f ae3e 	beq.w	80055fe <_printf_float+0xb6>
 8005982:	f108 0801 	add.w	r8, r8, #1
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800598a:	1a5b      	subs	r3, r3, r1
 800598c:	4543      	cmp	r3, r8
 800598e:	dcf0      	bgt.n	8005972 <_printf_float+0x42a>
 8005990:	e6fc      	b.n	800578c <_printf_float+0x244>
 8005992:	f04f 0800 	mov.w	r8, #0
 8005996:	f104 0919 	add.w	r9, r4, #25
 800599a:	e7f4      	b.n	8005986 <_printf_float+0x43e>

0800599c <_printf_common>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	4616      	mov	r6, r2
 80059a2:	4698      	mov	r8, r3
 80059a4:	688a      	ldr	r2, [r1, #8]
 80059a6:	690b      	ldr	r3, [r1, #16]
 80059a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bfb8      	it	lt
 80059b0:	4613      	movlt	r3, r2
 80059b2:	6033      	str	r3, [r6, #0]
 80059b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059b8:	4607      	mov	r7, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	b10a      	cbz	r2, 80059c2 <_printf_common+0x26>
 80059be:	3301      	adds	r3, #1
 80059c0:	6033      	str	r3, [r6, #0]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	0699      	lsls	r1, r3, #26
 80059c6:	bf42      	ittt	mi
 80059c8:	6833      	ldrmi	r3, [r6, #0]
 80059ca:	3302      	addmi	r3, #2
 80059cc:	6033      	strmi	r3, [r6, #0]
 80059ce:	6825      	ldr	r5, [r4, #0]
 80059d0:	f015 0506 	ands.w	r5, r5, #6
 80059d4:	d106      	bne.n	80059e4 <_printf_common+0x48>
 80059d6:	f104 0a19 	add.w	sl, r4, #25
 80059da:	68e3      	ldr	r3, [r4, #12]
 80059dc:	6832      	ldr	r2, [r6, #0]
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	42ab      	cmp	r3, r5
 80059e2:	dc26      	bgt.n	8005a32 <_printf_common+0x96>
 80059e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	3b00      	subs	r3, #0
 80059ec:	bf18      	it	ne
 80059ee:	2301      	movne	r3, #1
 80059f0:	0692      	lsls	r2, r2, #26
 80059f2:	d42b      	bmi.n	8005a4c <_printf_common+0xb0>
 80059f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059f8:	4641      	mov	r1, r8
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c8      	blx	r9
 80059fe:	3001      	adds	r0, #1
 8005a00:	d01e      	beq.n	8005a40 <_printf_common+0xa4>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	f003 0306 	and.w	r3, r3, #6
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	bf02      	ittt	eq
 8005a0e:	68e5      	ldreq	r5, [r4, #12]
 8005a10:	6833      	ldreq	r3, [r6, #0]
 8005a12:	1aed      	subeq	r5, r5, r3
 8005a14:	68a3      	ldr	r3, [r4, #8]
 8005a16:	bf0c      	ite	eq
 8005a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a1c:	2500      	movne	r5, #0
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bfc4      	itt	gt
 8005a22:	1a9b      	subgt	r3, r3, r2
 8005a24:	18ed      	addgt	r5, r5, r3
 8005a26:	2600      	movs	r6, #0
 8005a28:	341a      	adds	r4, #26
 8005a2a:	42b5      	cmp	r5, r6
 8005a2c:	d11a      	bne.n	8005a64 <_printf_common+0xc8>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e008      	b.n	8005a44 <_printf_common+0xa8>
 8005a32:	2301      	movs	r3, #1
 8005a34:	4652      	mov	r2, sl
 8005a36:	4641      	mov	r1, r8
 8005a38:	4638      	mov	r0, r7
 8005a3a:	47c8      	blx	r9
 8005a3c:	3001      	adds	r0, #1
 8005a3e:	d103      	bne.n	8005a48 <_printf_common+0xac>
 8005a40:	f04f 30ff 	mov.w	r0, #4294967295
 8005a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a48:	3501      	adds	r5, #1
 8005a4a:	e7c6      	b.n	80059da <_printf_common+0x3e>
 8005a4c:	18e1      	adds	r1, r4, r3
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	2030      	movs	r0, #48	@ 0x30
 8005a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a56:	4422      	add	r2, r4
 8005a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a60:	3302      	adds	r3, #2
 8005a62:	e7c7      	b.n	80059f4 <_printf_common+0x58>
 8005a64:	2301      	movs	r3, #1
 8005a66:	4622      	mov	r2, r4
 8005a68:	4641      	mov	r1, r8
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	47c8      	blx	r9
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d0e6      	beq.n	8005a40 <_printf_common+0xa4>
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7d9      	b.n	8005a2a <_printf_common+0x8e>
	...

08005a78 <_printf_i>:
 8005a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	7e0f      	ldrb	r7, [r1, #24]
 8005a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a80:	2f78      	cmp	r7, #120	@ 0x78
 8005a82:	4691      	mov	r9, r2
 8005a84:	4680      	mov	r8, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	469a      	mov	sl, r3
 8005a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a8e:	d807      	bhi.n	8005aa0 <_printf_i+0x28>
 8005a90:	2f62      	cmp	r7, #98	@ 0x62
 8005a92:	d80a      	bhi.n	8005aaa <_printf_i+0x32>
 8005a94:	2f00      	cmp	r7, #0
 8005a96:	f000 80d2 	beq.w	8005c3e <_printf_i+0x1c6>
 8005a9a:	2f58      	cmp	r7, #88	@ 0x58
 8005a9c:	f000 80b9 	beq.w	8005c12 <_printf_i+0x19a>
 8005aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005aa8:	e03a      	b.n	8005b20 <_printf_i+0xa8>
 8005aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005aae:	2b15      	cmp	r3, #21
 8005ab0:	d8f6      	bhi.n	8005aa0 <_printf_i+0x28>
 8005ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ab8 <_printf_i+0x40>)
 8005ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab8:	08005b11 	.word	0x08005b11
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005aa1 	.word	0x08005aa1
 8005ac4:	08005aa1 	.word	0x08005aa1
 8005ac8:	08005aa1 	.word	0x08005aa1
 8005acc:	08005aa1 	.word	0x08005aa1
 8005ad0:	08005b25 	.word	0x08005b25
 8005ad4:	08005aa1 	.word	0x08005aa1
 8005ad8:	08005aa1 	.word	0x08005aa1
 8005adc:	08005aa1 	.word	0x08005aa1
 8005ae0:	08005aa1 	.word	0x08005aa1
 8005ae4:	08005c25 	.word	0x08005c25
 8005ae8:	08005b4f 	.word	0x08005b4f
 8005aec:	08005bdf 	.word	0x08005bdf
 8005af0:	08005aa1 	.word	0x08005aa1
 8005af4:	08005aa1 	.word	0x08005aa1
 8005af8:	08005c47 	.word	0x08005c47
 8005afc:	08005aa1 	.word	0x08005aa1
 8005b00:	08005b4f 	.word	0x08005b4f
 8005b04:	08005aa1 	.word	0x08005aa1
 8005b08:	08005aa1 	.word	0x08005aa1
 8005b0c:	08005be7 	.word	0x08005be7
 8005b10:	6833      	ldr	r3, [r6, #0]
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6032      	str	r2, [r6, #0]
 8005b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b20:	2301      	movs	r3, #1
 8005b22:	e09d      	b.n	8005c60 <_printf_i+0x1e8>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	6820      	ldr	r0, [r4, #0]
 8005b28:	1d19      	adds	r1, r3, #4
 8005b2a:	6031      	str	r1, [r6, #0]
 8005b2c:	0606      	lsls	r6, r0, #24
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0xbc>
 8005b30:	681d      	ldr	r5, [r3, #0]
 8005b32:	e003      	b.n	8005b3c <_printf_i+0xc4>
 8005b34:	0645      	lsls	r5, r0, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0xb8>
 8005b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b3c:	2d00      	cmp	r5, #0
 8005b3e:	da03      	bge.n	8005b48 <_printf_i+0xd0>
 8005b40:	232d      	movs	r3, #45	@ 0x2d
 8005b42:	426d      	negs	r5, r5
 8005b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b48:	4859      	ldr	r0, [pc, #356]	@ (8005cb0 <_printf_i+0x238>)
 8005b4a:	230a      	movs	r3, #10
 8005b4c:	e011      	b.n	8005b72 <_printf_i+0xfa>
 8005b4e:	6821      	ldr	r1, [r4, #0]
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	0608      	lsls	r0, r1, #24
 8005b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b58:	d402      	bmi.n	8005b60 <_printf_i+0xe8>
 8005b5a:	0649      	lsls	r1, r1, #25
 8005b5c:	bf48      	it	mi
 8005b5e:	b2ad      	uxthmi	r5, r5
 8005b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b62:	4853      	ldr	r0, [pc, #332]	@ (8005cb0 <_printf_i+0x238>)
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	bf14      	ite	ne
 8005b68:	230a      	movne	r3, #10
 8005b6a:	2308      	moveq	r3, #8
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b72:	6866      	ldr	r6, [r4, #4]
 8005b74:	60a6      	str	r6, [r4, #8]
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	bfa2      	ittt	ge
 8005b7a:	6821      	ldrge	r1, [r4, #0]
 8005b7c:	f021 0104 	bicge.w	r1, r1, #4
 8005b80:	6021      	strge	r1, [r4, #0]
 8005b82:	b90d      	cbnz	r5, 8005b88 <_printf_i+0x110>
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	d04b      	beq.n	8005c20 <_printf_i+0x1a8>
 8005b88:	4616      	mov	r6, r2
 8005b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b92:	5dc7      	ldrb	r7, [r0, r7]
 8005b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b98:	462f      	mov	r7, r5
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	d9f4      	bls.n	8005b8a <_printf_i+0x112>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d10b      	bne.n	8005bbc <_printf_i+0x144>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07df      	lsls	r7, r3, #31
 8005ba8:	d508      	bpl.n	8005bbc <_printf_i+0x144>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	bfde      	ittt	le
 8005bb2:	2330      	movle	r3, #48	@ 0x30
 8005bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bbc:	1b92      	subs	r2, r2, r6
 8005bbe:	6122      	str	r2, [r4, #16]
 8005bc0:	f8cd a000 	str.w	sl, [sp]
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fee6 	bl	800599c <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14a      	bne.n	8005c6a <_printf_i+0x1f2>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	b004      	add	sp, #16
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	f043 0320 	orr.w	r3, r3, #32
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	4833      	ldr	r0, [pc, #204]	@ (8005cb4 <_printf_i+0x23c>)
 8005be8:	2778      	movs	r7, #120	@ 0x78
 8005bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	6831      	ldr	r1, [r6, #0]
 8005bf2:	061f      	lsls	r7, r3, #24
 8005bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bf8:	d402      	bmi.n	8005c00 <_printf_i+0x188>
 8005bfa:	065f      	lsls	r7, r3, #25
 8005bfc:	bf48      	it	mi
 8005bfe:	b2ad      	uxthmi	r5, r5
 8005c00:	6031      	str	r1, [r6, #0]
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	bf44      	itt	mi
 8005c06:	f043 0320 	orrmi.w	r3, r3, #32
 8005c0a:	6023      	strmi	r3, [r4, #0]
 8005c0c:	b11d      	cbz	r5, 8005c16 <_printf_i+0x19e>
 8005c0e:	2310      	movs	r3, #16
 8005c10:	e7ac      	b.n	8005b6c <_printf_i+0xf4>
 8005c12:	4827      	ldr	r0, [pc, #156]	@ (8005cb0 <_printf_i+0x238>)
 8005c14:	e7e9      	b.n	8005bea <_printf_i+0x172>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f023 0320 	bic.w	r3, r3, #32
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	e7f6      	b.n	8005c0e <_printf_i+0x196>
 8005c20:	4616      	mov	r6, r2
 8005c22:	e7bd      	b.n	8005ba0 <_printf_i+0x128>
 8005c24:	6833      	ldr	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	6961      	ldr	r1, [r4, #20]
 8005c2a:	1d18      	adds	r0, r3, #4
 8005c2c:	6030      	str	r0, [r6, #0]
 8005c2e:	062e      	lsls	r6, r5, #24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	d501      	bpl.n	8005c38 <_printf_i+0x1c0>
 8005c34:	6019      	str	r1, [r3, #0]
 8005c36:	e002      	b.n	8005c3e <_printf_i+0x1c6>
 8005c38:	0668      	lsls	r0, r5, #25
 8005c3a:	d5fb      	bpl.n	8005c34 <_printf_i+0x1bc>
 8005c3c:	8019      	strh	r1, [r3, #0]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	4616      	mov	r6, r2
 8005c44:	e7bc      	b.n	8005bc0 <_printf_i+0x148>
 8005c46:	6833      	ldr	r3, [r6, #0]
 8005c48:	1d1a      	adds	r2, r3, #4
 8005c4a:	6032      	str	r2, [r6, #0]
 8005c4c:	681e      	ldr	r6, [r3, #0]
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	2100      	movs	r1, #0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f7fa fabc 	bl	80001d0 <memchr>
 8005c58:	b108      	cbz	r0, 8005c5e <_printf_i+0x1e6>
 8005c5a:	1b80      	subs	r0, r0, r6
 8005c5c:	6060      	str	r0, [r4, #4]
 8005c5e:	6863      	ldr	r3, [r4, #4]
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	2300      	movs	r3, #0
 8005c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c68:	e7aa      	b.n	8005bc0 <_printf_i+0x148>
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	4632      	mov	r2, r6
 8005c6e:	4649      	mov	r1, r9
 8005c70:	4640      	mov	r0, r8
 8005c72:	47d0      	blx	sl
 8005c74:	3001      	adds	r0, #1
 8005c76:	d0ad      	beq.n	8005bd4 <_printf_i+0x15c>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	d413      	bmi.n	8005ca6 <_printf_i+0x22e>
 8005c7e:	68e0      	ldr	r0, [r4, #12]
 8005c80:	9b03      	ldr	r3, [sp, #12]
 8005c82:	4298      	cmp	r0, r3
 8005c84:	bfb8      	it	lt
 8005c86:	4618      	movlt	r0, r3
 8005c88:	e7a6      	b.n	8005bd8 <_printf_i+0x160>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4632      	mov	r2, r6
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d09d      	beq.n	8005bd4 <_printf_i+0x15c>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	9903      	ldr	r1, [sp, #12]
 8005c9e:	1a5b      	subs	r3, r3, r1
 8005ca0:	42ab      	cmp	r3, r5
 8005ca2:	dcf2      	bgt.n	8005c8a <_printf_i+0x212>
 8005ca4:	e7eb      	b.n	8005c7e <_printf_i+0x206>
 8005ca6:	2500      	movs	r5, #0
 8005ca8:	f104 0619 	add.w	r6, r4, #25
 8005cac:	e7f5      	b.n	8005c9a <_printf_i+0x222>
 8005cae:	bf00      	nop
 8005cb0:	0800814a 	.word	0x0800814a
 8005cb4:	0800815b 	.word	0x0800815b

08005cb8 <std>:
 8005cb8:	2300      	movs	r3, #0
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8005cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cc6:	6083      	str	r3, [r0, #8]
 8005cc8:	8181      	strh	r1, [r0, #12]
 8005cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ccc:	81c2      	strh	r2, [r0, #14]
 8005cce:	6183      	str	r3, [r0, #24]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	2208      	movs	r2, #8
 8005cd4:	305c      	adds	r0, #92	@ 0x5c
 8005cd6:	f000 f914 	bl	8005f02 <memset>
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <std+0x58>)
 8005cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cde:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <std+0x5c>)
 8005ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <std+0x60>)
 8005ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d1c <std+0x64>)
 8005ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cea:	4b0d      	ldr	r3, [pc, #52]	@ (8005d20 <std+0x68>)
 8005cec:	6224      	str	r4, [r4, #32]
 8005cee:	429c      	cmp	r4, r3
 8005cf0:	d006      	beq.n	8005d00 <std+0x48>
 8005cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cf6:	4294      	cmp	r4, r2
 8005cf8:	d002      	beq.n	8005d00 <std+0x48>
 8005cfa:	33d0      	adds	r3, #208	@ 0xd0
 8005cfc:	429c      	cmp	r4, r3
 8005cfe:	d105      	bne.n	8005d0c <std+0x54>
 8005d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d08:	f000 b978 	b.w	8005ffc <__retarget_lock_init_recursive>
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop
 8005d10:	08005e7d 	.word	0x08005e7d
 8005d14:	08005e9f 	.word	0x08005e9f
 8005d18:	08005ed7 	.word	0x08005ed7
 8005d1c:	08005efb 	.word	0x08005efb
 8005d20:	20000338 	.word	0x20000338

08005d24 <stdio_exit_handler>:
 8005d24:	4a02      	ldr	r2, [pc, #8]	@ (8005d30 <stdio_exit_handler+0xc>)
 8005d26:	4903      	ldr	r1, [pc, #12]	@ (8005d34 <stdio_exit_handler+0x10>)
 8005d28:	4803      	ldr	r0, [pc, #12]	@ (8005d38 <stdio_exit_handler+0x14>)
 8005d2a:	f000 b869 	b.w	8005e00 <_fwalk_sglue>
 8005d2e:	bf00      	nop
 8005d30:	2000000c 	.word	0x2000000c
 8005d34:	0800795d 	.word	0x0800795d
 8005d38:	2000001c 	.word	0x2000001c

08005d3c <cleanup_stdio>:
 8005d3c:	6841      	ldr	r1, [r0, #4]
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d70 <cleanup_stdio+0x34>)
 8005d40:	4299      	cmp	r1, r3
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	d001      	beq.n	8005d4c <cleanup_stdio+0x10>
 8005d48:	f001 fe08 	bl	800795c <_fflush_r>
 8005d4c:	68a1      	ldr	r1, [r4, #8]
 8005d4e:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <cleanup_stdio+0x38>)
 8005d50:	4299      	cmp	r1, r3
 8005d52:	d002      	beq.n	8005d5a <cleanup_stdio+0x1e>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 fe01 	bl	800795c <_fflush_r>
 8005d5a:	68e1      	ldr	r1, [r4, #12]
 8005d5c:	4b06      	ldr	r3, [pc, #24]	@ (8005d78 <cleanup_stdio+0x3c>)
 8005d5e:	4299      	cmp	r1, r3
 8005d60:	d004      	beq.n	8005d6c <cleanup_stdio+0x30>
 8005d62:	4620      	mov	r0, r4
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f001 bdf8 	b.w	800795c <_fflush_r>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000338 	.word	0x20000338
 8005d74:	200003a0 	.word	0x200003a0
 8005d78:	20000408 	.word	0x20000408

08005d7c <global_stdio_init.part.0>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <global_stdio_init.part.0+0x30>)
 8005d80:	4c0b      	ldr	r4, [pc, #44]	@ (8005db0 <global_stdio_init.part.0+0x34>)
 8005d82:	4a0c      	ldr	r2, [pc, #48]	@ (8005db4 <global_stdio_init.part.0+0x38>)
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	4620      	mov	r0, r4
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	f7ff ff94 	bl	8005cb8 <std>
 8005d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d94:	2201      	movs	r2, #1
 8005d96:	2109      	movs	r1, #9
 8005d98:	f7ff ff8e 	bl	8005cb8 <std>
 8005d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005da0:	2202      	movs	r2, #2
 8005da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da6:	2112      	movs	r1, #18
 8005da8:	f7ff bf86 	b.w	8005cb8 <std>
 8005dac:	20000470 	.word	0x20000470
 8005db0:	20000338 	.word	0x20000338
 8005db4:	08005d25 	.word	0x08005d25

08005db8 <__sfp_lock_acquire>:
 8005db8:	4801      	ldr	r0, [pc, #4]	@ (8005dc0 <__sfp_lock_acquire+0x8>)
 8005dba:	f000 b920 	b.w	8005ffe <__retarget_lock_acquire_recursive>
 8005dbe:	bf00      	nop
 8005dc0:	20000479 	.word	0x20000479

08005dc4 <__sfp_lock_release>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	@ (8005dcc <__sfp_lock_release+0x8>)
 8005dc6:	f000 b91b 	b.w	8006000 <__retarget_lock_release_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000479 	.word	0x20000479

08005dd0 <__sinit>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	f7ff fff0 	bl	8005db8 <__sfp_lock_acquire>
 8005dd8:	6a23      	ldr	r3, [r4, #32]
 8005dda:	b11b      	cbz	r3, 8005de4 <__sinit+0x14>
 8005ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005de0:	f7ff bff0 	b.w	8005dc4 <__sfp_lock_release>
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <__sinit+0x28>)
 8005de6:	6223      	str	r3, [r4, #32]
 8005de8:	4b04      	ldr	r3, [pc, #16]	@ (8005dfc <__sinit+0x2c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f5      	bne.n	8005ddc <__sinit+0xc>
 8005df0:	f7ff ffc4 	bl	8005d7c <global_stdio_init.part.0>
 8005df4:	e7f2      	b.n	8005ddc <__sinit+0xc>
 8005df6:	bf00      	nop
 8005df8:	08005d3d 	.word	0x08005d3d
 8005dfc:	20000470 	.word	0x20000470

08005e00 <_fwalk_sglue>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4607      	mov	r7, r0
 8005e06:	4688      	mov	r8, r1
 8005e08:	4614      	mov	r4, r2
 8005e0a:	2600      	movs	r6, #0
 8005e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e10:	f1b9 0901 	subs.w	r9, r9, #1
 8005e14:	d505      	bpl.n	8005e22 <_fwalk_sglue+0x22>
 8005e16:	6824      	ldr	r4, [r4, #0]
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d1f7      	bne.n	8005e0c <_fwalk_sglue+0xc>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d907      	bls.n	8005e38 <_fwalk_sglue+0x38>
 8005e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	d003      	beq.n	8005e38 <_fwalk_sglue+0x38>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4638      	mov	r0, r7
 8005e34:	47c0      	blx	r8
 8005e36:	4306      	orrs	r6, r0
 8005e38:	3568      	adds	r5, #104	@ 0x68
 8005e3a:	e7e9      	b.n	8005e10 <_fwalk_sglue+0x10>

08005e3c <siprintf>:
 8005e3c:	b40e      	push	{r1, r2, r3}
 8005e3e:	b500      	push	{lr}
 8005e40:	b09c      	sub	sp, #112	@ 0x70
 8005e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e44:	9002      	str	r0, [sp, #8]
 8005e46:	9006      	str	r0, [sp, #24]
 8005e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e4c:	4809      	ldr	r0, [pc, #36]	@ (8005e74 <siprintf+0x38>)
 8005e4e:	9107      	str	r1, [sp, #28]
 8005e50:	9104      	str	r1, [sp, #16]
 8005e52:	4909      	ldr	r1, [pc, #36]	@ (8005e78 <siprintf+0x3c>)
 8005e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e58:	9105      	str	r1, [sp, #20]
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	a902      	add	r1, sp, #8
 8005e60:	f001 fbfc 	bl	800765c <_svfiprintf_r>
 8005e64:	9b02      	ldr	r3, [sp, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	b01c      	add	sp, #112	@ 0x70
 8005e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e70:	b003      	add	sp, #12
 8005e72:	4770      	bx	lr
 8005e74:	20000018 	.word	0x20000018
 8005e78:	ffff0208 	.word	0xffff0208

08005e7c <__sread>:
 8005e7c:	b510      	push	{r4, lr}
 8005e7e:	460c      	mov	r4, r1
 8005e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e84:	f000 f86c 	bl	8005f60 <_read_r>
 8005e88:	2800      	cmp	r0, #0
 8005e8a:	bfab      	itete	ge
 8005e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e90:	181b      	addge	r3, r3, r0
 8005e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e96:	bfac      	ite	ge
 8005e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e9a:	81a3      	strhlt	r3, [r4, #12]
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <__swrite>:
 8005e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	461f      	mov	r7, r3
 8005ea4:	898b      	ldrh	r3, [r1, #12]
 8005ea6:	05db      	lsls	r3, r3, #23
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4616      	mov	r6, r2
 8005eae:	d505      	bpl.n	8005ebc <__swrite+0x1e>
 8005eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f000 f840 	bl	8005f3c <_lseek_r>
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ec6:	81a3      	strh	r3, [r4, #12]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	4628      	mov	r0, r5
 8005ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed2:	f000 b857 	b.w	8005f84 <_write_r>

08005ed6 <__sseek>:
 8005ed6:	b510      	push	{r4, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ede:	f000 f82d 	bl	8005f3c <_lseek_r>
 8005ee2:	1c43      	adds	r3, r0, #1
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	bf15      	itete	ne
 8005ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ef2:	81a3      	strheq	r3, [r4, #12]
 8005ef4:	bf18      	it	ne
 8005ef6:	81a3      	strhne	r3, [r4, #12]
 8005ef8:	bd10      	pop	{r4, pc}

08005efa <__sclose>:
 8005efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efe:	f000 b80d 	b.w	8005f1c <_close_r>

08005f02 <memset>:
 8005f02:	4402      	add	r2, r0
 8005f04:	4603      	mov	r3, r0
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d100      	bne.n	8005f0c <memset+0xa>
 8005f0a:	4770      	bx	lr
 8005f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005f10:	e7f9      	b.n	8005f06 <memset+0x4>
	...

08005f14 <_localeconv_r>:
 8005f14:	4800      	ldr	r0, [pc, #0]	@ (8005f18 <_localeconv_r+0x4>)
 8005f16:	4770      	bx	lr
 8005f18:	20000158 	.word	0x20000158

08005f1c <_close_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d06      	ldr	r5, [pc, #24]	@ (8005f38 <_close_r+0x1c>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fb fd7b 	bl	8001a22 <_close>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d102      	bne.n	8005f36 <_close_r+0x1a>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	b103      	cbz	r3, 8005f36 <_close_r+0x1a>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	bd38      	pop	{r3, r4, r5, pc}
 8005f38:	20000474 	.word	0x20000474

08005f3c <_lseek_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	@ (8005f5c <_lseek_r+0x20>)
 8005f40:	4604      	mov	r4, r0
 8005f42:	4608      	mov	r0, r1
 8005f44:	4611      	mov	r1, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	602a      	str	r2, [r5, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f7fb fd90 	bl	8001a70 <_lseek>
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d102      	bne.n	8005f5a <_lseek_r+0x1e>
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	b103      	cbz	r3, 8005f5a <_lseek_r+0x1e>
 8005f58:	6023      	str	r3, [r4, #0]
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	20000474 	.word	0x20000474

08005f60 <_read_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d07      	ldr	r5, [pc, #28]	@ (8005f80 <_read_r+0x20>)
 8005f64:	4604      	mov	r4, r0
 8005f66:	4608      	mov	r0, r1
 8005f68:	4611      	mov	r1, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fb fd1e 	bl	80019b0 <_read>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_read_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_read_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20000474 	.word	0x20000474

08005f84 <_write_r>:
 8005f84:	b538      	push	{r3, r4, r5, lr}
 8005f86:	4d07      	ldr	r5, [pc, #28]	@ (8005fa4 <_write_r+0x20>)
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	2200      	movs	r2, #0
 8005f90:	602a      	str	r2, [r5, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fb fd29 	bl	80019ea <_write>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_write_r+0x1e>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_write_r+0x1e>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20000474 	.word	0x20000474

08005fa8 <__errno>:
 8005fa8:	4b01      	ldr	r3, [pc, #4]	@ (8005fb0 <__errno+0x8>)
 8005faa:	6818      	ldr	r0, [r3, #0]
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	20000018 	.word	0x20000018

08005fb4 <__libc_init_array>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8005fec <__libc_init_array+0x38>)
 8005fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8005ff0 <__libc_init_array+0x3c>)
 8005fba:	1b64      	subs	r4, r4, r5
 8005fbc:	10a4      	asrs	r4, r4, #2
 8005fbe:	2600      	movs	r6, #0
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	d109      	bne.n	8005fd8 <__libc_init_array+0x24>
 8005fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8005ff4 <__libc_init_array+0x40>)
 8005fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff8 <__libc_init_array+0x44>)
 8005fc8:	f002 f866 	bl	8008098 <_init>
 8005fcc:	1b64      	subs	r4, r4, r5
 8005fce:	10a4      	asrs	r4, r4, #2
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	42a6      	cmp	r6, r4
 8005fd4:	d105      	bne.n	8005fe2 <__libc_init_array+0x2e>
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fdc:	4798      	blx	r3
 8005fde:	3601      	adds	r6, #1
 8005fe0:	e7ee      	b.n	8005fc0 <__libc_init_array+0xc>
 8005fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe6:	4798      	blx	r3
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7f2      	b.n	8005fd2 <__libc_init_array+0x1e>
 8005fec:	080084b0 	.word	0x080084b0
 8005ff0:	080084b0 	.word	0x080084b0
 8005ff4:	080084b0 	.word	0x080084b0
 8005ff8:	080084b4 	.word	0x080084b4

08005ffc <__retarget_lock_init_recursive>:
 8005ffc:	4770      	bx	lr

08005ffe <__retarget_lock_acquire_recursive>:
 8005ffe:	4770      	bx	lr

08006000 <__retarget_lock_release_recursive>:
 8006000:	4770      	bx	lr

08006002 <quorem>:
 8006002:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006006:	6903      	ldr	r3, [r0, #16]
 8006008:	690c      	ldr	r4, [r1, #16]
 800600a:	42a3      	cmp	r3, r4
 800600c:	4607      	mov	r7, r0
 800600e:	db7e      	blt.n	800610e <quorem+0x10c>
 8006010:	3c01      	subs	r4, #1
 8006012:	f101 0814 	add.w	r8, r1, #20
 8006016:	00a3      	lsls	r3, r4, #2
 8006018:	f100 0514 	add.w	r5, r0, #20
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800602c:	3301      	adds	r3, #1
 800602e:	429a      	cmp	r2, r3
 8006030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006034:	fbb2 f6f3 	udiv	r6, r2, r3
 8006038:	d32e      	bcc.n	8006098 <quorem+0x96>
 800603a:	f04f 0a00 	mov.w	sl, #0
 800603e:	46c4      	mov	ip, r8
 8006040:	46ae      	mov	lr, r5
 8006042:	46d3      	mov	fp, sl
 8006044:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006048:	b298      	uxth	r0, r3
 800604a:	fb06 a000 	mla	r0, r6, r0, sl
 800604e:	0c02      	lsrs	r2, r0, #16
 8006050:	0c1b      	lsrs	r3, r3, #16
 8006052:	fb06 2303 	mla	r3, r6, r3, r2
 8006056:	f8de 2000 	ldr.w	r2, [lr]
 800605a:	b280      	uxth	r0, r0
 800605c:	b292      	uxth	r2, r2
 800605e:	1a12      	subs	r2, r2, r0
 8006060:	445a      	add	r2, fp
 8006062:	f8de 0000 	ldr.w	r0, [lr]
 8006066:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800606a:	b29b      	uxth	r3, r3
 800606c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006070:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006074:	b292      	uxth	r2, r2
 8006076:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800607a:	45e1      	cmp	r9, ip
 800607c:	f84e 2b04 	str.w	r2, [lr], #4
 8006080:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006084:	d2de      	bcs.n	8006044 <quorem+0x42>
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	58eb      	ldr	r3, [r5, r3]
 800608a:	b92b      	cbnz	r3, 8006098 <quorem+0x96>
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	3b04      	subs	r3, #4
 8006090:	429d      	cmp	r5, r3
 8006092:	461a      	mov	r2, r3
 8006094:	d32f      	bcc.n	80060f6 <quorem+0xf4>
 8006096:	613c      	str	r4, [r7, #16]
 8006098:	4638      	mov	r0, r7
 800609a:	f001 f97b 	bl	8007394 <__mcmp>
 800609e:	2800      	cmp	r0, #0
 80060a0:	db25      	blt.n	80060ee <quorem+0xec>
 80060a2:	4629      	mov	r1, r5
 80060a4:	2000      	movs	r0, #0
 80060a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060aa:	f8d1 c000 	ldr.w	ip, [r1]
 80060ae:	fa1f fe82 	uxth.w	lr, r2
 80060b2:	fa1f f38c 	uxth.w	r3, ip
 80060b6:	eba3 030e 	sub.w	r3, r3, lr
 80060ba:	4403      	add	r3, r0
 80060bc:	0c12      	lsrs	r2, r2, #16
 80060be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060cc:	45c1      	cmp	r9, r8
 80060ce:	f841 3b04 	str.w	r3, [r1], #4
 80060d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060d6:	d2e6      	bcs.n	80060a6 <quorem+0xa4>
 80060d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e0:	b922      	cbnz	r2, 80060ec <quorem+0xea>
 80060e2:	3b04      	subs	r3, #4
 80060e4:	429d      	cmp	r5, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	d30b      	bcc.n	8006102 <quorem+0x100>
 80060ea:	613c      	str	r4, [r7, #16]
 80060ec:	3601      	adds	r6, #1
 80060ee:	4630      	mov	r0, r6
 80060f0:	b003      	add	sp, #12
 80060f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060f6:	6812      	ldr	r2, [r2, #0]
 80060f8:	3b04      	subs	r3, #4
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1cb      	bne.n	8006096 <quorem+0x94>
 80060fe:	3c01      	subs	r4, #1
 8006100:	e7c6      	b.n	8006090 <quorem+0x8e>
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	3b04      	subs	r3, #4
 8006106:	2a00      	cmp	r2, #0
 8006108:	d1ef      	bne.n	80060ea <quorem+0xe8>
 800610a:	3c01      	subs	r4, #1
 800610c:	e7ea      	b.n	80060e4 <quorem+0xe2>
 800610e:	2000      	movs	r0, #0
 8006110:	e7ee      	b.n	80060f0 <quorem+0xee>
 8006112:	0000      	movs	r0, r0
 8006114:	0000      	movs	r0, r0
	...

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	69c7      	ldr	r7, [r0, #28]
 800611e:	b099      	sub	sp, #100	@ 0x64
 8006120:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006124:	ec55 4b10 	vmov	r4, r5, d0
 8006128:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800612a:	9109      	str	r1, [sp, #36]	@ 0x24
 800612c:	4683      	mov	fp, r0
 800612e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006130:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006132:	b97f      	cbnz	r7, 8006154 <_dtoa_r+0x3c>
 8006134:	2010      	movs	r0, #16
 8006136:	f000 fdfd 	bl	8006d34 <malloc>
 800613a:	4602      	mov	r2, r0
 800613c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006140:	b920      	cbnz	r0, 800614c <_dtoa_r+0x34>
 8006142:	4ba7      	ldr	r3, [pc, #668]	@ (80063e0 <_dtoa_r+0x2c8>)
 8006144:	21ef      	movs	r1, #239	@ 0xef
 8006146:	48a7      	ldr	r0, [pc, #668]	@ (80063e4 <_dtoa_r+0x2cc>)
 8006148:	f001 fc68 	bl	8007a1c <__assert_func>
 800614c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006150:	6007      	str	r7, [r0, #0]
 8006152:	60c7      	str	r7, [r0, #12]
 8006154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	b159      	cbz	r1, 8006174 <_dtoa_r+0x5c>
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	604a      	str	r2, [r1, #4]
 8006160:	2301      	movs	r3, #1
 8006162:	4093      	lsls	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
 8006166:	4658      	mov	r0, fp
 8006168:	f000 feda 	bl	8006f20 <_Bfree>
 800616c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	1e2b      	subs	r3, r5, #0
 8006176:	bfb9      	ittee	lt
 8006178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800617c:	9303      	strlt	r3, [sp, #12]
 800617e:	2300      	movge	r3, #0
 8006180:	6033      	strge	r3, [r6, #0]
 8006182:	9f03      	ldr	r7, [sp, #12]
 8006184:	4b98      	ldr	r3, [pc, #608]	@ (80063e8 <_dtoa_r+0x2d0>)
 8006186:	bfbc      	itt	lt
 8006188:	2201      	movlt	r2, #1
 800618a:	6032      	strlt	r2, [r6, #0]
 800618c:	43bb      	bics	r3, r7
 800618e:	d112      	bne.n	80061b6 <_dtoa_r+0x9e>
 8006190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006192:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800619c:	4323      	orrs	r3, r4
 800619e:	f000 854d 	beq.w	8006c3c <_dtoa_r+0xb24>
 80061a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063fc <_dtoa_r+0x2e4>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 854f 	beq.w	8006c4c <_dtoa_r+0xb34>
 80061ae:	f10a 0303 	add.w	r3, sl, #3
 80061b2:	f000 bd49 	b.w	8006c48 <_dtoa_r+0xb30>
 80061b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	ec51 0b17 	vmov	r0, r1, d7
 80061c0:	2300      	movs	r3, #0
 80061c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80061c6:	f7fa fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ca:	4680      	mov	r8, r0
 80061cc:	b158      	cbz	r0, 80061e6 <_dtoa_r+0xce>
 80061ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061d0:	2301      	movs	r3, #1
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061d6:	b113      	cbz	r3, 80061de <_dtoa_r+0xc6>
 80061d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061da:	4b84      	ldr	r3, [pc, #528]	@ (80063ec <_dtoa_r+0x2d4>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006400 <_dtoa_r+0x2e8>
 80061e2:	f000 bd33 	b.w	8006c4c <_dtoa_r+0xb34>
 80061e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061ea:	aa16      	add	r2, sp, #88	@ 0x58
 80061ec:	a917      	add	r1, sp, #92	@ 0x5c
 80061ee:	4658      	mov	r0, fp
 80061f0:	f001 f980 	bl	80074f4 <__d2b>
 80061f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061f8:	4681      	mov	r9, r0
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	d077      	beq.n	80062ee <_dtoa_r+0x1d6>
 80061fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006200:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800620c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006218:	4619      	mov	r1, r3
 800621a:	2200      	movs	r2, #0
 800621c:	4b74      	ldr	r3, [pc, #464]	@ (80063f0 <_dtoa_r+0x2d8>)
 800621e:	f7fa f833 	bl	8000288 <__aeabi_dsub>
 8006222:	a369      	add	r3, pc, #420	@ (adr r3, 80063c8 <_dtoa_r+0x2b0>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	a368      	add	r3, pc, #416	@ (adr r3, 80063d0 <_dtoa_r+0x2b8>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7fa f82b 	bl	800028c <__adddf3>
 8006236:	4604      	mov	r4, r0
 8006238:	4630      	mov	r0, r6
 800623a:	460d      	mov	r5, r1
 800623c:	f7fa f972 	bl	8000524 <__aeabi_i2d>
 8006240:	a365      	add	r3, pc, #404	@ (adr r3, 80063d8 <_dtoa_r+0x2c0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa f81b 	bl	800028c <__adddf3>
 8006256:	4604      	mov	r4, r0
 8006258:	460d      	mov	r5, r1
 800625a:	f7fa fc7d 	bl	8000b58 <__aeabi_d2iz>
 800625e:	2200      	movs	r2, #0
 8006260:	4607      	mov	r7, r0
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa fc38 	bl	8000adc <__aeabi_dcmplt>
 800626c:	b140      	cbz	r0, 8006280 <_dtoa_r+0x168>
 800626e:	4638      	mov	r0, r7
 8006270:	f7fa f958 	bl	8000524 <__aeabi_i2d>
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	f7fa fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800627c:	b900      	cbnz	r0, 8006280 <_dtoa_r+0x168>
 800627e:	3f01      	subs	r7, #1
 8006280:	2f16      	cmp	r7, #22
 8006282:	d851      	bhi.n	8006328 <_dtoa_r+0x210>
 8006284:	4b5b      	ldr	r3, [pc, #364]	@ (80063f4 <_dtoa_r+0x2dc>)
 8006286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006292:	f7fa fc23 	bl	8000adc <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	d048      	beq.n	800632c <_dtoa_r+0x214>
 800629a:	3f01      	subs	r7, #1
 800629c:	2300      	movs	r3, #0
 800629e:	9312      	str	r3, [sp, #72]	@ 0x48
 80062a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80062a2:	1b9b      	subs	r3, r3, r6
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	bf44      	itt	mi
 80062a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80062ac:	2300      	movmi	r3, #0
 80062ae:	9208      	str	r2, [sp, #32]
 80062b0:	bf54      	ite	pl
 80062b2:	f04f 0800 	movpl.w	r8, #0
 80062b6:	9308      	strmi	r3, [sp, #32]
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	db39      	blt.n	8006330 <_dtoa_r+0x218>
 80062bc:	9b08      	ldr	r3, [sp, #32]
 80062be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80062c0:	443b      	add	r3, r7
 80062c2:	9308      	str	r3, [sp, #32]
 80062c4:	2300      	movs	r3, #0
 80062c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d864      	bhi.n	8006398 <_dtoa_r+0x280>
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	bfc4      	itt	gt
 80062d2:	3b04      	subgt	r3, #4
 80062d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80062d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d8:	f1a3 0302 	sub.w	r3, r3, #2
 80062dc:	bfcc      	ite	gt
 80062de:	2400      	movgt	r4, #0
 80062e0:	2401      	movle	r4, #1
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d863      	bhi.n	80063ae <_dtoa_r+0x296>
 80062e6:	e8df f003 	tbb	[pc, r3]
 80062ea:	372a      	.short	0x372a
 80062ec:	5535      	.short	0x5535
 80062ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062f2:	441e      	add	r6, r3
 80062f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	bfc1      	itttt	gt
 80062fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006300:	409f      	lslgt	r7, r3
 8006302:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006306:	fa24 f303 	lsrgt.w	r3, r4, r3
 800630a:	bfd6      	itet	le
 800630c:	f1c3 0320 	rsble	r3, r3, #32
 8006310:	ea47 0003 	orrgt.w	r0, r7, r3
 8006314:	fa04 f003 	lslle.w	r0, r4, r3
 8006318:	f7fa f8f4 	bl	8000504 <__aeabi_ui2d>
 800631c:	2201      	movs	r2, #1
 800631e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006322:	3e01      	subs	r6, #1
 8006324:	9214      	str	r2, [sp, #80]	@ 0x50
 8006326:	e777      	b.n	8006218 <_dtoa_r+0x100>
 8006328:	2301      	movs	r3, #1
 800632a:	e7b8      	b.n	800629e <_dtoa_r+0x186>
 800632c:	9012      	str	r0, [sp, #72]	@ 0x48
 800632e:	e7b7      	b.n	80062a0 <_dtoa_r+0x188>
 8006330:	427b      	negs	r3, r7
 8006332:	930a      	str	r3, [sp, #40]	@ 0x28
 8006334:	2300      	movs	r3, #0
 8006336:	eba8 0807 	sub.w	r8, r8, r7
 800633a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800633c:	e7c4      	b.n	80062c8 <_dtoa_r+0x1b0>
 800633e:	2300      	movs	r3, #0
 8006340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc35      	bgt.n	80063b4 <_dtoa_r+0x29c>
 8006348:	2301      	movs	r3, #1
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	461a      	mov	r2, r3
 8006350:	920e      	str	r2, [sp, #56]	@ 0x38
 8006352:	e00b      	b.n	800636c <_dtoa_r+0x254>
 8006354:	2301      	movs	r3, #1
 8006356:	e7f3      	b.n	8006340 <_dtoa_r+0x228>
 8006358:	2300      	movs	r3, #0
 800635a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800635c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	3301      	adds	r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	9307      	str	r3, [sp, #28]
 8006368:	bfb8      	it	lt
 800636a:	2301      	movlt	r3, #1
 800636c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006370:	2100      	movs	r1, #0
 8006372:	2204      	movs	r2, #4
 8006374:	f102 0514 	add.w	r5, r2, #20
 8006378:	429d      	cmp	r5, r3
 800637a:	d91f      	bls.n	80063bc <_dtoa_r+0x2a4>
 800637c:	6041      	str	r1, [r0, #4]
 800637e:	4658      	mov	r0, fp
 8006380:	f000 fd8e 	bl	8006ea0 <_Balloc>
 8006384:	4682      	mov	sl, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	d13c      	bne.n	8006404 <_dtoa_r+0x2ec>
 800638a:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <_dtoa_r+0x2e0>)
 800638c:	4602      	mov	r2, r0
 800638e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006392:	e6d8      	b.n	8006146 <_dtoa_r+0x2e>
 8006394:	2301      	movs	r3, #1
 8006396:	e7e0      	b.n	800635a <_dtoa_r+0x242>
 8006398:	2401      	movs	r4, #1
 800639a:	2300      	movs	r3, #0
 800639c:	9309      	str	r3, [sp, #36]	@ 0x24
 800639e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	9307      	str	r3, [sp, #28]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2312      	movs	r3, #18
 80063ac:	e7d0      	b.n	8006350 <_dtoa_r+0x238>
 80063ae:	2301      	movs	r3, #1
 80063b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b2:	e7f5      	b.n	80063a0 <_dtoa_r+0x288>
 80063b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	9307      	str	r3, [sp, #28]
 80063ba:	e7d7      	b.n	800636c <_dtoa_r+0x254>
 80063bc:	3101      	adds	r1, #1
 80063be:	0052      	lsls	r2, r2, #1
 80063c0:	e7d8      	b.n	8006374 <_dtoa_r+0x25c>
 80063c2:	bf00      	nop
 80063c4:	f3af 8000 	nop.w
 80063c8:	636f4361 	.word	0x636f4361
 80063cc:	3fd287a7 	.word	0x3fd287a7
 80063d0:	8b60c8b3 	.word	0x8b60c8b3
 80063d4:	3fc68a28 	.word	0x3fc68a28
 80063d8:	509f79fb 	.word	0x509f79fb
 80063dc:	3fd34413 	.word	0x3fd34413
 80063e0:	08008179 	.word	0x08008179
 80063e4:	08008190 	.word	0x08008190
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	08008149 	.word	0x08008149
 80063f0:	3ff80000 	.word	0x3ff80000
 80063f4:	08008288 	.word	0x08008288
 80063f8:	080081e8 	.word	0x080081e8
 80063fc:	08008175 	.word	0x08008175
 8006400:	08008148 	.word	0x08008148
 8006404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006408:	6018      	str	r0, [r3, #0]
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	2b0e      	cmp	r3, #14
 800640e:	f200 80a4 	bhi.w	800655a <_dtoa_r+0x442>
 8006412:	2c00      	cmp	r4, #0
 8006414:	f000 80a1 	beq.w	800655a <_dtoa_r+0x442>
 8006418:	2f00      	cmp	r7, #0
 800641a:	dd33      	ble.n	8006484 <_dtoa_r+0x36c>
 800641c:	4bad      	ldr	r3, [pc, #692]	@ (80066d4 <_dtoa_r+0x5bc>)
 800641e:	f007 020f 	and.w	r2, r7, #15
 8006422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006426:	ed93 7b00 	vldr	d7, [r3]
 800642a:	05f8      	lsls	r0, r7, #23
 800642c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006434:	d516      	bpl.n	8006464 <_dtoa_r+0x34c>
 8006436:	4ba8      	ldr	r3, [pc, #672]	@ (80066d8 <_dtoa_r+0x5c0>)
 8006438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800643c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006440:	f7fa fa04 	bl	800084c <__aeabi_ddiv>
 8006444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006448:	f004 040f 	and.w	r4, r4, #15
 800644c:	2603      	movs	r6, #3
 800644e:	4da2      	ldr	r5, [pc, #648]	@ (80066d8 <_dtoa_r+0x5c0>)
 8006450:	b954      	cbnz	r4, 8006468 <_dtoa_r+0x350>
 8006452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7fa f9f7 	bl	800084c <__aeabi_ddiv>
 800645e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006462:	e028      	b.n	80064b6 <_dtoa_r+0x39e>
 8006464:	2602      	movs	r6, #2
 8006466:	e7f2      	b.n	800644e <_dtoa_r+0x336>
 8006468:	07e1      	lsls	r1, r4, #31
 800646a:	d508      	bpl.n	800647e <_dtoa_r+0x366>
 800646c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006474:	f7fa f8c0 	bl	80005f8 <__aeabi_dmul>
 8006478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800647c:	3601      	adds	r6, #1
 800647e:	1064      	asrs	r4, r4, #1
 8006480:	3508      	adds	r5, #8
 8006482:	e7e5      	b.n	8006450 <_dtoa_r+0x338>
 8006484:	f000 80d2 	beq.w	800662c <_dtoa_r+0x514>
 8006488:	427c      	negs	r4, r7
 800648a:	4b92      	ldr	r3, [pc, #584]	@ (80066d4 <_dtoa_r+0x5bc>)
 800648c:	4d92      	ldr	r5, [pc, #584]	@ (80066d8 <_dtoa_r+0x5c0>)
 800648e:	f004 020f 	and.w	r2, r4, #15
 8006492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a6:	1124      	asrs	r4, r4, #4
 80064a8:	2300      	movs	r3, #0
 80064aa:	2602      	movs	r6, #2
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	f040 80b2 	bne.w	8006616 <_dtoa_r+0x4fe>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d3      	bne.n	800645e <_dtoa_r+0x346>
 80064b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80b7 	beq.w	8006630 <_dtoa_r+0x518>
 80064c2:	4b86      	ldr	r3, [pc, #536]	@ (80066dc <_dtoa_r+0x5c4>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7fa fb07 	bl	8000adc <__aeabi_dcmplt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f000 80ae 	beq.w	8006630 <_dtoa_r+0x518>
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 80aa 	beq.w	8006630 <_dtoa_r+0x518>
 80064dc:	9b00      	ldr	r3, [sp, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	dd37      	ble.n	8006552 <_dtoa_r+0x43a>
 80064e2:	1e7b      	subs	r3, r7, #1
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	4620      	mov	r0, r4
 80064e8:	4b7d      	ldr	r3, [pc, #500]	@ (80066e0 <_dtoa_r+0x5c8>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7fa f883 	bl	80005f8 <__aeabi_dmul>
 80064f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f6:	9c00      	ldr	r4, [sp, #0]
 80064f8:	3601      	adds	r6, #1
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	4b76      	ldr	r3, [pc, #472]	@ (80066e4 <_dtoa_r+0x5cc>)
 800650a:	2200      	movs	r2, #0
 800650c:	f7f9 febe 	bl	800028c <__adddf3>
 8006510:	4605      	mov	r5, r0
 8006512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006516:	2c00      	cmp	r4, #0
 8006518:	f040 808d 	bne.w	8006636 <_dtoa_r+0x51e>
 800651c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006520:	4b71      	ldr	r3, [pc, #452]	@ (80066e8 <_dtoa_r+0x5d0>)
 8006522:	2200      	movs	r2, #0
 8006524:	f7f9 feb0 	bl	8000288 <__aeabi_dsub>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006530:	462a      	mov	r2, r5
 8006532:	4633      	mov	r3, r6
 8006534:	f7fa faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8006538:	2800      	cmp	r0, #0
 800653a:	f040 828b 	bne.w	8006a54 <_dtoa_r+0x93c>
 800653e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006542:	462a      	mov	r2, r5
 8006544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006548:	f7fa fac8 	bl	8000adc <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f040 8128 	bne.w	80067a2 <_dtoa_r+0x68a>
 8006552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800655a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800655c:	2b00      	cmp	r3, #0
 800655e:	f2c0 815a 	blt.w	8006816 <_dtoa_r+0x6fe>
 8006562:	2f0e      	cmp	r7, #14
 8006564:	f300 8157 	bgt.w	8006816 <_dtoa_r+0x6fe>
 8006568:	4b5a      	ldr	r3, [pc, #360]	@ (80066d4 <_dtoa_r+0x5bc>)
 800656a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800656e:	ed93 7b00 	vldr	d7, [r3]
 8006572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	ed8d 7b00 	vstr	d7, [sp]
 800657a:	da03      	bge.n	8006584 <_dtoa_r+0x46c>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f340 8101 	ble.w	8006786 <_dtoa_r+0x66e>
 8006584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006588:	4656      	mov	r6, sl
 800658a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa f95b 	bl	800084c <__aeabi_ddiv>
 8006596:	f7fa fadf 	bl	8000b58 <__aeabi_d2iz>
 800659a:	4680      	mov	r8, r0
 800659c:	f7f9 ffc2 	bl	8000524 <__aeabi_i2d>
 80065a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065a4:	f7fa f828 	bl	80005f8 <__aeabi_dmul>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065b4:	f7f9 fe68 	bl	8000288 <__aeabi_dsub>
 80065b8:	f806 4b01 	strb.w	r4, [r6], #1
 80065bc:	9d07      	ldr	r5, [sp, #28]
 80065be:	eba6 040a 	sub.w	r4, r6, sl
 80065c2:	42a5      	cmp	r5, r4
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	f040 8117 	bne.w	80067fa <_dtoa_r+0x6e2>
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	f7fa fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f040 80f9 	bne.w	80067d4 <_dtoa_r+0x6bc>
 80065e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7fa fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ee:	b118      	cbz	r0, 80065f8 <_dtoa_r+0x4e0>
 80065f0:	f018 0f01 	tst.w	r8, #1
 80065f4:	f040 80ee 	bne.w	80067d4 <_dtoa_r+0x6bc>
 80065f8:	4649      	mov	r1, r9
 80065fa:	4658      	mov	r0, fp
 80065fc:	f000 fc90 	bl	8006f20 <_Bfree>
 8006600:	2300      	movs	r3, #0
 8006602:	7033      	strb	r3, [r6, #0]
 8006604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006606:	3701      	adds	r7, #1
 8006608:	601f      	str	r7, [r3, #0]
 800660a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 831d 	beq.w	8006c4c <_dtoa_r+0xb34>
 8006612:	601e      	str	r6, [r3, #0]
 8006614:	e31a      	b.n	8006c4c <_dtoa_r+0xb34>
 8006616:	07e2      	lsls	r2, r4, #31
 8006618:	d505      	bpl.n	8006626 <_dtoa_r+0x50e>
 800661a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	3601      	adds	r6, #1
 8006624:	2301      	movs	r3, #1
 8006626:	1064      	asrs	r4, r4, #1
 8006628:	3508      	adds	r5, #8
 800662a:	e73f      	b.n	80064ac <_dtoa_r+0x394>
 800662c:	2602      	movs	r6, #2
 800662e:	e742      	b.n	80064b6 <_dtoa_r+0x39e>
 8006630:	9c07      	ldr	r4, [sp, #28]
 8006632:	9704      	str	r7, [sp, #16]
 8006634:	e761      	b.n	80064fa <_dtoa_r+0x3e2>
 8006636:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <_dtoa_r+0x5bc>)
 8006638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800663a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800663e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006642:	4454      	add	r4, sl
 8006644:	2900      	cmp	r1, #0
 8006646:	d053      	beq.n	80066f0 <_dtoa_r+0x5d8>
 8006648:	4928      	ldr	r1, [pc, #160]	@ (80066ec <_dtoa_r+0x5d4>)
 800664a:	2000      	movs	r0, #0
 800664c:	f7fa f8fe 	bl	800084c <__aeabi_ddiv>
 8006650:	4633      	mov	r3, r6
 8006652:	462a      	mov	r2, r5
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800665c:	4656      	mov	r6, sl
 800665e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006662:	f7fa fa79 	bl	8000b58 <__aeabi_d2iz>
 8006666:	4605      	mov	r5, r0
 8006668:	f7f9 ff5c 	bl	8000524 <__aeabi_i2d>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	3530      	adds	r5, #48	@ 0x30
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006682:	f806 5b01 	strb.w	r5, [r6], #1
 8006686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800668a:	f7fa fa27 	bl	8000adc <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	d171      	bne.n	8006776 <_dtoa_r+0x65e>
 8006692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006696:	4911      	ldr	r1, [pc, #68]	@ (80066dc <_dtoa_r+0x5c4>)
 8006698:	2000      	movs	r0, #0
 800669a:	f7f9 fdf5 	bl	8000288 <__aeabi_dsub>
 800669e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066a2:	f7fa fa1b 	bl	8000adc <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f040 8095 	bne.w	80067d6 <_dtoa_r+0x6be>
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	f43f af50 	beq.w	8006552 <_dtoa_r+0x43a>
 80066b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <_dtoa_r+0x5c8>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	f7f9 ff9d 	bl	80005f8 <__aeabi_dmul>
 80066be:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <_dtoa_r+0x5c8>)
 80066c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066c4:	2200      	movs	r2, #0
 80066c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ca:	f7f9 ff95 	bl	80005f8 <__aeabi_dmul>
 80066ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d2:	e7c4      	b.n	800665e <_dtoa_r+0x546>
 80066d4:	08008288 	.word	0x08008288
 80066d8:	08008260 	.word	0x08008260
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	40240000 	.word	0x40240000
 80066e4:	401c0000 	.word	0x401c0000
 80066e8:	40140000 	.word	0x40140000
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80066fe:	4656      	mov	r6, sl
 8006700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006704:	f7fa fa28 	bl	8000b58 <__aeabi_d2iz>
 8006708:	4605      	mov	r5, r0
 800670a:	f7f9 ff0b 	bl	8000524 <__aeabi_i2d>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006716:	f7f9 fdb7 	bl	8000288 <__aeabi_dsub>
 800671a:	3530      	adds	r5, #48	@ 0x30
 800671c:	f806 5b01 	strb.w	r5, [r6], #1
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	42a6      	cmp	r6, r4
 8006726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	d124      	bne.n	800677a <_dtoa_r+0x662>
 8006730:	4bac      	ldr	r3, [pc, #688]	@ (80069e4 <_dtoa_r+0x8cc>)
 8006732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006736:	f7f9 fda9 	bl	800028c <__adddf3>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006742:	f7fa f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d145      	bne.n	80067d6 <_dtoa_r+0x6be>
 800674a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800674e:	49a5      	ldr	r1, [pc, #660]	@ (80069e4 <_dtoa_r+0x8cc>)
 8006750:	2000      	movs	r0, #0
 8006752:	f7f9 fd99 	bl	8000288 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675e:	f7fa f9bd 	bl	8000adc <__aeabi_dcmplt>
 8006762:	2800      	cmp	r0, #0
 8006764:	f43f aef5 	beq.w	8006552 <_dtoa_r+0x43a>
 8006768:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800676a:	1e73      	subs	r3, r6, #1
 800676c:	9315      	str	r3, [sp, #84]	@ 0x54
 800676e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006772:	2b30      	cmp	r3, #48	@ 0x30
 8006774:	d0f8      	beq.n	8006768 <_dtoa_r+0x650>
 8006776:	9f04      	ldr	r7, [sp, #16]
 8006778:	e73e      	b.n	80065f8 <_dtoa_r+0x4e0>
 800677a:	4b9b      	ldr	r3, [pc, #620]	@ (80069e8 <_dtoa_r+0x8d0>)
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006784:	e7bc      	b.n	8006700 <_dtoa_r+0x5e8>
 8006786:	d10c      	bne.n	80067a2 <_dtoa_r+0x68a>
 8006788:	4b98      	ldr	r3, [pc, #608]	@ (80069ec <_dtoa_r+0x8d4>)
 800678a:	2200      	movs	r2, #0
 800678c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006790:	f7f9 ff32 	bl	80005f8 <__aeabi_dmul>
 8006794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006798:	f7fa f9b4 	bl	8000b04 <__aeabi_dcmpge>
 800679c:	2800      	cmp	r0, #0
 800679e:	f000 8157 	beq.w	8006a50 <_dtoa_r+0x938>
 80067a2:	2400      	movs	r4, #0
 80067a4:	4625      	mov	r5, r4
 80067a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a8:	43db      	mvns	r3, r3
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	4656      	mov	r6, sl
 80067ae:	2700      	movs	r7, #0
 80067b0:	4621      	mov	r1, r4
 80067b2:	4658      	mov	r0, fp
 80067b4:	f000 fbb4 	bl	8006f20 <_Bfree>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	d0dc      	beq.n	8006776 <_dtoa_r+0x65e>
 80067bc:	b12f      	cbz	r7, 80067ca <_dtoa_r+0x6b2>
 80067be:	42af      	cmp	r7, r5
 80067c0:	d003      	beq.n	80067ca <_dtoa_r+0x6b2>
 80067c2:	4639      	mov	r1, r7
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 fbab 	bl	8006f20 <_Bfree>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fba7 	bl	8006f20 <_Bfree>
 80067d2:	e7d0      	b.n	8006776 <_dtoa_r+0x65e>
 80067d4:	9704      	str	r7, [sp, #16]
 80067d6:	4633      	mov	r3, r6
 80067d8:	461e      	mov	r6, r3
 80067da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067de:	2a39      	cmp	r2, #57	@ 0x39
 80067e0:	d107      	bne.n	80067f2 <_dtoa_r+0x6da>
 80067e2:	459a      	cmp	sl, r3
 80067e4:	d1f8      	bne.n	80067d8 <_dtoa_r+0x6c0>
 80067e6:	9a04      	ldr	r2, [sp, #16]
 80067e8:	3201      	adds	r2, #1
 80067ea:	9204      	str	r2, [sp, #16]
 80067ec:	2230      	movs	r2, #48	@ 0x30
 80067ee:	f88a 2000 	strb.w	r2, [sl]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	3201      	adds	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e7bd      	b.n	8006776 <_dtoa_r+0x65e>
 80067fa:	4b7b      	ldr	r3, [pc, #492]	@ (80069e8 <_dtoa_r+0x8d0>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	f7fa f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800680e:	2800      	cmp	r0, #0
 8006810:	f43f aebb 	beq.w	800658a <_dtoa_r+0x472>
 8006814:	e6f0      	b.n	80065f8 <_dtoa_r+0x4e0>
 8006816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006818:	2a00      	cmp	r2, #0
 800681a:	f000 80db 	beq.w	80069d4 <_dtoa_r+0x8bc>
 800681e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006820:	2a01      	cmp	r2, #1
 8006822:	f300 80bf 	bgt.w	80069a4 <_dtoa_r+0x88c>
 8006826:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006828:	2a00      	cmp	r2, #0
 800682a:	f000 80b7 	beq.w	800699c <_dtoa_r+0x884>
 800682e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006834:	4646      	mov	r6, r8
 8006836:	9a08      	ldr	r2, [sp, #32]
 8006838:	2101      	movs	r1, #1
 800683a:	441a      	add	r2, r3
 800683c:	4658      	mov	r0, fp
 800683e:	4498      	add	r8, r3
 8006840:	9208      	str	r2, [sp, #32]
 8006842:	f000 fc21 	bl	8007088 <__i2b>
 8006846:	4605      	mov	r5, r0
 8006848:	b15e      	cbz	r6, 8006862 <_dtoa_r+0x74a>
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd08      	ble.n	8006862 <_dtoa_r+0x74a>
 8006850:	42b3      	cmp	r3, r6
 8006852:	9a08      	ldr	r2, [sp, #32]
 8006854:	bfa8      	it	ge
 8006856:	4633      	movge	r3, r6
 8006858:	eba8 0803 	sub.w	r8, r8, r3
 800685c:	1af6      	subs	r6, r6, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	9308      	str	r3, [sp, #32]
 8006862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006864:	b1f3      	cbz	r3, 80068a4 <_dtoa_r+0x78c>
 8006866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80b7 	beq.w	80069dc <_dtoa_r+0x8c4>
 800686e:	b18c      	cbz	r4, 8006894 <_dtoa_r+0x77c>
 8006870:	4629      	mov	r1, r5
 8006872:	4622      	mov	r2, r4
 8006874:	4658      	mov	r0, fp
 8006876:	f000 fcc7 	bl	8007208 <__pow5mult>
 800687a:	464a      	mov	r2, r9
 800687c:	4601      	mov	r1, r0
 800687e:	4605      	mov	r5, r0
 8006880:	4658      	mov	r0, fp
 8006882:	f000 fc17 	bl	80070b4 <__multiply>
 8006886:	4649      	mov	r1, r9
 8006888:	9004      	str	r0, [sp, #16]
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fb48 	bl	8006f20 <_Bfree>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	4699      	mov	r9, r3
 8006894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006896:	1b1a      	subs	r2, r3, r4
 8006898:	d004      	beq.n	80068a4 <_dtoa_r+0x78c>
 800689a:	4649      	mov	r1, r9
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fcb3 	bl	8007208 <__pow5mult>
 80068a2:	4681      	mov	r9, r0
 80068a4:	2101      	movs	r1, #1
 80068a6:	4658      	mov	r0, fp
 80068a8:	f000 fbee 	bl	8007088 <__i2b>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068ae:	4604      	mov	r4, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 81cf 	beq.w	8006c54 <_dtoa_r+0xb3c>
 80068b6:	461a      	mov	r2, r3
 80068b8:	4601      	mov	r1, r0
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 fca4 	bl	8007208 <__pow5mult>
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	4604      	mov	r4, r0
 80068c6:	f300 8095 	bgt.w	80069f4 <_dtoa_r+0x8dc>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8087 	bne.w	80069e0 <_dtoa_r+0x8c8>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f040 8089 	bne.w	80069f0 <_dtoa_r+0x8d8>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e4:	0d1b      	lsrs	r3, r3, #20
 80068e6:	051b      	lsls	r3, r3, #20
 80068e8:	b12b      	cbz	r3, 80068f6 <_dtoa_r+0x7de>
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	3301      	adds	r3, #1
 80068ee:	9308      	str	r3, [sp, #32]
 80068f0:	f108 0801 	add.w	r8, r8, #1
 80068f4:	2301      	movs	r3, #1
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 81b0 	beq.w	8006c60 <_dtoa_r+0xb48>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006906:	6918      	ldr	r0, [r3, #16]
 8006908:	f000 fb72 	bl	8006ff0 <__hi0bits>
 800690c:	f1c0 0020 	rsb	r0, r0, #32
 8006910:	9b08      	ldr	r3, [sp, #32]
 8006912:	4418      	add	r0, r3
 8006914:	f010 001f 	ands.w	r0, r0, #31
 8006918:	d077      	beq.n	8006a0a <_dtoa_r+0x8f2>
 800691a:	f1c0 0320 	rsb	r3, r0, #32
 800691e:	2b04      	cmp	r3, #4
 8006920:	dd6b      	ble.n	80069fa <_dtoa_r+0x8e2>
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	f1c0 001c 	rsb	r0, r0, #28
 8006928:	4403      	add	r3, r0
 800692a:	4480      	add	r8, r0
 800692c:	4406      	add	r6, r0
 800692e:	9308      	str	r3, [sp, #32]
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	dd05      	ble.n	8006942 <_dtoa_r+0x82a>
 8006936:	4649      	mov	r1, r9
 8006938:	4642      	mov	r2, r8
 800693a:	4658      	mov	r0, fp
 800693c:	f000 fcbe 	bl	80072bc <__lshift>
 8006940:	4681      	mov	r9, r0
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd05      	ble.n	8006954 <_dtoa_r+0x83c>
 8006948:	4621      	mov	r1, r4
 800694a:	461a      	mov	r2, r3
 800694c:	4658      	mov	r0, fp
 800694e:	f000 fcb5 	bl	80072bc <__lshift>
 8006952:	4604      	mov	r4, r0
 8006954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006956:	2b00      	cmp	r3, #0
 8006958:	d059      	beq.n	8006a0e <_dtoa_r+0x8f6>
 800695a:	4621      	mov	r1, r4
 800695c:	4648      	mov	r0, r9
 800695e:	f000 fd19 	bl	8007394 <__mcmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	da53      	bge.n	8006a0e <_dtoa_r+0x8f6>
 8006966:	1e7b      	subs	r3, r7, #1
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	4649      	mov	r1, r9
 800696c:	2300      	movs	r3, #0
 800696e:	220a      	movs	r2, #10
 8006970:	4658      	mov	r0, fp
 8006972:	f000 faf7 	bl	8006f64 <__multadd>
 8006976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006978:	4681      	mov	r9, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8172 	beq.w	8006c64 <_dtoa_r+0xb4c>
 8006980:	2300      	movs	r3, #0
 8006982:	4629      	mov	r1, r5
 8006984:	220a      	movs	r2, #10
 8006986:	4658      	mov	r0, fp
 8006988:	f000 faec 	bl	8006f64 <__multadd>
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	4605      	mov	r5, r0
 8006992:	dc67      	bgt.n	8006a64 <_dtoa_r+0x94c>
 8006994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006996:	2b02      	cmp	r3, #2
 8006998:	dc41      	bgt.n	8006a1e <_dtoa_r+0x906>
 800699a:	e063      	b.n	8006a64 <_dtoa_r+0x94c>
 800699c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800699e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069a2:	e746      	b.n	8006832 <_dtoa_r+0x71a>
 80069a4:	9b07      	ldr	r3, [sp, #28]
 80069a6:	1e5c      	subs	r4, r3, #1
 80069a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	bfbf      	itttt	lt
 80069ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80069b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069b4:	1ae3      	sublt	r3, r4, r3
 80069b6:	bfb4      	ite	lt
 80069b8:	18d2      	addlt	r2, r2, r3
 80069ba:	1b1c      	subge	r4, r3, r4
 80069bc:	9b07      	ldr	r3, [sp, #28]
 80069be:	bfbc      	itt	lt
 80069c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80069c2:	2400      	movlt	r4, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfb5      	itete	lt
 80069c8:	eba8 0603 	sublt.w	r6, r8, r3
 80069cc:	9b07      	ldrge	r3, [sp, #28]
 80069ce:	2300      	movlt	r3, #0
 80069d0:	4646      	movge	r6, r8
 80069d2:	e730      	b.n	8006836 <_dtoa_r+0x71e>
 80069d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069d8:	4646      	mov	r6, r8
 80069da:	e735      	b.n	8006848 <_dtoa_r+0x730>
 80069dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069de:	e75c      	b.n	800689a <_dtoa_r+0x782>
 80069e0:	2300      	movs	r3, #0
 80069e2:	e788      	b.n	80068f6 <_dtoa_r+0x7de>
 80069e4:	3fe00000 	.word	0x3fe00000
 80069e8:	40240000 	.word	0x40240000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	e780      	b.n	80068f6 <_dtoa_r+0x7de>
 80069f4:	2300      	movs	r3, #0
 80069f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069f8:	e782      	b.n	8006900 <_dtoa_r+0x7e8>
 80069fa:	d099      	beq.n	8006930 <_dtoa_r+0x818>
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	331c      	adds	r3, #28
 8006a00:	441a      	add	r2, r3
 8006a02:	4498      	add	r8, r3
 8006a04:	441e      	add	r6, r3
 8006a06:	9208      	str	r2, [sp, #32]
 8006a08:	e792      	b.n	8006930 <_dtoa_r+0x818>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	e7f6      	b.n	80069fc <_dtoa_r+0x8e4>
 8006a0e:	9b07      	ldr	r3, [sp, #28]
 8006a10:	9704      	str	r7, [sp, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc20      	bgt.n	8006a58 <_dtoa_r+0x940>
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	dd1e      	ble.n	8006a5c <_dtoa_r+0x944>
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f47f aec0 	bne.w	80067a6 <_dtoa_r+0x68e>
 8006a26:	4621      	mov	r1, r4
 8006a28:	2205      	movs	r2, #5
 8006a2a:	4658      	mov	r0, fp
 8006a2c:	f000 fa9a 	bl	8006f64 <__multadd>
 8006a30:	4601      	mov	r1, r0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4648      	mov	r0, r9
 8006a36:	f000 fcad 	bl	8007394 <__mcmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f77f aeb3 	ble.w	80067a6 <_dtoa_r+0x68e>
 8006a40:	4656      	mov	r6, sl
 8006a42:	2331      	movs	r3, #49	@ 0x31
 8006a44:	f806 3b01 	strb.w	r3, [r6], #1
 8006a48:	9b04      	ldr	r3, [sp, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	e6ae      	b.n	80067ae <_dtoa_r+0x696>
 8006a50:	9c07      	ldr	r4, [sp, #28]
 8006a52:	9704      	str	r7, [sp, #16]
 8006a54:	4625      	mov	r5, r4
 8006a56:	e7f3      	b.n	8006a40 <_dtoa_r+0x928>
 8006a58:	9b07      	ldr	r3, [sp, #28]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8104 	beq.w	8006c6c <_dtoa_r+0xb54>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	dd05      	ble.n	8006a74 <_dtoa_r+0x95c>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	f000 fc25 	bl	80072bc <__lshift>
 8006a72:	4605      	mov	r5, r0
 8006a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d05a      	beq.n	8006b30 <_dtoa_r+0xa18>
 8006a7a:	6869      	ldr	r1, [r5, #4]
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fa0f 	bl	8006ea0 <_Balloc>
 8006a82:	4606      	mov	r6, r0
 8006a84:	b928      	cbnz	r0, 8006a92 <_dtoa_r+0x97a>
 8006a86:	4b84      	ldr	r3, [pc, #528]	@ (8006c98 <_dtoa_r+0xb80>)
 8006a88:	4602      	mov	r2, r0
 8006a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a8e:	f7ff bb5a 	b.w	8006146 <_dtoa_r+0x2e>
 8006a92:	692a      	ldr	r2, [r5, #16]
 8006a94:	3202      	adds	r2, #2
 8006a96:	0092      	lsls	r2, r2, #2
 8006a98:	f105 010c 	add.w	r1, r5, #12
 8006a9c:	300c      	adds	r0, #12
 8006a9e:	f000 ffaf 	bl	8007a00 <memcpy>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f000 fc08 	bl	80072bc <__lshift>
 8006aac:	f10a 0301 	add.w	r3, sl, #1
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	4453      	add	r3, sl
 8006ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ab8:	9b02      	ldr	r3, [sp, #8]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	462f      	mov	r7, r5
 8006ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	4648      	mov	r0, r9
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f7ff fa98 	bl	8006002 <quorem>
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	9002      	str	r0, [sp, #8]
 8006ad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ada:	4648      	mov	r0, r9
 8006adc:	f000 fc5a 	bl	8007394 <__mcmp>
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	9008      	str	r0, [sp, #32]
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 fc70 	bl	80073cc <__mdiff>
 8006aec:	68c2      	ldr	r2, [r0, #12]
 8006aee:	4606      	mov	r6, r0
 8006af0:	bb02      	cbnz	r2, 8006b34 <_dtoa_r+0xa1c>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fc4d 	bl	8007394 <__mcmp>
 8006afa:	4602      	mov	r2, r0
 8006afc:	4631      	mov	r1, r6
 8006afe:	4658      	mov	r0, fp
 8006b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b02:	f000 fa0d 	bl	8006f20 <_Bfree>
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b0a:	9e07      	ldr	r6, [sp, #28]
 8006b0c:	ea43 0102 	orr.w	r1, r3, r2
 8006b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b12:	4319      	orrs	r1, r3
 8006b14:	d110      	bne.n	8006b38 <_dtoa_r+0xa20>
 8006b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b1a:	d029      	beq.n	8006b70 <_dtoa_r+0xa58>
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd02      	ble.n	8006b28 <_dtoa_r+0xa10>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	f883 8000 	strb.w	r8, [r3]
 8006b2e:	e63f      	b.n	80067b0 <_dtoa_r+0x698>
 8006b30:	4628      	mov	r0, r5
 8006b32:	e7bb      	b.n	8006aac <_dtoa_r+0x994>
 8006b34:	2201      	movs	r2, #1
 8006b36:	e7e1      	b.n	8006afc <_dtoa_r+0x9e4>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	db04      	blt.n	8006b48 <_dtoa_r+0xa30>
 8006b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b40:	430b      	orrs	r3, r1
 8006b42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b44:	430b      	orrs	r3, r1
 8006b46:	d120      	bne.n	8006b8a <_dtoa_r+0xa72>
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	dded      	ble.n	8006b28 <_dtoa_r+0xa10>
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4658      	mov	r0, fp
 8006b52:	f000 fbb3 	bl	80072bc <__lshift>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4681      	mov	r9, r0
 8006b5a:	f000 fc1b 	bl	8007394 <__mcmp>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dc03      	bgt.n	8006b6a <_dtoa_r+0xa52>
 8006b62:	d1e1      	bne.n	8006b28 <_dtoa_r+0xa10>
 8006b64:	f018 0f01 	tst.w	r8, #1
 8006b68:	d0de      	beq.n	8006b28 <_dtoa_r+0xa10>
 8006b6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b6e:	d1d8      	bne.n	8006b22 <_dtoa_r+0xa0a>
 8006b70:	9a00      	ldr	r2, [sp, #0]
 8006b72:	2339      	movs	r3, #57	@ 0x39
 8006b74:	7013      	strb	r3, [r2, #0]
 8006b76:	4633      	mov	r3, r6
 8006b78:	461e      	mov	r6, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b80:	2a39      	cmp	r2, #57	@ 0x39
 8006b82:	d052      	beq.n	8006c2a <_dtoa_r+0xb12>
 8006b84:	3201      	adds	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e612      	b.n	80067b0 <_dtoa_r+0x698>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	dd07      	ble.n	8006b9e <_dtoa_r+0xa86>
 8006b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b92:	d0ed      	beq.n	8006b70 <_dtoa_r+0xa58>
 8006b94:	9a00      	ldr	r2, [sp, #0]
 8006b96:	f108 0301 	add.w	r3, r8, #1
 8006b9a:	7013      	strb	r3, [r2, #0]
 8006b9c:	e608      	b.n	80067b0 <_dtoa_r+0x698>
 8006b9e:	9b07      	ldr	r3, [sp, #28]
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d028      	beq.n	8006bfe <_dtoa_r+0xae6>
 8006bac:	4649      	mov	r1, r9
 8006bae:	2300      	movs	r3, #0
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 f9d6 	bl	8006f64 <__multadd>
 8006bb8:	42af      	cmp	r7, r5
 8006bba:	4681      	mov	r9, r0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	f04f 020a 	mov.w	r2, #10
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	d107      	bne.n	8006bda <_dtoa_r+0xac2>
 8006bca:	f000 f9cb 	bl	8006f64 <__multadd>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	9307      	str	r3, [sp, #28]
 8006bd8:	e774      	b.n	8006ac4 <_dtoa_r+0x9ac>
 8006bda:	f000 f9c3 	bl	8006f64 <__multadd>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4607      	mov	r7, r0
 8006be2:	2300      	movs	r3, #0
 8006be4:	220a      	movs	r2, #10
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 f9bc 	bl	8006f64 <__multadd>
 8006bec:	4605      	mov	r5, r0
 8006bee:	e7f0      	b.n	8006bd2 <_dtoa_r+0xaba>
 8006bf0:	9b00      	ldr	r3, [sp, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfcc      	ite	gt
 8006bf6:	461e      	movgt	r6, r3
 8006bf8:	2601      	movle	r6, #1
 8006bfa:	4456      	add	r6, sl
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	4649      	mov	r1, r9
 8006c00:	2201      	movs	r2, #1
 8006c02:	4658      	mov	r0, fp
 8006c04:	f000 fb5a 	bl	80072bc <__lshift>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	f000 fbc2 	bl	8007394 <__mcmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	dcb0      	bgt.n	8006b76 <_dtoa_r+0xa5e>
 8006c14:	d102      	bne.n	8006c1c <_dtoa_r+0xb04>
 8006c16:	f018 0f01 	tst.w	r8, #1
 8006c1a:	d1ac      	bne.n	8006b76 <_dtoa_r+0xa5e>
 8006c1c:	4633      	mov	r3, r6
 8006c1e:	461e      	mov	r6, r3
 8006c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c24:	2a30      	cmp	r2, #48	@ 0x30
 8006c26:	d0fa      	beq.n	8006c1e <_dtoa_r+0xb06>
 8006c28:	e5c2      	b.n	80067b0 <_dtoa_r+0x698>
 8006c2a:	459a      	cmp	sl, r3
 8006c2c:	d1a4      	bne.n	8006b78 <_dtoa_r+0xa60>
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	3301      	adds	r3, #1
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	2331      	movs	r3, #49	@ 0x31
 8006c36:	f88a 3000 	strb.w	r3, [sl]
 8006c3a:	e5b9      	b.n	80067b0 <_dtoa_r+0x698>
 8006c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c9c <_dtoa_r+0xb84>
 8006c42:	b11b      	cbz	r3, 8006c4c <_dtoa_r+0xb34>
 8006c44:	f10a 0308 	add.w	r3, sl, #8
 8006c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	b019      	add	sp, #100	@ 0x64
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	f77f ae37 	ble.w	80068ca <_dtoa_r+0x7b2>
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c60:	2001      	movs	r0, #1
 8006c62:	e655      	b.n	8006910 <_dtoa_r+0x7f8>
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f77f aed6 	ble.w	8006a18 <_dtoa_r+0x900>
 8006c6c:	4656      	mov	r6, sl
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4648      	mov	r0, r9
 8006c72:	f7ff f9c6 	bl	8006002 <quorem>
 8006c76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c7a:	f806 8b01 	strb.w	r8, [r6], #1
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	eba6 020a 	sub.w	r2, r6, sl
 8006c84:	4293      	cmp	r3, r2
 8006c86:	ddb3      	ble.n	8006bf0 <_dtoa_r+0xad8>
 8006c88:	4649      	mov	r1, r9
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 f968 	bl	8006f64 <__multadd>
 8006c94:	4681      	mov	r9, r0
 8006c96:	e7ea      	b.n	8006c6e <_dtoa_r+0xb56>
 8006c98:	080081e8 	.word	0x080081e8
 8006c9c:	0800816c 	.word	0x0800816c

08006ca0 <_free_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	d041      	beq.n	8006d2c <_free_r+0x8c>
 8006ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cac:	1f0c      	subs	r4, r1, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfb8      	it	lt
 8006cb2:	18e4      	addlt	r4, r4, r3
 8006cb4:	f000 f8e8 	bl	8006e88 <__malloc_lock>
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <_free_r+0x90>)
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	b933      	cbnz	r3, 8006ccc <_free_r+0x2c>
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	6014      	str	r4, [r2, #0]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc8:	f000 b8e4 	b.w	8006e94 <__malloc_unlock>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d908      	bls.n	8006ce2 <_free_r+0x42>
 8006cd0:	6820      	ldr	r0, [r4, #0]
 8006cd2:	1821      	adds	r1, r4, r0
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	bf01      	itttt	eq
 8006cd8:	6819      	ldreq	r1, [r3, #0]
 8006cda:	685b      	ldreq	r3, [r3, #4]
 8006cdc:	1809      	addeq	r1, r1, r0
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	e7ed      	b.n	8006cbe <_free_r+0x1e>
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	b10b      	cbz	r3, 8006cec <_free_r+0x4c>
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d9fa      	bls.n	8006ce2 <_free_r+0x42>
 8006cec:	6811      	ldr	r1, [r2, #0]
 8006cee:	1850      	adds	r0, r2, r1
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	d10b      	bne.n	8006d0c <_free_r+0x6c>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	4401      	add	r1, r0
 8006cf8:	1850      	adds	r0, r2, r1
 8006cfa:	4283      	cmp	r3, r0
 8006cfc:	6011      	str	r1, [r2, #0]
 8006cfe:	d1e0      	bne.n	8006cc2 <_free_r+0x22>
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	6053      	str	r3, [r2, #4]
 8006d06:	4408      	add	r0, r1
 8006d08:	6010      	str	r0, [r2, #0]
 8006d0a:	e7da      	b.n	8006cc2 <_free_r+0x22>
 8006d0c:	d902      	bls.n	8006d14 <_free_r+0x74>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	e7d6      	b.n	8006cc2 <_free_r+0x22>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	1821      	adds	r1, r4, r0
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	bf04      	itt	eq
 8006d1c:	6819      	ldreq	r1, [r3, #0]
 8006d1e:	685b      	ldreq	r3, [r3, #4]
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	bf04      	itt	eq
 8006d24:	1809      	addeq	r1, r1, r0
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	6054      	str	r4, [r2, #4]
 8006d2a:	e7ca      	b.n	8006cc2 <_free_r+0x22>
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000480 	.word	0x20000480

08006d34 <malloc>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	@ (8006d40 <malloc+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f000 b825 	b.w	8006d88 <_malloc_r>
 8006d3e:	bf00      	nop
 8006d40:	20000018 	.word	0x20000018

08006d44 <sbrk_aligned>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4e0f      	ldr	r6, [pc, #60]	@ (8006d84 <sbrk_aligned+0x40>)
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	b911      	cbnz	r1, 8006d56 <sbrk_aligned+0x12>
 8006d50:	f000 fe46 	bl	80079e0 <_sbrk_r>
 8006d54:	6030      	str	r0, [r6, #0]
 8006d56:	4621      	mov	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 fe41 	bl	80079e0 <_sbrk_r>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d103      	bne.n	8006d6a <sbrk_aligned+0x26>
 8006d62:	f04f 34ff 	mov.w	r4, #4294967295
 8006d66:	4620      	mov	r0, r4
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	1cc4      	adds	r4, r0, #3
 8006d6c:	f024 0403 	bic.w	r4, r4, #3
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d0f8      	beq.n	8006d66 <sbrk_aligned+0x22>
 8006d74:	1a21      	subs	r1, r4, r0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 fe32 	bl	80079e0 <_sbrk_r>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d1f2      	bne.n	8006d66 <sbrk_aligned+0x22>
 8006d80:	e7ef      	b.n	8006d62 <sbrk_aligned+0x1e>
 8006d82:	bf00      	nop
 8006d84:	2000047c 	.word	0x2000047c

08006d88 <_malloc_r>:
 8006d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	1ccd      	adds	r5, r1, #3
 8006d8e:	f025 0503 	bic.w	r5, r5, #3
 8006d92:	3508      	adds	r5, #8
 8006d94:	2d0c      	cmp	r5, #12
 8006d96:	bf38      	it	cc
 8006d98:	250c      	movcc	r5, #12
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	db01      	blt.n	8006da4 <_malloc_r+0x1c>
 8006da0:	42a9      	cmp	r1, r5
 8006da2:	d904      	bls.n	8006dae <_malloc_r+0x26>
 8006da4:	230c      	movs	r3, #12
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	2000      	movs	r0, #0
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e84 <_malloc_r+0xfc>
 8006db2:	f000 f869 	bl	8006e88 <__malloc_lock>
 8006db6:	f8d8 3000 	ldr.w	r3, [r8]
 8006dba:	461c      	mov	r4, r3
 8006dbc:	bb44      	cbnz	r4, 8006e10 <_malloc_r+0x88>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ffbf 	bl	8006d44 <sbrk_aligned>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	4604      	mov	r4, r0
 8006dca:	d158      	bne.n	8006e7e <_malloc_r+0xf6>
 8006dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8006dd0:	4627      	mov	r7, r4
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d143      	bne.n	8006e5e <_malloc_r+0xd6>
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d04b      	beq.n	8006e72 <_malloc_r+0xea>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4630      	mov	r0, r6
 8006de0:	eb04 0903 	add.w	r9, r4, r3
 8006de4:	f000 fdfc 	bl	80079e0 <_sbrk_r>
 8006de8:	4581      	cmp	r9, r0
 8006dea:	d142      	bne.n	8006e72 <_malloc_r+0xea>
 8006dec:	6821      	ldr	r1, [r4, #0]
 8006dee:	1a6d      	subs	r5, r5, r1
 8006df0:	4629      	mov	r1, r5
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7ff ffa6 	bl	8006d44 <sbrk_aligned>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d03a      	beq.n	8006e72 <_malloc_r+0xea>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	442b      	add	r3, r5
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	f8d8 3000 	ldr.w	r3, [r8]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	bb62      	cbnz	r2, 8006e64 <_malloc_r+0xdc>
 8006e0a:	f8c8 7000 	str.w	r7, [r8]
 8006e0e:	e00f      	b.n	8006e30 <_malloc_r+0xa8>
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	1b52      	subs	r2, r2, r5
 8006e14:	d420      	bmi.n	8006e58 <_malloc_r+0xd0>
 8006e16:	2a0b      	cmp	r2, #11
 8006e18:	d917      	bls.n	8006e4a <_malloc_r+0xc2>
 8006e1a:	1961      	adds	r1, r4, r5
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	6025      	str	r5, [r4, #0]
 8006e20:	bf18      	it	ne
 8006e22:	6059      	strne	r1, [r3, #4]
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	bf08      	it	eq
 8006e28:	f8c8 1000 	streq.w	r1, [r8]
 8006e2c:	5162      	str	r2, [r4, r5]
 8006e2e:	604b      	str	r3, [r1, #4]
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 f82f 	bl	8006e94 <__malloc_unlock>
 8006e36:	f104 000b 	add.w	r0, r4, #11
 8006e3a:	1d23      	adds	r3, r4, #4
 8006e3c:	f020 0007 	bic.w	r0, r0, #7
 8006e40:	1ac2      	subs	r2, r0, r3
 8006e42:	bf1c      	itt	ne
 8006e44:	1a1b      	subne	r3, r3, r0
 8006e46:	50a3      	strne	r3, [r4, r2]
 8006e48:	e7af      	b.n	8006daa <_malloc_r+0x22>
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	bf0c      	ite	eq
 8006e50:	f8c8 2000 	streq.w	r2, [r8]
 8006e54:	605a      	strne	r2, [r3, #4]
 8006e56:	e7eb      	b.n	8006e30 <_malloc_r+0xa8>
 8006e58:	4623      	mov	r3, r4
 8006e5a:	6864      	ldr	r4, [r4, #4]
 8006e5c:	e7ae      	b.n	8006dbc <_malloc_r+0x34>
 8006e5e:	463c      	mov	r4, r7
 8006e60:	687f      	ldr	r7, [r7, #4]
 8006e62:	e7b6      	b.n	8006dd2 <_malloc_r+0x4a>
 8006e64:	461a      	mov	r2, r3
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d1fb      	bne.n	8006e64 <_malloc_r+0xdc>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6053      	str	r3, [r2, #4]
 8006e70:	e7de      	b.n	8006e30 <_malloc_r+0xa8>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 f80c 	bl	8006e94 <__malloc_unlock>
 8006e7c:	e794      	b.n	8006da8 <_malloc_r+0x20>
 8006e7e:	6005      	str	r5, [r0, #0]
 8006e80:	e7d6      	b.n	8006e30 <_malloc_r+0xa8>
 8006e82:	bf00      	nop
 8006e84:	20000480 	.word	0x20000480

08006e88 <__malloc_lock>:
 8006e88:	4801      	ldr	r0, [pc, #4]	@ (8006e90 <__malloc_lock+0x8>)
 8006e8a:	f7ff b8b8 	b.w	8005ffe <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000478 	.word	0x20000478

08006e94 <__malloc_unlock>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__malloc_unlock+0x8>)
 8006e96:	f7ff b8b3 	b.w	8006000 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000478 	.word	0x20000478

08006ea0 <_Balloc>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	69c6      	ldr	r6, [r0, #28]
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	b976      	cbnz	r6, 8006ec8 <_Balloc+0x28>
 8006eaa:	2010      	movs	r0, #16
 8006eac:	f7ff ff42 	bl	8006d34 <malloc>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	61e0      	str	r0, [r4, #28]
 8006eb4:	b920      	cbnz	r0, 8006ec0 <_Balloc+0x20>
 8006eb6:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <_Balloc+0x78>)
 8006eb8:	4818      	ldr	r0, [pc, #96]	@ (8006f1c <_Balloc+0x7c>)
 8006eba:	216b      	movs	r1, #107	@ 0x6b
 8006ebc:	f000 fdae 	bl	8007a1c <__assert_func>
 8006ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ec4:	6006      	str	r6, [r0, #0]
 8006ec6:	60c6      	str	r6, [r0, #12]
 8006ec8:	69e6      	ldr	r6, [r4, #28]
 8006eca:	68f3      	ldr	r3, [r6, #12]
 8006ecc:	b183      	cbz	r3, 8006ef0 <_Balloc+0x50>
 8006ece:	69e3      	ldr	r3, [r4, #28]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ed6:	b9b8      	cbnz	r0, 8006f08 <_Balloc+0x68>
 8006ed8:	2101      	movs	r1, #1
 8006eda:	fa01 f605 	lsl.w	r6, r1, r5
 8006ede:	1d72      	adds	r2, r6, #5
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 fdb8 	bl	8007a58 <_calloc_r>
 8006ee8:	b160      	cbz	r0, 8006f04 <_Balloc+0x64>
 8006eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eee:	e00e      	b.n	8006f0e <_Balloc+0x6e>
 8006ef0:	2221      	movs	r2, #33	@ 0x21
 8006ef2:	2104      	movs	r1, #4
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 fdaf 	bl	8007a58 <_calloc_r>
 8006efa:	69e3      	ldr	r3, [r4, #28]
 8006efc:	60f0      	str	r0, [r6, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e4      	bne.n	8006ece <_Balloc+0x2e>
 8006f04:	2000      	movs	r0, #0
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	6802      	ldr	r2, [r0, #0]
 8006f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f14:	e7f7      	b.n	8006f06 <_Balloc+0x66>
 8006f16:	bf00      	nop
 8006f18:	08008179 	.word	0x08008179
 8006f1c:	080081f9 	.word	0x080081f9

08006f20 <_Bfree>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	69c6      	ldr	r6, [r0, #28]
 8006f24:	4605      	mov	r5, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	b976      	cbnz	r6, 8006f48 <_Bfree+0x28>
 8006f2a:	2010      	movs	r0, #16
 8006f2c:	f7ff ff02 	bl	8006d34 <malloc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	61e8      	str	r0, [r5, #28]
 8006f34:	b920      	cbnz	r0, 8006f40 <_Bfree+0x20>
 8006f36:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <_Bfree+0x3c>)
 8006f38:	4809      	ldr	r0, [pc, #36]	@ (8006f60 <_Bfree+0x40>)
 8006f3a:	218f      	movs	r1, #143	@ 0x8f
 8006f3c:	f000 fd6e 	bl	8007a1c <__assert_func>
 8006f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f44:	6006      	str	r6, [r0, #0]
 8006f46:	60c6      	str	r6, [r0, #12]
 8006f48:	b13c      	cbz	r4, 8006f5a <_Bfree+0x3a>
 8006f4a:	69eb      	ldr	r3, [r5, #28]
 8006f4c:	6862      	ldr	r2, [r4, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f54:	6021      	str	r1, [r4, #0]
 8006f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	08008179 	.word	0x08008179
 8006f60:	080081f9 	.word	0x080081f9

08006f64 <__multadd>:
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	690d      	ldr	r5, [r1, #16]
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	461e      	mov	r6, r3
 8006f70:	f101 0c14 	add.w	ip, r1, #20
 8006f74:	2000      	movs	r0, #0
 8006f76:	f8dc 3000 	ldr.w	r3, [ip]
 8006f7a:	b299      	uxth	r1, r3
 8006f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f80:	0c1e      	lsrs	r6, r3, #16
 8006f82:	0c0b      	lsrs	r3, r1, #16
 8006f84:	fb02 3306 	mla	r3, r2, r6, r3
 8006f88:	b289      	uxth	r1, r1
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f90:	4285      	cmp	r5, r0
 8006f92:	f84c 1b04 	str.w	r1, [ip], #4
 8006f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f9a:	dcec      	bgt.n	8006f76 <__multadd+0x12>
 8006f9c:	b30e      	cbz	r6, 8006fe2 <__multadd+0x7e>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dc19      	bgt.n	8006fd8 <__multadd+0x74>
 8006fa4:	6861      	ldr	r1, [r4, #4]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	3101      	adds	r1, #1
 8006faa:	f7ff ff79 	bl	8006ea0 <_Balloc>
 8006fae:	4680      	mov	r8, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <__multadd+0x5a>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <__multadd+0x84>)
 8006fb6:	480d      	ldr	r0, [pc, #52]	@ (8006fec <__multadd+0x88>)
 8006fb8:	21ba      	movs	r1, #186	@ 0xba
 8006fba:	f000 fd2f 	bl	8007a1c <__assert_func>
 8006fbe:	6922      	ldr	r2, [r4, #16]
 8006fc0:	3202      	adds	r2, #2
 8006fc2:	f104 010c 	add.w	r1, r4, #12
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	300c      	adds	r0, #12
 8006fca:	f000 fd19 	bl	8007a00 <memcpy>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ffa5 	bl	8006f20 <_Bfree>
 8006fd6:	4644      	mov	r4, r8
 8006fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fdc:	3501      	adds	r5, #1
 8006fde:	615e      	str	r6, [r3, #20]
 8006fe0:	6125      	str	r5, [r4, #16]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe8:	080081e8 	.word	0x080081e8
 8006fec:	080081f9 	.word	0x080081f9

08006ff0 <__hi0bits>:
 8006ff0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	bf36      	itet	cc
 8006ff8:	0403      	lslcc	r3, r0, #16
 8006ffa:	2000      	movcs	r0, #0
 8006ffc:	2010      	movcc	r0, #16
 8006ffe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007002:	bf3c      	itt	cc
 8007004:	021b      	lslcc	r3, r3, #8
 8007006:	3008      	addcc	r0, #8
 8007008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800700c:	bf3c      	itt	cc
 800700e:	011b      	lslcc	r3, r3, #4
 8007010:	3004      	addcc	r0, #4
 8007012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007016:	bf3c      	itt	cc
 8007018:	009b      	lslcc	r3, r3, #2
 800701a:	3002      	addcc	r0, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	db05      	blt.n	800702c <__hi0bits+0x3c>
 8007020:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007024:	f100 0001 	add.w	r0, r0, #1
 8007028:	bf08      	it	eq
 800702a:	2020      	moveq	r0, #32
 800702c:	4770      	bx	lr

0800702e <__lo0bits>:
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	4602      	mov	r2, r0
 8007032:	f013 0007 	ands.w	r0, r3, #7
 8007036:	d00b      	beq.n	8007050 <__lo0bits+0x22>
 8007038:	07d9      	lsls	r1, r3, #31
 800703a:	d421      	bmi.n	8007080 <__lo0bits+0x52>
 800703c:	0798      	lsls	r0, r3, #30
 800703e:	bf49      	itett	mi
 8007040:	085b      	lsrmi	r3, r3, #1
 8007042:	089b      	lsrpl	r3, r3, #2
 8007044:	2001      	movmi	r0, #1
 8007046:	6013      	strmi	r3, [r2, #0]
 8007048:	bf5c      	itt	pl
 800704a:	6013      	strpl	r3, [r2, #0]
 800704c:	2002      	movpl	r0, #2
 800704e:	4770      	bx	lr
 8007050:	b299      	uxth	r1, r3
 8007052:	b909      	cbnz	r1, 8007058 <__lo0bits+0x2a>
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	2010      	movs	r0, #16
 8007058:	b2d9      	uxtb	r1, r3
 800705a:	b909      	cbnz	r1, 8007060 <__lo0bits+0x32>
 800705c:	3008      	adds	r0, #8
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	0719      	lsls	r1, r3, #28
 8007062:	bf04      	itt	eq
 8007064:	091b      	lsreq	r3, r3, #4
 8007066:	3004      	addeq	r0, #4
 8007068:	0799      	lsls	r1, r3, #30
 800706a:	bf04      	itt	eq
 800706c:	089b      	lsreq	r3, r3, #2
 800706e:	3002      	addeq	r0, #2
 8007070:	07d9      	lsls	r1, r3, #31
 8007072:	d403      	bmi.n	800707c <__lo0bits+0x4e>
 8007074:	085b      	lsrs	r3, r3, #1
 8007076:	f100 0001 	add.w	r0, r0, #1
 800707a:	d003      	beq.n	8007084 <__lo0bits+0x56>
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4770      	bx	lr
 8007080:	2000      	movs	r0, #0
 8007082:	4770      	bx	lr
 8007084:	2020      	movs	r0, #32
 8007086:	4770      	bx	lr

08007088 <__i2b>:
 8007088:	b510      	push	{r4, lr}
 800708a:	460c      	mov	r4, r1
 800708c:	2101      	movs	r1, #1
 800708e:	f7ff ff07 	bl	8006ea0 <_Balloc>
 8007092:	4602      	mov	r2, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__i2b+0x1a>
 8007096:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <__i2b+0x24>)
 8007098:	4805      	ldr	r0, [pc, #20]	@ (80070b0 <__i2b+0x28>)
 800709a:	f240 1145 	movw	r1, #325	@ 0x145
 800709e:	f000 fcbd 	bl	8007a1c <__assert_func>
 80070a2:	2301      	movs	r3, #1
 80070a4:	6144      	str	r4, [r0, #20]
 80070a6:	6103      	str	r3, [r0, #16]
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	bf00      	nop
 80070ac:	080081e8 	.word	0x080081e8
 80070b0:	080081f9 	.word	0x080081f9

080070b4 <__multiply>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	4614      	mov	r4, r2
 80070ba:	690a      	ldr	r2, [r1, #16]
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bfa8      	it	ge
 80070c2:	4623      	movge	r3, r4
 80070c4:	460f      	mov	r7, r1
 80070c6:	bfa4      	itt	ge
 80070c8:	460c      	movge	r4, r1
 80070ca:	461f      	movge	r7, r3
 80070cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070d4:	68a3      	ldr	r3, [r4, #8]
 80070d6:	6861      	ldr	r1, [r4, #4]
 80070d8:	eb0a 0609 	add.w	r6, sl, r9
 80070dc:	42b3      	cmp	r3, r6
 80070de:	b085      	sub	sp, #20
 80070e0:	bfb8      	it	lt
 80070e2:	3101      	addlt	r1, #1
 80070e4:	f7ff fedc 	bl	8006ea0 <_Balloc>
 80070e8:	b930      	cbnz	r0, 80070f8 <__multiply+0x44>
 80070ea:	4602      	mov	r2, r0
 80070ec:	4b44      	ldr	r3, [pc, #272]	@ (8007200 <__multiply+0x14c>)
 80070ee:	4845      	ldr	r0, [pc, #276]	@ (8007204 <__multiply+0x150>)
 80070f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070f4:	f000 fc92 	bl	8007a1c <__assert_func>
 80070f8:	f100 0514 	add.w	r5, r0, #20
 80070fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007100:	462b      	mov	r3, r5
 8007102:	2200      	movs	r2, #0
 8007104:	4543      	cmp	r3, r8
 8007106:	d321      	bcc.n	800714c <__multiply+0x98>
 8007108:	f107 0114 	add.w	r1, r7, #20
 800710c:	f104 0214 	add.w	r2, r4, #20
 8007110:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007114:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	1b13      	subs	r3, r2, r4
 800711c:	3b15      	subs	r3, #21
 800711e:	f023 0303 	bic.w	r3, r3, #3
 8007122:	3304      	adds	r3, #4
 8007124:	f104 0715 	add.w	r7, r4, #21
 8007128:	42ba      	cmp	r2, r7
 800712a:	bf38      	it	cc
 800712c:	2304      	movcc	r3, #4
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	9b02      	ldr	r3, [sp, #8]
 8007132:	9103      	str	r1, [sp, #12]
 8007134:	428b      	cmp	r3, r1
 8007136:	d80c      	bhi.n	8007152 <__multiply+0x9e>
 8007138:	2e00      	cmp	r6, #0
 800713a:	dd03      	ble.n	8007144 <__multiply+0x90>
 800713c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007140:	2b00      	cmp	r3, #0
 8007142:	d05b      	beq.n	80071fc <__multiply+0x148>
 8007144:	6106      	str	r6, [r0, #16]
 8007146:	b005      	add	sp, #20
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714c:	f843 2b04 	str.w	r2, [r3], #4
 8007150:	e7d8      	b.n	8007104 <__multiply+0x50>
 8007152:	f8b1 a000 	ldrh.w	sl, [r1]
 8007156:	f1ba 0f00 	cmp.w	sl, #0
 800715a:	d024      	beq.n	80071a6 <__multiply+0xf2>
 800715c:	f104 0e14 	add.w	lr, r4, #20
 8007160:	46a9      	mov	r9, r5
 8007162:	f04f 0c00 	mov.w	ip, #0
 8007166:	f85e 7b04 	ldr.w	r7, [lr], #4
 800716a:	f8d9 3000 	ldr.w	r3, [r9]
 800716e:	fa1f fb87 	uxth.w	fp, r7
 8007172:	b29b      	uxth	r3, r3
 8007174:	fb0a 330b 	mla	r3, sl, fp, r3
 8007178:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800717c:	f8d9 7000 	ldr.w	r7, [r9]
 8007180:	4463      	add	r3, ip
 8007182:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007186:	fb0a c70b 	mla	r7, sl, fp, ip
 800718a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007194:	4572      	cmp	r2, lr
 8007196:	f849 3b04 	str.w	r3, [r9], #4
 800719a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800719e:	d8e2      	bhi.n	8007166 <__multiply+0xb2>
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	f845 c003 	str.w	ip, [r5, r3]
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071ac:	3104      	adds	r1, #4
 80071ae:	f1b9 0f00 	cmp.w	r9, #0
 80071b2:	d021      	beq.n	80071f8 <__multiply+0x144>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	f104 0c14 	add.w	ip, r4, #20
 80071ba:	46ae      	mov	lr, r5
 80071bc:	f04f 0a00 	mov.w	sl, #0
 80071c0:	f8bc b000 	ldrh.w	fp, [ip]
 80071c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071c8:	fb09 770b 	mla	r7, r9, fp, r7
 80071cc:	4457      	add	r7, sl
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071d4:	f84e 3b04 	str.w	r3, [lr], #4
 80071d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071e0:	f8be 3000 	ldrh.w	r3, [lr]
 80071e4:	fb09 330a 	mla	r3, r9, sl, r3
 80071e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071ec:	4562      	cmp	r2, ip
 80071ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f2:	d8e5      	bhi.n	80071c0 <__multiply+0x10c>
 80071f4:	9f01      	ldr	r7, [sp, #4]
 80071f6:	51eb      	str	r3, [r5, r7]
 80071f8:	3504      	adds	r5, #4
 80071fa:	e799      	b.n	8007130 <__multiply+0x7c>
 80071fc:	3e01      	subs	r6, #1
 80071fe:	e79b      	b.n	8007138 <__multiply+0x84>
 8007200:	080081e8 	.word	0x080081e8
 8007204:	080081f9 	.word	0x080081f9

08007208 <__pow5mult>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	4615      	mov	r5, r2
 800720e:	f012 0203 	ands.w	r2, r2, #3
 8007212:	4607      	mov	r7, r0
 8007214:	460e      	mov	r6, r1
 8007216:	d007      	beq.n	8007228 <__pow5mult+0x20>
 8007218:	4c25      	ldr	r4, [pc, #148]	@ (80072b0 <__pow5mult+0xa8>)
 800721a:	3a01      	subs	r2, #1
 800721c:	2300      	movs	r3, #0
 800721e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007222:	f7ff fe9f 	bl	8006f64 <__multadd>
 8007226:	4606      	mov	r6, r0
 8007228:	10ad      	asrs	r5, r5, #2
 800722a:	d03d      	beq.n	80072a8 <__pow5mult+0xa0>
 800722c:	69fc      	ldr	r4, [r7, #28]
 800722e:	b97c      	cbnz	r4, 8007250 <__pow5mult+0x48>
 8007230:	2010      	movs	r0, #16
 8007232:	f7ff fd7f 	bl	8006d34 <malloc>
 8007236:	4602      	mov	r2, r0
 8007238:	61f8      	str	r0, [r7, #28]
 800723a:	b928      	cbnz	r0, 8007248 <__pow5mult+0x40>
 800723c:	4b1d      	ldr	r3, [pc, #116]	@ (80072b4 <__pow5mult+0xac>)
 800723e:	481e      	ldr	r0, [pc, #120]	@ (80072b8 <__pow5mult+0xb0>)
 8007240:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007244:	f000 fbea 	bl	8007a1c <__assert_func>
 8007248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800724c:	6004      	str	r4, [r0, #0]
 800724e:	60c4      	str	r4, [r0, #12]
 8007250:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007258:	b94c      	cbnz	r4, 800726e <__pow5mult+0x66>
 800725a:	f240 2171 	movw	r1, #625	@ 0x271
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff ff12 	bl	8007088 <__i2b>
 8007264:	2300      	movs	r3, #0
 8007266:	f8c8 0008 	str.w	r0, [r8, #8]
 800726a:	4604      	mov	r4, r0
 800726c:	6003      	str	r3, [r0, #0]
 800726e:	f04f 0900 	mov.w	r9, #0
 8007272:	07eb      	lsls	r3, r5, #31
 8007274:	d50a      	bpl.n	800728c <__pow5mult+0x84>
 8007276:	4631      	mov	r1, r6
 8007278:	4622      	mov	r2, r4
 800727a:	4638      	mov	r0, r7
 800727c:	f7ff ff1a 	bl	80070b4 <__multiply>
 8007280:	4631      	mov	r1, r6
 8007282:	4680      	mov	r8, r0
 8007284:	4638      	mov	r0, r7
 8007286:	f7ff fe4b 	bl	8006f20 <_Bfree>
 800728a:	4646      	mov	r6, r8
 800728c:	106d      	asrs	r5, r5, #1
 800728e:	d00b      	beq.n	80072a8 <__pow5mult+0xa0>
 8007290:	6820      	ldr	r0, [r4, #0]
 8007292:	b938      	cbnz	r0, 80072a4 <__pow5mult+0x9c>
 8007294:	4622      	mov	r2, r4
 8007296:	4621      	mov	r1, r4
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ff0b 	bl	80070b4 <__multiply>
 800729e:	6020      	str	r0, [r4, #0]
 80072a0:	f8c0 9000 	str.w	r9, [r0]
 80072a4:	4604      	mov	r4, r0
 80072a6:	e7e4      	b.n	8007272 <__pow5mult+0x6a>
 80072a8:	4630      	mov	r0, r6
 80072aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ae:	bf00      	nop
 80072b0:	08008254 	.word	0x08008254
 80072b4:	08008179 	.word	0x08008179
 80072b8:	080081f9 	.word	0x080081f9

080072bc <__lshift>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	460c      	mov	r4, r1
 80072c2:	6849      	ldr	r1, [r1, #4]
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	4607      	mov	r7, r0
 80072ce:	4691      	mov	r9, r2
 80072d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072d4:	f108 0601 	add.w	r6, r8, #1
 80072d8:	42b3      	cmp	r3, r6
 80072da:	db0b      	blt.n	80072f4 <__lshift+0x38>
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff fddf 	bl	8006ea0 <_Balloc>
 80072e2:	4605      	mov	r5, r0
 80072e4:	b948      	cbnz	r0, 80072fa <__lshift+0x3e>
 80072e6:	4602      	mov	r2, r0
 80072e8:	4b28      	ldr	r3, [pc, #160]	@ (800738c <__lshift+0xd0>)
 80072ea:	4829      	ldr	r0, [pc, #164]	@ (8007390 <__lshift+0xd4>)
 80072ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072f0:	f000 fb94 	bl	8007a1c <__assert_func>
 80072f4:	3101      	adds	r1, #1
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	e7ee      	b.n	80072d8 <__lshift+0x1c>
 80072fa:	2300      	movs	r3, #0
 80072fc:	f100 0114 	add.w	r1, r0, #20
 8007300:	f100 0210 	add.w	r2, r0, #16
 8007304:	4618      	mov	r0, r3
 8007306:	4553      	cmp	r3, sl
 8007308:	db33      	blt.n	8007372 <__lshift+0xb6>
 800730a:	6920      	ldr	r0, [r4, #16]
 800730c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007310:	f104 0314 	add.w	r3, r4, #20
 8007314:	f019 091f 	ands.w	r9, r9, #31
 8007318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800731c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007320:	d02b      	beq.n	800737a <__lshift+0xbe>
 8007322:	f1c9 0e20 	rsb	lr, r9, #32
 8007326:	468a      	mov	sl, r1
 8007328:	2200      	movs	r2, #0
 800732a:	6818      	ldr	r0, [r3, #0]
 800732c:	fa00 f009 	lsl.w	r0, r0, r9
 8007330:	4310      	orrs	r0, r2
 8007332:	f84a 0b04 	str.w	r0, [sl], #4
 8007336:	f853 2b04 	ldr.w	r2, [r3], #4
 800733a:	459c      	cmp	ip, r3
 800733c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007340:	d8f3      	bhi.n	800732a <__lshift+0x6e>
 8007342:	ebac 0304 	sub.w	r3, ip, r4
 8007346:	3b15      	subs	r3, #21
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	3304      	adds	r3, #4
 800734e:	f104 0015 	add.w	r0, r4, #21
 8007352:	4584      	cmp	ip, r0
 8007354:	bf38      	it	cc
 8007356:	2304      	movcc	r3, #4
 8007358:	50ca      	str	r2, [r1, r3]
 800735a:	b10a      	cbz	r2, 8007360 <__lshift+0xa4>
 800735c:	f108 0602 	add.w	r6, r8, #2
 8007360:	3e01      	subs	r6, #1
 8007362:	4638      	mov	r0, r7
 8007364:	612e      	str	r6, [r5, #16]
 8007366:	4621      	mov	r1, r4
 8007368:	f7ff fdda 	bl	8006f20 <_Bfree>
 800736c:	4628      	mov	r0, r5
 800736e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007372:	f842 0f04 	str.w	r0, [r2, #4]!
 8007376:	3301      	adds	r3, #1
 8007378:	e7c5      	b.n	8007306 <__lshift+0x4a>
 800737a:	3904      	subs	r1, #4
 800737c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007380:	f841 2f04 	str.w	r2, [r1, #4]!
 8007384:	459c      	cmp	ip, r3
 8007386:	d8f9      	bhi.n	800737c <__lshift+0xc0>
 8007388:	e7ea      	b.n	8007360 <__lshift+0xa4>
 800738a:	bf00      	nop
 800738c:	080081e8 	.word	0x080081e8
 8007390:	080081f9 	.word	0x080081f9

08007394 <__mcmp>:
 8007394:	690a      	ldr	r2, [r1, #16]
 8007396:	4603      	mov	r3, r0
 8007398:	6900      	ldr	r0, [r0, #16]
 800739a:	1a80      	subs	r0, r0, r2
 800739c:	b530      	push	{r4, r5, lr}
 800739e:	d10e      	bne.n	80073be <__mcmp+0x2a>
 80073a0:	3314      	adds	r3, #20
 80073a2:	3114      	adds	r1, #20
 80073a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073b4:	4295      	cmp	r5, r2
 80073b6:	d003      	beq.n	80073c0 <__mcmp+0x2c>
 80073b8:	d205      	bcs.n	80073c6 <__mcmp+0x32>
 80073ba:	f04f 30ff 	mov.w	r0, #4294967295
 80073be:	bd30      	pop	{r4, r5, pc}
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d3f3      	bcc.n	80073ac <__mcmp+0x18>
 80073c4:	e7fb      	b.n	80073be <__mcmp+0x2a>
 80073c6:	2001      	movs	r0, #1
 80073c8:	e7f9      	b.n	80073be <__mcmp+0x2a>
	...

080073cc <__mdiff>:
 80073cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	4689      	mov	r9, r1
 80073d2:	4606      	mov	r6, r0
 80073d4:	4611      	mov	r1, r2
 80073d6:	4648      	mov	r0, r9
 80073d8:	4614      	mov	r4, r2
 80073da:	f7ff ffdb 	bl	8007394 <__mcmp>
 80073de:	1e05      	subs	r5, r0, #0
 80073e0:	d112      	bne.n	8007408 <__mdiff+0x3c>
 80073e2:	4629      	mov	r1, r5
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff fd5b 	bl	8006ea0 <_Balloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	b928      	cbnz	r0, 80073fa <__mdiff+0x2e>
 80073ee:	4b3f      	ldr	r3, [pc, #252]	@ (80074ec <__mdiff+0x120>)
 80073f0:	f240 2137 	movw	r1, #567	@ 0x237
 80073f4:	483e      	ldr	r0, [pc, #248]	@ (80074f0 <__mdiff+0x124>)
 80073f6:	f000 fb11 	bl	8007a1c <__assert_func>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007400:	4610      	mov	r0, r2
 8007402:	b003      	add	sp, #12
 8007404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007408:	bfbc      	itt	lt
 800740a:	464b      	movlt	r3, r9
 800740c:	46a1      	movlt	r9, r4
 800740e:	4630      	mov	r0, r6
 8007410:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007414:	bfba      	itte	lt
 8007416:	461c      	movlt	r4, r3
 8007418:	2501      	movlt	r5, #1
 800741a:	2500      	movge	r5, #0
 800741c:	f7ff fd40 	bl	8006ea0 <_Balloc>
 8007420:	4602      	mov	r2, r0
 8007422:	b918      	cbnz	r0, 800742c <__mdiff+0x60>
 8007424:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <__mdiff+0x120>)
 8007426:	f240 2145 	movw	r1, #581	@ 0x245
 800742a:	e7e3      	b.n	80073f4 <__mdiff+0x28>
 800742c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007430:	6926      	ldr	r6, [r4, #16]
 8007432:	60c5      	str	r5, [r0, #12]
 8007434:	f109 0310 	add.w	r3, r9, #16
 8007438:	f109 0514 	add.w	r5, r9, #20
 800743c:	f104 0e14 	add.w	lr, r4, #20
 8007440:	f100 0b14 	add.w	fp, r0, #20
 8007444:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007448:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	46d9      	mov	r9, fp
 8007450:	f04f 0c00 	mov.w	ip, #0
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	f85e 0b04 	ldr.w	r0, [lr], #4
 800745a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	fa1f f38a 	uxth.w	r3, sl
 8007464:	4619      	mov	r1, r3
 8007466:	b283      	uxth	r3, r0
 8007468:	1acb      	subs	r3, r1, r3
 800746a:	0c00      	lsrs	r0, r0, #16
 800746c:	4463      	add	r3, ip
 800746e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007472:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800747c:	4576      	cmp	r6, lr
 800747e:	f849 3b04 	str.w	r3, [r9], #4
 8007482:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007486:	d8e5      	bhi.n	8007454 <__mdiff+0x88>
 8007488:	1b33      	subs	r3, r6, r4
 800748a:	3b15      	subs	r3, #21
 800748c:	f023 0303 	bic.w	r3, r3, #3
 8007490:	3415      	adds	r4, #21
 8007492:	3304      	adds	r3, #4
 8007494:	42a6      	cmp	r6, r4
 8007496:	bf38      	it	cc
 8007498:	2304      	movcc	r3, #4
 800749a:	441d      	add	r5, r3
 800749c:	445b      	add	r3, fp
 800749e:	461e      	mov	r6, r3
 80074a0:	462c      	mov	r4, r5
 80074a2:	4544      	cmp	r4, r8
 80074a4:	d30e      	bcc.n	80074c4 <__mdiff+0xf8>
 80074a6:	f108 0103 	add.w	r1, r8, #3
 80074aa:	1b49      	subs	r1, r1, r5
 80074ac:	f021 0103 	bic.w	r1, r1, #3
 80074b0:	3d03      	subs	r5, #3
 80074b2:	45a8      	cmp	r8, r5
 80074b4:	bf38      	it	cc
 80074b6:	2100      	movcc	r1, #0
 80074b8:	440b      	add	r3, r1
 80074ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074be:	b191      	cbz	r1, 80074e6 <__mdiff+0x11a>
 80074c0:	6117      	str	r7, [r2, #16]
 80074c2:	e79d      	b.n	8007400 <__mdiff+0x34>
 80074c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80074c8:	46e6      	mov	lr, ip
 80074ca:	0c08      	lsrs	r0, r1, #16
 80074cc:	fa1c fc81 	uxtah	ip, ip, r1
 80074d0:	4471      	add	r1, lr
 80074d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074d6:	b289      	uxth	r1, r1
 80074d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074dc:	f846 1b04 	str.w	r1, [r6], #4
 80074e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e4:	e7dd      	b.n	80074a2 <__mdiff+0xd6>
 80074e6:	3f01      	subs	r7, #1
 80074e8:	e7e7      	b.n	80074ba <__mdiff+0xee>
 80074ea:	bf00      	nop
 80074ec:	080081e8 	.word	0x080081e8
 80074f0:	080081f9 	.word	0x080081f9

080074f4 <__d2b>:
 80074f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074f8:	460f      	mov	r7, r1
 80074fa:	2101      	movs	r1, #1
 80074fc:	ec59 8b10 	vmov	r8, r9, d0
 8007500:	4616      	mov	r6, r2
 8007502:	f7ff fccd 	bl	8006ea0 <_Balloc>
 8007506:	4604      	mov	r4, r0
 8007508:	b930      	cbnz	r0, 8007518 <__d2b+0x24>
 800750a:	4602      	mov	r2, r0
 800750c:	4b23      	ldr	r3, [pc, #140]	@ (800759c <__d2b+0xa8>)
 800750e:	4824      	ldr	r0, [pc, #144]	@ (80075a0 <__d2b+0xac>)
 8007510:	f240 310f 	movw	r1, #783	@ 0x30f
 8007514:	f000 fa82 	bl	8007a1c <__assert_func>
 8007518:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800751c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007520:	b10d      	cbz	r5, 8007526 <__d2b+0x32>
 8007522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007526:	9301      	str	r3, [sp, #4]
 8007528:	f1b8 0300 	subs.w	r3, r8, #0
 800752c:	d023      	beq.n	8007576 <__d2b+0x82>
 800752e:	4668      	mov	r0, sp
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	f7ff fd7c 	bl	800702e <__lo0bits>
 8007536:	e9dd 1200 	ldrd	r1, r2, [sp]
 800753a:	b1d0      	cbz	r0, 8007572 <__d2b+0x7e>
 800753c:	f1c0 0320 	rsb	r3, r0, #32
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	430b      	orrs	r3, r1
 8007546:	40c2      	lsrs	r2, r0
 8007548:	6163      	str	r3, [r4, #20]
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	61a3      	str	r3, [r4, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	bf0c      	ite	eq
 8007554:	2201      	moveq	r2, #1
 8007556:	2202      	movne	r2, #2
 8007558:	6122      	str	r2, [r4, #16]
 800755a:	b1a5      	cbz	r5, 8007586 <__d2b+0x92>
 800755c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007560:	4405      	add	r5, r0
 8007562:	603d      	str	r5, [r7, #0]
 8007564:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007568:	6030      	str	r0, [r6, #0]
 800756a:	4620      	mov	r0, r4
 800756c:	b003      	add	sp, #12
 800756e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007572:	6161      	str	r1, [r4, #20]
 8007574:	e7ea      	b.n	800754c <__d2b+0x58>
 8007576:	a801      	add	r0, sp, #4
 8007578:	f7ff fd59 	bl	800702e <__lo0bits>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	6163      	str	r3, [r4, #20]
 8007580:	3020      	adds	r0, #32
 8007582:	2201      	movs	r2, #1
 8007584:	e7e8      	b.n	8007558 <__d2b+0x64>
 8007586:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800758a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800758e:	6038      	str	r0, [r7, #0]
 8007590:	6918      	ldr	r0, [r3, #16]
 8007592:	f7ff fd2d 	bl	8006ff0 <__hi0bits>
 8007596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800759a:	e7e5      	b.n	8007568 <__d2b+0x74>
 800759c:	080081e8 	.word	0x080081e8
 80075a0:	080081f9 	.word	0x080081f9

080075a4 <__ssputs_r>:
 80075a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	688e      	ldr	r6, [r1, #8]
 80075aa:	461f      	mov	r7, r3
 80075ac:	42be      	cmp	r6, r7
 80075ae:	680b      	ldr	r3, [r1, #0]
 80075b0:	4682      	mov	sl, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	4690      	mov	r8, r2
 80075b6:	d82d      	bhi.n	8007614 <__ssputs_r+0x70>
 80075b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075c0:	d026      	beq.n	8007610 <__ssputs_r+0x6c>
 80075c2:	6965      	ldr	r5, [r4, #20]
 80075c4:	6909      	ldr	r1, [r1, #16]
 80075c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075ca:	eba3 0901 	sub.w	r9, r3, r1
 80075ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075d2:	1c7b      	adds	r3, r7, #1
 80075d4:	444b      	add	r3, r9
 80075d6:	106d      	asrs	r5, r5, #1
 80075d8:	429d      	cmp	r5, r3
 80075da:	bf38      	it	cc
 80075dc:	461d      	movcc	r5, r3
 80075de:	0553      	lsls	r3, r2, #21
 80075e0:	d527      	bpl.n	8007632 <__ssputs_r+0x8e>
 80075e2:	4629      	mov	r1, r5
 80075e4:	f7ff fbd0 	bl	8006d88 <_malloc_r>
 80075e8:	4606      	mov	r6, r0
 80075ea:	b360      	cbz	r0, 8007646 <__ssputs_r+0xa2>
 80075ec:	6921      	ldr	r1, [r4, #16]
 80075ee:	464a      	mov	r2, r9
 80075f0:	f000 fa06 	bl	8007a00 <memcpy>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	6126      	str	r6, [r4, #16]
 8007602:	6165      	str	r5, [r4, #20]
 8007604:	444e      	add	r6, r9
 8007606:	eba5 0509 	sub.w	r5, r5, r9
 800760a:	6026      	str	r6, [r4, #0]
 800760c:	60a5      	str	r5, [r4, #8]
 800760e:	463e      	mov	r6, r7
 8007610:	42be      	cmp	r6, r7
 8007612:	d900      	bls.n	8007616 <__ssputs_r+0x72>
 8007614:	463e      	mov	r6, r7
 8007616:	6820      	ldr	r0, [r4, #0]
 8007618:	4632      	mov	r2, r6
 800761a:	4641      	mov	r1, r8
 800761c:	f000 f9c6 	bl	80079ac <memmove>
 8007620:	68a3      	ldr	r3, [r4, #8]
 8007622:	1b9b      	subs	r3, r3, r6
 8007624:	60a3      	str	r3, [r4, #8]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	4433      	add	r3, r6
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	2000      	movs	r0, #0
 800762e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007632:	462a      	mov	r2, r5
 8007634:	f000 fa36 	bl	8007aa4 <_realloc_r>
 8007638:	4606      	mov	r6, r0
 800763a:	2800      	cmp	r0, #0
 800763c:	d1e0      	bne.n	8007600 <__ssputs_r+0x5c>
 800763e:	6921      	ldr	r1, [r4, #16]
 8007640:	4650      	mov	r0, sl
 8007642:	f7ff fb2d 	bl	8006ca0 <_free_r>
 8007646:	230c      	movs	r3, #12
 8007648:	f8ca 3000 	str.w	r3, [sl]
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007652:	81a3      	strh	r3, [r4, #12]
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	e7e9      	b.n	800762e <__ssputs_r+0x8a>
	...

0800765c <_svfiprintf_r>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	4698      	mov	r8, r3
 8007662:	898b      	ldrh	r3, [r1, #12]
 8007664:	061b      	lsls	r3, r3, #24
 8007666:	b09d      	sub	sp, #116	@ 0x74
 8007668:	4607      	mov	r7, r0
 800766a:	460d      	mov	r5, r1
 800766c:	4614      	mov	r4, r2
 800766e:	d510      	bpl.n	8007692 <_svfiprintf_r+0x36>
 8007670:	690b      	ldr	r3, [r1, #16]
 8007672:	b973      	cbnz	r3, 8007692 <_svfiprintf_r+0x36>
 8007674:	2140      	movs	r1, #64	@ 0x40
 8007676:	f7ff fb87 	bl	8006d88 <_malloc_r>
 800767a:	6028      	str	r0, [r5, #0]
 800767c:	6128      	str	r0, [r5, #16]
 800767e:	b930      	cbnz	r0, 800768e <_svfiprintf_r+0x32>
 8007680:	230c      	movs	r3, #12
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	f04f 30ff 	mov.w	r0, #4294967295
 8007688:	b01d      	add	sp, #116	@ 0x74
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	2340      	movs	r3, #64	@ 0x40
 8007690:	616b      	str	r3, [r5, #20]
 8007692:	2300      	movs	r3, #0
 8007694:	9309      	str	r3, [sp, #36]	@ 0x24
 8007696:	2320      	movs	r3, #32
 8007698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800769c:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a0:	2330      	movs	r3, #48	@ 0x30
 80076a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007840 <_svfiprintf_r+0x1e4>
 80076a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076aa:	f04f 0901 	mov.w	r9, #1
 80076ae:	4623      	mov	r3, r4
 80076b0:	469a      	mov	sl, r3
 80076b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b6:	b10a      	cbz	r2, 80076bc <_svfiprintf_r+0x60>
 80076b8:	2a25      	cmp	r2, #37	@ 0x25
 80076ba:	d1f9      	bne.n	80076b0 <_svfiprintf_r+0x54>
 80076bc:	ebba 0b04 	subs.w	fp, sl, r4
 80076c0:	d00b      	beq.n	80076da <_svfiprintf_r+0x7e>
 80076c2:	465b      	mov	r3, fp
 80076c4:	4622      	mov	r2, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	4638      	mov	r0, r7
 80076ca:	f7ff ff6b 	bl	80075a4 <__ssputs_r>
 80076ce:	3001      	adds	r0, #1
 80076d0:	f000 80a7 	beq.w	8007822 <_svfiprintf_r+0x1c6>
 80076d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076d6:	445a      	add	r2, fp
 80076d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80076da:	f89a 3000 	ldrb.w	r3, [sl]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 809f 	beq.w	8007822 <_svfiprintf_r+0x1c6>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ee:	f10a 0a01 	add.w	sl, sl, #1
 80076f2:	9304      	str	r3, [sp, #16]
 80076f4:	9307      	str	r3, [sp, #28]
 80076f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80076fc:	4654      	mov	r4, sl
 80076fe:	2205      	movs	r2, #5
 8007700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007704:	484e      	ldr	r0, [pc, #312]	@ (8007840 <_svfiprintf_r+0x1e4>)
 8007706:	f7f8 fd63 	bl	80001d0 <memchr>
 800770a:	9a04      	ldr	r2, [sp, #16]
 800770c:	b9d8      	cbnz	r0, 8007746 <_svfiprintf_r+0xea>
 800770e:	06d0      	lsls	r0, r2, #27
 8007710:	bf44      	itt	mi
 8007712:	2320      	movmi	r3, #32
 8007714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007718:	0711      	lsls	r1, r2, #28
 800771a:	bf44      	itt	mi
 800771c:	232b      	movmi	r3, #43	@ 0x2b
 800771e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007722:	f89a 3000 	ldrb.w	r3, [sl]
 8007726:	2b2a      	cmp	r3, #42	@ 0x2a
 8007728:	d015      	beq.n	8007756 <_svfiprintf_r+0xfa>
 800772a:	9a07      	ldr	r2, [sp, #28]
 800772c:	4654      	mov	r4, sl
 800772e:	2000      	movs	r0, #0
 8007730:	f04f 0c0a 	mov.w	ip, #10
 8007734:	4621      	mov	r1, r4
 8007736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773a:	3b30      	subs	r3, #48	@ 0x30
 800773c:	2b09      	cmp	r3, #9
 800773e:	d94b      	bls.n	80077d8 <_svfiprintf_r+0x17c>
 8007740:	b1b0      	cbz	r0, 8007770 <_svfiprintf_r+0x114>
 8007742:	9207      	str	r2, [sp, #28]
 8007744:	e014      	b.n	8007770 <_svfiprintf_r+0x114>
 8007746:	eba0 0308 	sub.w	r3, r0, r8
 800774a:	fa09 f303 	lsl.w	r3, r9, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	46a2      	mov	sl, r4
 8007754:	e7d2      	b.n	80076fc <_svfiprintf_r+0xa0>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d19      	adds	r1, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9103      	str	r1, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfbb      	ittet	lt
 8007762:	425b      	neglt	r3, r3
 8007764:	f042 0202 	orrlt.w	r2, r2, #2
 8007768:	9307      	strge	r3, [sp, #28]
 800776a:	9307      	strlt	r3, [sp, #28]
 800776c:	bfb8      	it	lt
 800776e:	9204      	strlt	r2, [sp, #16]
 8007770:	7823      	ldrb	r3, [r4, #0]
 8007772:	2b2e      	cmp	r3, #46	@ 0x2e
 8007774:	d10a      	bne.n	800778c <_svfiprintf_r+0x130>
 8007776:	7863      	ldrb	r3, [r4, #1]
 8007778:	2b2a      	cmp	r3, #42	@ 0x2a
 800777a:	d132      	bne.n	80077e2 <_svfiprintf_r+0x186>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	1d1a      	adds	r2, r3, #4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	9203      	str	r2, [sp, #12]
 8007784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007788:	3402      	adds	r4, #2
 800778a:	9305      	str	r3, [sp, #20]
 800778c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007850 <_svfiprintf_r+0x1f4>
 8007790:	7821      	ldrb	r1, [r4, #0]
 8007792:	2203      	movs	r2, #3
 8007794:	4650      	mov	r0, sl
 8007796:	f7f8 fd1b 	bl	80001d0 <memchr>
 800779a:	b138      	cbz	r0, 80077ac <_svfiprintf_r+0x150>
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	eba0 000a 	sub.w	r0, r0, sl
 80077a2:	2240      	movs	r2, #64	@ 0x40
 80077a4:	4082      	lsls	r2, r0
 80077a6:	4313      	orrs	r3, r2
 80077a8:	3401      	adds	r4, #1
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b0:	4824      	ldr	r0, [pc, #144]	@ (8007844 <_svfiprintf_r+0x1e8>)
 80077b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077b6:	2206      	movs	r2, #6
 80077b8:	f7f8 fd0a 	bl	80001d0 <memchr>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d036      	beq.n	800782e <_svfiprintf_r+0x1d2>
 80077c0:	4b21      	ldr	r3, [pc, #132]	@ (8007848 <_svfiprintf_r+0x1ec>)
 80077c2:	bb1b      	cbnz	r3, 800780c <_svfiprintf_r+0x1b0>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	3307      	adds	r3, #7
 80077c8:	f023 0307 	bic.w	r3, r3, #7
 80077cc:	3308      	adds	r3, #8
 80077ce:	9303      	str	r3, [sp, #12]
 80077d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d2:	4433      	add	r3, r6
 80077d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077d6:	e76a      	b.n	80076ae <_svfiprintf_r+0x52>
 80077d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077dc:	460c      	mov	r4, r1
 80077de:	2001      	movs	r0, #1
 80077e0:	e7a8      	b.n	8007734 <_svfiprintf_r+0xd8>
 80077e2:	2300      	movs	r3, #0
 80077e4:	3401      	adds	r4, #1
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	4619      	mov	r1, r3
 80077ea:	f04f 0c0a 	mov.w	ip, #10
 80077ee:	4620      	mov	r0, r4
 80077f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077f4:	3a30      	subs	r2, #48	@ 0x30
 80077f6:	2a09      	cmp	r2, #9
 80077f8:	d903      	bls.n	8007802 <_svfiprintf_r+0x1a6>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0c6      	beq.n	800778c <_svfiprintf_r+0x130>
 80077fe:	9105      	str	r1, [sp, #20]
 8007800:	e7c4      	b.n	800778c <_svfiprintf_r+0x130>
 8007802:	fb0c 2101 	mla	r1, ip, r1, r2
 8007806:	4604      	mov	r4, r0
 8007808:	2301      	movs	r3, #1
 800780a:	e7f0      	b.n	80077ee <_svfiprintf_r+0x192>
 800780c:	ab03      	add	r3, sp, #12
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	462a      	mov	r2, r5
 8007812:	4b0e      	ldr	r3, [pc, #56]	@ (800784c <_svfiprintf_r+0x1f0>)
 8007814:	a904      	add	r1, sp, #16
 8007816:	4638      	mov	r0, r7
 8007818:	f7fd fe96 	bl	8005548 <_printf_float>
 800781c:	1c42      	adds	r2, r0, #1
 800781e:	4606      	mov	r6, r0
 8007820:	d1d6      	bne.n	80077d0 <_svfiprintf_r+0x174>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	065b      	lsls	r3, r3, #25
 8007826:	f53f af2d 	bmi.w	8007684 <_svfiprintf_r+0x28>
 800782a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800782c:	e72c      	b.n	8007688 <_svfiprintf_r+0x2c>
 800782e:	ab03      	add	r3, sp, #12
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	462a      	mov	r2, r5
 8007834:	4b05      	ldr	r3, [pc, #20]	@ (800784c <_svfiprintf_r+0x1f0>)
 8007836:	a904      	add	r1, sp, #16
 8007838:	4638      	mov	r0, r7
 800783a:	f7fe f91d 	bl	8005a78 <_printf_i>
 800783e:	e7ed      	b.n	800781c <_svfiprintf_r+0x1c0>
 8007840:	08008350 	.word	0x08008350
 8007844:	0800835a 	.word	0x0800835a
 8007848:	08005549 	.word	0x08005549
 800784c:	080075a5 	.word	0x080075a5
 8007850:	08008356 	.word	0x08008356

08007854 <__sflush_r>:
 8007854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785c:	0716      	lsls	r6, r2, #28
 800785e:	4605      	mov	r5, r0
 8007860:	460c      	mov	r4, r1
 8007862:	d454      	bmi.n	800790e <__sflush_r+0xba>
 8007864:	684b      	ldr	r3, [r1, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	dc02      	bgt.n	8007870 <__sflush_r+0x1c>
 800786a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	dd48      	ble.n	8007902 <__sflush_r+0xae>
 8007870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007872:	2e00      	cmp	r6, #0
 8007874:	d045      	beq.n	8007902 <__sflush_r+0xae>
 8007876:	2300      	movs	r3, #0
 8007878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800787c:	682f      	ldr	r7, [r5, #0]
 800787e:	6a21      	ldr	r1, [r4, #32]
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	d030      	beq.n	80078e6 <__sflush_r+0x92>
 8007884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	0759      	lsls	r1, r3, #29
 800788a:	d505      	bpl.n	8007898 <__sflush_r+0x44>
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007892:	b10b      	cbz	r3, 8007898 <__sflush_r+0x44>
 8007894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007896:	1ad2      	subs	r2, r2, r3
 8007898:	2300      	movs	r3, #0
 800789a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800789c:	6a21      	ldr	r1, [r4, #32]
 800789e:	4628      	mov	r0, r5
 80078a0:	47b0      	blx	r6
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	d106      	bne.n	80078b6 <__sflush_r+0x62>
 80078a8:	6829      	ldr	r1, [r5, #0]
 80078aa:	291d      	cmp	r1, #29
 80078ac:	d82b      	bhi.n	8007906 <__sflush_r+0xb2>
 80078ae:	4a2a      	ldr	r2, [pc, #168]	@ (8007958 <__sflush_r+0x104>)
 80078b0:	410a      	asrs	r2, r1
 80078b2:	07d6      	lsls	r6, r2, #31
 80078b4:	d427      	bmi.n	8007906 <__sflush_r+0xb2>
 80078b6:	2200      	movs	r2, #0
 80078b8:	6062      	str	r2, [r4, #4]
 80078ba:	04d9      	lsls	r1, r3, #19
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	6022      	str	r2, [r4, #0]
 80078c0:	d504      	bpl.n	80078cc <__sflush_r+0x78>
 80078c2:	1c42      	adds	r2, r0, #1
 80078c4:	d101      	bne.n	80078ca <__sflush_r+0x76>
 80078c6:	682b      	ldr	r3, [r5, #0]
 80078c8:	b903      	cbnz	r3, 80078cc <__sflush_r+0x78>
 80078ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80078cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ce:	602f      	str	r7, [r5, #0]
 80078d0:	b1b9      	cbz	r1, 8007902 <__sflush_r+0xae>
 80078d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078d6:	4299      	cmp	r1, r3
 80078d8:	d002      	beq.n	80078e0 <__sflush_r+0x8c>
 80078da:	4628      	mov	r0, r5
 80078dc:	f7ff f9e0 	bl	8006ca0 <_free_r>
 80078e0:	2300      	movs	r3, #0
 80078e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80078e4:	e00d      	b.n	8007902 <__sflush_r+0xae>
 80078e6:	2301      	movs	r3, #1
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b0      	blx	r6
 80078ec:	4602      	mov	r2, r0
 80078ee:	1c50      	adds	r0, r2, #1
 80078f0:	d1c9      	bne.n	8007886 <__sflush_r+0x32>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0c6      	beq.n	8007886 <__sflush_r+0x32>
 80078f8:	2b1d      	cmp	r3, #29
 80078fa:	d001      	beq.n	8007900 <__sflush_r+0xac>
 80078fc:	2b16      	cmp	r3, #22
 80078fe:	d11e      	bne.n	800793e <__sflush_r+0xea>
 8007900:	602f      	str	r7, [r5, #0]
 8007902:	2000      	movs	r0, #0
 8007904:	e022      	b.n	800794c <__sflush_r+0xf8>
 8007906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790a:	b21b      	sxth	r3, r3
 800790c:	e01b      	b.n	8007946 <__sflush_r+0xf2>
 800790e:	690f      	ldr	r7, [r1, #16]
 8007910:	2f00      	cmp	r7, #0
 8007912:	d0f6      	beq.n	8007902 <__sflush_r+0xae>
 8007914:	0793      	lsls	r3, r2, #30
 8007916:	680e      	ldr	r6, [r1, #0]
 8007918:	bf08      	it	eq
 800791a:	694b      	ldreq	r3, [r1, #20]
 800791c:	600f      	str	r7, [r1, #0]
 800791e:	bf18      	it	ne
 8007920:	2300      	movne	r3, #0
 8007922:	eba6 0807 	sub.w	r8, r6, r7
 8007926:	608b      	str	r3, [r1, #8]
 8007928:	f1b8 0f00 	cmp.w	r8, #0
 800792c:	dde9      	ble.n	8007902 <__sflush_r+0xae>
 800792e:	6a21      	ldr	r1, [r4, #32]
 8007930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007932:	4643      	mov	r3, r8
 8007934:	463a      	mov	r2, r7
 8007936:	4628      	mov	r0, r5
 8007938:	47b0      	blx	r6
 800793a:	2800      	cmp	r0, #0
 800793c:	dc08      	bgt.n	8007950 <__sflush_r+0xfc>
 800793e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	4407      	add	r7, r0
 8007952:	eba8 0800 	sub.w	r8, r8, r0
 8007956:	e7e7      	b.n	8007928 <__sflush_r+0xd4>
 8007958:	dfbffffe 	.word	0xdfbffffe

0800795c <_fflush_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	690b      	ldr	r3, [r1, #16]
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b913      	cbnz	r3, 800796c <_fflush_r+0x10>
 8007966:	2500      	movs	r5, #0
 8007968:	4628      	mov	r0, r5
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	b118      	cbz	r0, 8007976 <_fflush_r+0x1a>
 800796e:	6a03      	ldr	r3, [r0, #32]
 8007970:	b90b      	cbnz	r3, 8007976 <_fflush_r+0x1a>
 8007972:	f7fe fa2d 	bl	8005dd0 <__sinit>
 8007976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f3      	beq.n	8007966 <_fflush_r+0xa>
 800797e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d404      	bmi.n	800798e <_fflush_r+0x32>
 8007984:	0599      	lsls	r1, r3, #22
 8007986:	d402      	bmi.n	800798e <_fflush_r+0x32>
 8007988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798a:	f7fe fb38 	bl	8005ffe <__retarget_lock_acquire_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7ff ff5f 	bl	8007854 <__sflush_r>
 8007996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007998:	07da      	lsls	r2, r3, #31
 800799a:	4605      	mov	r5, r0
 800799c:	d4e4      	bmi.n	8007968 <_fflush_r+0xc>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	d4e1      	bmi.n	8007968 <_fflush_r+0xc>
 80079a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a6:	f7fe fb2b 	bl	8006000 <__retarget_lock_release_recursive>
 80079aa:	e7dd      	b.n	8007968 <_fflush_r+0xc>

080079ac <memmove>:
 80079ac:	4288      	cmp	r0, r1
 80079ae:	b510      	push	{r4, lr}
 80079b0:	eb01 0402 	add.w	r4, r1, r2
 80079b4:	d902      	bls.n	80079bc <memmove+0x10>
 80079b6:	4284      	cmp	r4, r0
 80079b8:	4623      	mov	r3, r4
 80079ba:	d807      	bhi.n	80079cc <memmove+0x20>
 80079bc:	1e43      	subs	r3, r0, #1
 80079be:	42a1      	cmp	r1, r4
 80079c0:	d008      	beq.n	80079d4 <memmove+0x28>
 80079c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ca:	e7f8      	b.n	80079be <memmove+0x12>
 80079cc:	4402      	add	r2, r0
 80079ce:	4601      	mov	r1, r0
 80079d0:	428a      	cmp	r2, r1
 80079d2:	d100      	bne.n	80079d6 <memmove+0x2a>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079de:	e7f7      	b.n	80079d0 <memmove+0x24>

080079e0 <_sbrk_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4d06      	ldr	r5, [pc, #24]	@ (80079fc <_sbrk_r+0x1c>)
 80079e4:	2300      	movs	r3, #0
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fa f84e 	bl	8001a8c <_sbrk>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_sbrk_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_sbrk_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000474 	.word	0x20000474

08007a00 <memcpy>:
 8007a00:	440a      	add	r2, r1
 8007a02:	4291      	cmp	r1, r2
 8007a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a08:	d100      	bne.n	8007a0c <memcpy+0xc>
 8007a0a:	4770      	bx	lr
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a16:	4291      	cmp	r1, r2
 8007a18:	d1f9      	bne.n	8007a0e <memcpy+0xe>
 8007a1a:	bd10      	pop	{r4, pc}

08007a1c <__assert_func>:
 8007a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a1e:	4614      	mov	r4, r2
 8007a20:	461a      	mov	r2, r3
 8007a22:	4b09      	ldr	r3, [pc, #36]	@ (8007a48 <__assert_func+0x2c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4605      	mov	r5, r0
 8007a28:	68d8      	ldr	r0, [r3, #12]
 8007a2a:	b954      	cbnz	r4, 8007a42 <__assert_func+0x26>
 8007a2c:	4b07      	ldr	r3, [pc, #28]	@ (8007a4c <__assert_func+0x30>)
 8007a2e:	461c      	mov	r4, r3
 8007a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a34:	9100      	str	r1, [sp, #0]
 8007a36:	462b      	mov	r3, r5
 8007a38:	4905      	ldr	r1, [pc, #20]	@ (8007a50 <__assert_func+0x34>)
 8007a3a:	f000 f86f 	bl	8007b1c <fiprintf>
 8007a3e:	f000 f87f 	bl	8007b40 <abort>
 8007a42:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <__assert_func+0x38>)
 8007a44:	e7f4      	b.n	8007a30 <__assert_func+0x14>
 8007a46:	bf00      	nop
 8007a48:	20000018 	.word	0x20000018
 8007a4c:	080083a6 	.word	0x080083a6
 8007a50:	08008378 	.word	0x08008378
 8007a54:	0800836b 	.word	0x0800836b

08007a58 <_calloc_r>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	fba1 5402 	umull	r5, r4, r1, r2
 8007a5e:	b93c      	cbnz	r4, 8007a70 <_calloc_r+0x18>
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7ff f991 	bl	8006d88 <_malloc_r>
 8007a66:	4606      	mov	r6, r0
 8007a68:	b928      	cbnz	r0, 8007a76 <_calloc_r+0x1e>
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	220c      	movs	r2, #12
 8007a72:	6002      	str	r2, [r0, #0]
 8007a74:	e7f9      	b.n	8007a6a <_calloc_r+0x12>
 8007a76:	462a      	mov	r2, r5
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f7fe fa42 	bl	8005f02 <memset>
 8007a7e:	e7f5      	b.n	8007a6c <_calloc_r+0x14>

08007a80 <__ascii_mbtowc>:
 8007a80:	b082      	sub	sp, #8
 8007a82:	b901      	cbnz	r1, 8007a86 <__ascii_mbtowc+0x6>
 8007a84:	a901      	add	r1, sp, #4
 8007a86:	b142      	cbz	r2, 8007a9a <__ascii_mbtowc+0x1a>
 8007a88:	b14b      	cbz	r3, 8007a9e <__ascii_mbtowc+0x1e>
 8007a8a:	7813      	ldrb	r3, [r2, #0]
 8007a8c:	600b      	str	r3, [r1, #0]
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	1e10      	subs	r0, r2, #0
 8007a92:	bf18      	it	ne
 8007a94:	2001      	movne	r0, #1
 8007a96:	b002      	add	sp, #8
 8007a98:	4770      	bx	lr
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	e7fb      	b.n	8007a96 <__ascii_mbtowc+0x16>
 8007a9e:	f06f 0001 	mvn.w	r0, #1
 8007aa2:	e7f8      	b.n	8007a96 <__ascii_mbtowc+0x16>

08007aa4 <_realloc_r>:
 8007aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	4615      	mov	r5, r2
 8007aac:	460c      	mov	r4, r1
 8007aae:	b921      	cbnz	r1, 8007aba <_realloc_r+0x16>
 8007ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	f7ff b967 	b.w	8006d88 <_malloc_r>
 8007aba:	b92a      	cbnz	r2, 8007ac8 <_realloc_r+0x24>
 8007abc:	f7ff f8f0 	bl	8006ca0 <_free_r>
 8007ac0:	2400      	movs	r4, #0
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac8:	f000 f841 	bl	8007b4e <_malloc_usable_size_r>
 8007acc:	4285      	cmp	r5, r0
 8007ace:	4606      	mov	r6, r0
 8007ad0:	d802      	bhi.n	8007ad8 <_realloc_r+0x34>
 8007ad2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ad6:	d8f4      	bhi.n	8007ac2 <_realloc_r+0x1e>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4640      	mov	r0, r8
 8007adc:	f7ff f954 	bl	8006d88 <_malloc_r>
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d0ec      	beq.n	8007ac0 <_realloc_r+0x1c>
 8007ae6:	42b5      	cmp	r5, r6
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4621      	mov	r1, r4
 8007aec:	bf28      	it	cs
 8007aee:	4632      	movcs	r2, r6
 8007af0:	f7ff ff86 	bl	8007a00 <memcpy>
 8007af4:	4621      	mov	r1, r4
 8007af6:	4640      	mov	r0, r8
 8007af8:	f7ff f8d2 	bl	8006ca0 <_free_r>
 8007afc:	463c      	mov	r4, r7
 8007afe:	e7e0      	b.n	8007ac2 <_realloc_r+0x1e>

08007b00 <__ascii_wctomb>:
 8007b00:	4603      	mov	r3, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	b141      	cbz	r1, 8007b18 <__ascii_wctomb+0x18>
 8007b06:	2aff      	cmp	r2, #255	@ 0xff
 8007b08:	d904      	bls.n	8007b14 <__ascii_wctomb+0x14>
 8007b0a:	228a      	movs	r2, #138	@ 0x8a
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b12:	4770      	bx	lr
 8007b14:	700a      	strb	r2, [r1, #0]
 8007b16:	2001      	movs	r0, #1
 8007b18:	4770      	bx	lr
	...

08007b1c <fiprintf>:
 8007b1c:	b40e      	push	{r1, r2, r3}
 8007b1e:	b503      	push	{r0, r1, lr}
 8007b20:	4601      	mov	r1, r0
 8007b22:	ab03      	add	r3, sp, #12
 8007b24:	4805      	ldr	r0, [pc, #20]	@ (8007b3c <fiprintf+0x20>)
 8007b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	f000 f83f 	bl	8007bb0 <_vfiprintf_r>
 8007b32:	b002      	add	sp, #8
 8007b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b38:	b003      	add	sp, #12
 8007b3a:	4770      	bx	lr
 8007b3c:	20000018 	.word	0x20000018

08007b40 <abort>:
 8007b40:	b508      	push	{r3, lr}
 8007b42:	2006      	movs	r0, #6
 8007b44:	f000 fa08 	bl	8007f58 <raise>
 8007b48:	2001      	movs	r0, #1
 8007b4a:	f7f9 ff26 	bl	800199a <_exit>

08007b4e <_malloc_usable_size_r>:
 8007b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b52:	1f18      	subs	r0, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bfbc      	itt	lt
 8007b58:	580b      	ldrlt	r3, [r1, r0]
 8007b5a:	18c0      	addlt	r0, r0, r3
 8007b5c:	4770      	bx	lr

08007b5e <__sfputc_r>:
 8007b5e:	6893      	ldr	r3, [r2, #8]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	b410      	push	{r4}
 8007b66:	6093      	str	r3, [r2, #8]
 8007b68:	da08      	bge.n	8007b7c <__sfputc_r+0x1e>
 8007b6a:	6994      	ldr	r4, [r2, #24]
 8007b6c:	42a3      	cmp	r3, r4
 8007b6e:	db01      	blt.n	8007b74 <__sfputc_r+0x16>
 8007b70:	290a      	cmp	r1, #10
 8007b72:	d103      	bne.n	8007b7c <__sfputc_r+0x1e>
 8007b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b78:	f000 b932 	b.w	8007de0 <__swbuf_r>
 8007b7c:	6813      	ldr	r3, [r2, #0]
 8007b7e:	1c58      	adds	r0, r3, #1
 8007b80:	6010      	str	r0, [r2, #0]
 8007b82:	7019      	strb	r1, [r3, #0]
 8007b84:	4608      	mov	r0, r1
 8007b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <__sfputs_r>:
 8007b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	4614      	mov	r4, r2
 8007b94:	18d5      	adds	r5, r2, r3
 8007b96:	42ac      	cmp	r4, r5
 8007b98:	d101      	bne.n	8007b9e <__sfputs_r+0x12>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e007      	b.n	8007bae <__sfputs_r+0x22>
 8007b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ba2:	463a      	mov	r2, r7
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f7ff ffda 	bl	8007b5e <__sfputc_r>
 8007baa:	1c43      	adds	r3, r0, #1
 8007bac:	d1f3      	bne.n	8007b96 <__sfputs_r+0xa>
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bb0 <_vfiprintf_r>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	b09d      	sub	sp, #116	@ 0x74
 8007bb8:	4614      	mov	r4, r2
 8007bba:	4698      	mov	r8, r3
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	b118      	cbz	r0, 8007bc8 <_vfiprintf_r+0x18>
 8007bc0:	6a03      	ldr	r3, [r0, #32]
 8007bc2:	b90b      	cbnz	r3, 8007bc8 <_vfiprintf_r+0x18>
 8007bc4:	f7fe f904 	bl	8005dd0 <__sinit>
 8007bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bca:	07d9      	lsls	r1, r3, #31
 8007bcc:	d405      	bmi.n	8007bda <_vfiprintf_r+0x2a>
 8007bce:	89ab      	ldrh	r3, [r5, #12]
 8007bd0:	059a      	lsls	r2, r3, #22
 8007bd2:	d402      	bmi.n	8007bda <_vfiprintf_r+0x2a>
 8007bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bd6:	f7fe fa12 	bl	8005ffe <__retarget_lock_acquire_recursive>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	071b      	lsls	r3, r3, #28
 8007bde:	d501      	bpl.n	8007be4 <_vfiprintf_r+0x34>
 8007be0:	692b      	ldr	r3, [r5, #16]
 8007be2:	b99b      	cbnz	r3, 8007c0c <_vfiprintf_r+0x5c>
 8007be4:	4629      	mov	r1, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	f000 f938 	bl	8007e5c <__swsetup_r>
 8007bec:	b170      	cbz	r0, 8007c0c <_vfiprintf_r+0x5c>
 8007bee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bf0:	07dc      	lsls	r4, r3, #31
 8007bf2:	d504      	bpl.n	8007bfe <_vfiprintf_r+0x4e>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	b01d      	add	sp, #116	@ 0x74
 8007bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	0598      	lsls	r0, r3, #22
 8007c02:	d4f7      	bmi.n	8007bf4 <_vfiprintf_r+0x44>
 8007c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c06:	f7fe f9fb 	bl	8006000 <__retarget_lock_release_recursive>
 8007c0a:	e7f3      	b.n	8007bf4 <_vfiprintf_r+0x44>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c10:	2320      	movs	r3, #32
 8007c12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c1a:	2330      	movs	r3, #48	@ 0x30
 8007c1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dcc <_vfiprintf_r+0x21c>
 8007c20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c24:	f04f 0901 	mov.w	r9, #1
 8007c28:	4623      	mov	r3, r4
 8007c2a:	469a      	mov	sl, r3
 8007c2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c30:	b10a      	cbz	r2, 8007c36 <_vfiprintf_r+0x86>
 8007c32:	2a25      	cmp	r2, #37	@ 0x25
 8007c34:	d1f9      	bne.n	8007c2a <_vfiprintf_r+0x7a>
 8007c36:	ebba 0b04 	subs.w	fp, sl, r4
 8007c3a:	d00b      	beq.n	8007c54 <_vfiprintf_r+0xa4>
 8007c3c:	465b      	mov	r3, fp
 8007c3e:	4622      	mov	r2, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff ffa2 	bl	8007b8c <__sfputs_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	f000 80a7 	beq.w	8007d9c <_vfiprintf_r+0x1ec>
 8007c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c50:	445a      	add	r2, fp
 8007c52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c54:	f89a 3000 	ldrb.w	r3, [sl]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 809f 	beq.w	8007d9c <_vfiprintf_r+0x1ec>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f04f 32ff 	mov.w	r2, #4294967295
 8007c64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c68:	f10a 0a01 	add.w	sl, sl, #1
 8007c6c:	9304      	str	r3, [sp, #16]
 8007c6e:	9307      	str	r3, [sp, #28]
 8007c70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c76:	4654      	mov	r4, sl
 8007c78:	2205      	movs	r2, #5
 8007c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7e:	4853      	ldr	r0, [pc, #332]	@ (8007dcc <_vfiprintf_r+0x21c>)
 8007c80:	f7f8 faa6 	bl	80001d0 <memchr>
 8007c84:	9a04      	ldr	r2, [sp, #16]
 8007c86:	b9d8      	cbnz	r0, 8007cc0 <_vfiprintf_r+0x110>
 8007c88:	06d1      	lsls	r1, r2, #27
 8007c8a:	bf44      	itt	mi
 8007c8c:	2320      	movmi	r3, #32
 8007c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c92:	0713      	lsls	r3, r2, #28
 8007c94:	bf44      	itt	mi
 8007c96:	232b      	movmi	r3, #43	@ 0x2b
 8007c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca2:	d015      	beq.n	8007cd0 <_vfiprintf_r+0x120>
 8007ca4:	9a07      	ldr	r2, [sp, #28]
 8007ca6:	4654      	mov	r4, sl
 8007ca8:	2000      	movs	r0, #0
 8007caa:	f04f 0c0a 	mov.w	ip, #10
 8007cae:	4621      	mov	r1, r4
 8007cb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb4:	3b30      	subs	r3, #48	@ 0x30
 8007cb6:	2b09      	cmp	r3, #9
 8007cb8:	d94b      	bls.n	8007d52 <_vfiprintf_r+0x1a2>
 8007cba:	b1b0      	cbz	r0, 8007cea <_vfiprintf_r+0x13a>
 8007cbc:	9207      	str	r2, [sp, #28]
 8007cbe:	e014      	b.n	8007cea <_vfiprintf_r+0x13a>
 8007cc0:	eba0 0308 	sub.w	r3, r0, r8
 8007cc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	9304      	str	r3, [sp, #16]
 8007ccc:	46a2      	mov	sl, r4
 8007cce:	e7d2      	b.n	8007c76 <_vfiprintf_r+0xc6>
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	1d19      	adds	r1, r3, #4
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	9103      	str	r1, [sp, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	bfbb      	ittet	lt
 8007cdc:	425b      	neglt	r3, r3
 8007cde:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce2:	9307      	strge	r3, [sp, #28]
 8007ce4:	9307      	strlt	r3, [sp, #28]
 8007ce6:	bfb8      	it	lt
 8007ce8:	9204      	strlt	r2, [sp, #16]
 8007cea:	7823      	ldrb	r3, [r4, #0]
 8007cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cee:	d10a      	bne.n	8007d06 <_vfiprintf_r+0x156>
 8007cf0:	7863      	ldrb	r3, [r4, #1]
 8007cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf4:	d132      	bne.n	8007d5c <_vfiprintf_r+0x1ac>
 8007cf6:	9b03      	ldr	r3, [sp, #12]
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	9203      	str	r2, [sp, #12]
 8007cfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d02:	3402      	adds	r4, #2
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ddc <_vfiprintf_r+0x22c>
 8007d0a:	7821      	ldrb	r1, [r4, #0]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f7f8 fa5e 	bl	80001d0 <memchr>
 8007d14:	b138      	cbz	r0, 8007d26 <_vfiprintf_r+0x176>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	eba0 000a 	sub.w	r0, r0, sl
 8007d1c:	2240      	movs	r2, #64	@ 0x40
 8007d1e:	4082      	lsls	r2, r0
 8007d20:	4313      	orrs	r3, r2
 8007d22:	3401      	adds	r4, #1
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	4829      	ldr	r0, [pc, #164]	@ (8007dd0 <_vfiprintf_r+0x220>)
 8007d2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d30:	2206      	movs	r2, #6
 8007d32:	f7f8 fa4d 	bl	80001d0 <memchr>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d03f      	beq.n	8007dba <_vfiprintf_r+0x20a>
 8007d3a:	4b26      	ldr	r3, [pc, #152]	@ (8007dd4 <_vfiprintf_r+0x224>)
 8007d3c:	bb1b      	cbnz	r3, 8007d86 <_vfiprintf_r+0x1d6>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	3307      	adds	r3, #7
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	3308      	adds	r3, #8
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4c:	443b      	add	r3, r7
 8007d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d50:	e76a      	b.n	8007c28 <_vfiprintf_r+0x78>
 8007d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d56:	460c      	mov	r4, r1
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e7a8      	b.n	8007cae <_vfiprintf_r+0xfe>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	4619      	mov	r1, r3
 8007d64:	f04f 0c0a 	mov.w	ip, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6e:	3a30      	subs	r2, #48	@ 0x30
 8007d70:	2a09      	cmp	r2, #9
 8007d72:	d903      	bls.n	8007d7c <_vfiprintf_r+0x1cc>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0c6      	beq.n	8007d06 <_vfiprintf_r+0x156>
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	e7c4      	b.n	8007d06 <_vfiprintf_r+0x156>
 8007d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d80:	4604      	mov	r4, r0
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7f0      	b.n	8007d68 <_vfiprintf_r+0x1b8>
 8007d86:	ab03      	add	r3, sp, #12
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4b12      	ldr	r3, [pc, #72]	@ (8007dd8 <_vfiprintf_r+0x228>)
 8007d8e:	a904      	add	r1, sp, #16
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7fd fbd9 	bl	8005548 <_printf_float>
 8007d96:	4607      	mov	r7, r0
 8007d98:	1c78      	adds	r0, r7, #1
 8007d9a:	d1d6      	bne.n	8007d4a <_vfiprintf_r+0x19a>
 8007d9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d9e:	07d9      	lsls	r1, r3, #31
 8007da0:	d405      	bmi.n	8007dae <_vfiprintf_r+0x1fe>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	059a      	lsls	r2, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_vfiprintf_r+0x1fe>
 8007da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007daa:	f7fe f929 	bl	8006000 <__retarget_lock_release_recursive>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	065b      	lsls	r3, r3, #25
 8007db2:	f53f af1f 	bmi.w	8007bf4 <_vfiprintf_r+0x44>
 8007db6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007db8:	e71e      	b.n	8007bf8 <_vfiprintf_r+0x48>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b05      	ldr	r3, [pc, #20]	@ (8007dd8 <_vfiprintf_r+0x228>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7fd fe57 	bl	8005a78 <_printf_i>
 8007dca:	e7e4      	b.n	8007d96 <_vfiprintf_r+0x1e6>
 8007dcc:	08008350 	.word	0x08008350
 8007dd0:	0800835a 	.word	0x0800835a
 8007dd4:	08005549 	.word	0x08005549
 8007dd8:	08007b8d 	.word	0x08007b8d
 8007ddc:	08008356 	.word	0x08008356

08007de0 <__swbuf_r>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	4605      	mov	r5, r0
 8007de8:	b118      	cbz	r0, 8007df2 <__swbuf_r+0x12>
 8007dea:	6a03      	ldr	r3, [r0, #32]
 8007dec:	b90b      	cbnz	r3, 8007df2 <__swbuf_r+0x12>
 8007dee:	f7fd ffef 	bl	8005dd0 <__sinit>
 8007df2:	69a3      	ldr	r3, [r4, #24]
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	071a      	lsls	r2, r3, #28
 8007dfa:	d501      	bpl.n	8007e00 <__swbuf_r+0x20>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	b943      	cbnz	r3, 8007e12 <__swbuf_r+0x32>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f82a 	bl	8007e5c <__swsetup_r>
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x32>
 8007e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e0e:	4638      	mov	r0, r7
 8007e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	1a98      	subs	r0, r3, r2
 8007e18:	6963      	ldr	r3, [r4, #20]
 8007e1a:	b2f6      	uxtb	r6, r6
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	4637      	mov	r7, r6
 8007e20:	dc05      	bgt.n	8007e2e <__swbuf_r+0x4e>
 8007e22:	4621      	mov	r1, r4
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7ff fd99 	bl	800795c <_fflush_r>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1ed      	bne.n	8007e0a <__swbuf_r+0x2a>
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	6022      	str	r2, [r4, #0]
 8007e3a:	701e      	strb	r6, [r3, #0]
 8007e3c:	6962      	ldr	r2, [r4, #20]
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d004      	beq.n	8007e4e <__swbuf_r+0x6e>
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	07db      	lsls	r3, r3, #31
 8007e48:	d5e1      	bpl.n	8007e0e <__swbuf_r+0x2e>
 8007e4a:	2e0a      	cmp	r6, #10
 8007e4c:	d1df      	bne.n	8007e0e <__swbuf_r+0x2e>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7ff fd83 	bl	800795c <_fflush_r>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0d9      	beq.n	8007e0e <__swbuf_r+0x2e>
 8007e5a:	e7d6      	b.n	8007e0a <__swbuf_r+0x2a>

08007e5c <__swsetup_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <__swsetup_r+0xa8>)
 8007e60:	4605      	mov	r5, r0
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	460c      	mov	r4, r1
 8007e66:	b118      	cbz	r0, 8007e70 <__swsetup_r+0x14>
 8007e68:	6a03      	ldr	r3, [r0, #32]
 8007e6a:	b90b      	cbnz	r3, 8007e70 <__swsetup_r+0x14>
 8007e6c:	f7fd ffb0 	bl	8005dd0 <__sinit>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	0719      	lsls	r1, r3, #28
 8007e76:	d422      	bmi.n	8007ebe <__swsetup_r+0x62>
 8007e78:	06da      	lsls	r2, r3, #27
 8007e7a:	d407      	bmi.n	8007e8c <__swsetup_r+0x30>
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	602a      	str	r2, [r5, #0]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	e033      	b.n	8007ef4 <__swsetup_r+0x98>
 8007e8c:	0758      	lsls	r0, r3, #29
 8007e8e:	d512      	bpl.n	8007eb6 <__swsetup_r+0x5a>
 8007e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e92:	b141      	cbz	r1, 8007ea6 <__swsetup_r+0x4a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__swsetup_r+0x46>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7fe feff 	bl	8006ca0 <_free_r>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0308 	orr.w	r3, r3, #8
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	b94b      	cbnz	r3, 8007ed6 <__swsetup_r+0x7a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ecc:	d003      	beq.n	8007ed6 <__swsetup_r+0x7a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f883 	bl	8007fdc <__smakebuf_r>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	f013 0201 	ands.w	r2, r3, #1
 8007ede:	d00a      	beq.n	8007ef6 <__swsetup_r+0x9a>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	60a2      	str	r2, [r4, #8]
 8007ee4:	6962      	ldr	r2, [r4, #20]
 8007ee6:	4252      	negs	r2, r2
 8007ee8:	61a2      	str	r2, [r4, #24]
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	b942      	cbnz	r2, 8007f00 <__swsetup_r+0xa4>
 8007eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ef2:	d1c5      	bne.n	8007e80 <__swsetup_r+0x24>
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	0799      	lsls	r1, r3, #30
 8007ef8:	bf58      	it	pl
 8007efa:	6962      	ldrpl	r2, [r4, #20]
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	e7f4      	b.n	8007eea <__swsetup_r+0x8e>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7f7      	b.n	8007ef4 <__swsetup_r+0x98>
 8007f04:	20000018 	.word	0x20000018

08007f08 <_raise_r>:
 8007f08:	291f      	cmp	r1, #31
 8007f0a:	b538      	push	{r3, r4, r5, lr}
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	d904      	bls.n	8007f1c <_raise_r+0x14>
 8007f12:	2316      	movs	r3, #22
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f1e:	b112      	cbz	r2, 8007f26 <_raise_r+0x1e>
 8007f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f24:	b94b      	cbnz	r3, 8007f3a <_raise_r+0x32>
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f830 	bl	8007f8c <_getpid_r>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4601      	mov	r1, r0
 8007f30:	4628      	mov	r0, r5
 8007f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f36:	f000 b817 	b.w	8007f68 <_kill_r>
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d00a      	beq.n	8007f54 <_raise_r+0x4c>
 8007f3e:	1c59      	adds	r1, r3, #1
 8007f40:	d103      	bne.n	8007f4a <_raise_r+0x42>
 8007f42:	2316      	movs	r3, #22
 8007f44:	6003      	str	r3, [r0, #0]
 8007f46:	2001      	movs	r0, #1
 8007f48:	e7e7      	b.n	8007f1a <_raise_r+0x12>
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f50:	4620      	mov	r0, r4
 8007f52:	4798      	blx	r3
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7e0      	b.n	8007f1a <_raise_r+0x12>

08007f58 <raise>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <raise+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f7ff bfd3 	b.w	8007f08 <_raise_r>
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018

08007f68 <_kill_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d07      	ldr	r5, [pc, #28]	@ (8007f88 <_kill_r+0x20>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	f7f9 fd00 	bl	800197a <_kill>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d102      	bne.n	8007f84 <_kill_r+0x1c>
 8007f7e:	682b      	ldr	r3, [r5, #0]
 8007f80:	b103      	cbz	r3, 8007f84 <_kill_r+0x1c>
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	bd38      	pop	{r3, r4, r5, pc}
 8007f86:	bf00      	nop
 8007f88:	20000474 	.word	0x20000474

08007f8c <_getpid_r>:
 8007f8c:	f7f9 bced 	b.w	800196a <_getpid>

08007f90 <__swhatbuf_r>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	460c      	mov	r4, r1
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	b096      	sub	sp, #88	@ 0x58
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	461e      	mov	r6, r3
 8007fa0:	da0d      	bge.n	8007fbe <__swhatbuf_r+0x2e>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	bf14      	ite	ne
 8007fae:	2340      	movne	r3, #64	@ 0x40
 8007fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	6031      	str	r1, [r6, #0]
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	b016      	add	sp, #88	@ 0x58
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	466a      	mov	r2, sp
 8007fc0:	f000 f848 	bl	8008054 <_fstat_r>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	dbec      	blt.n	8007fa2 <__swhatbuf_r+0x12>
 8007fc8:	9901      	ldr	r1, [sp, #4]
 8007fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fd2:	4259      	negs	r1, r3
 8007fd4:	4159      	adcs	r1, r3
 8007fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fda:	e7eb      	b.n	8007fb4 <__swhatbuf_r+0x24>

08007fdc <__smakebuf_r>:
 8007fdc:	898b      	ldrh	r3, [r1, #12]
 8007fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fe0:	079d      	lsls	r5, r3, #30
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	d507      	bpl.n	8007ff8 <__smakebuf_r+0x1c>
 8007fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff8:	ab01      	add	r3, sp, #4
 8007ffa:	466a      	mov	r2, sp
 8007ffc:	f7ff ffc8 	bl	8007f90 <__swhatbuf_r>
 8008000:	9f00      	ldr	r7, [sp, #0]
 8008002:	4605      	mov	r5, r0
 8008004:	4639      	mov	r1, r7
 8008006:	4630      	mov	r0, r6
 8008008:	f7fe febe 	bl	8006d88 <_malloc_r>
 800800c:	b948      	cbnz	r0, 8008022 <__smakebuf_r+0x46>
 800800e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008012:	059a      	lsls	r2, r3, #22
 8008014:	d4ee      	bmi.n	8007ff4 <__smakebuf_r+0x18>
 8008016:	f023 0303 	bic.w	r3, r3, #3
 800801a:	f043 0302 	orr.w	r3, r3, #2
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	e7e2      	b.n	8007fe8 <__smakebuf_r+0xc>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	6020      	str	r0, [r4, #0]
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008032:	b15b      	cbz	r3, 800804c <__smakebuf_r+0x70>
 8008034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008038:	4630      	mov	r0, r6
 800803a:	f000 f81d 	bl	8008078 <_isatty_r>
 800803e:	b128      	cbz	r0, 800804c <__smakebuf_r+0x70>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	431d      	orrs	r5, r3
 8008050:	81a5      	strh	r5, [r4, #12]
 8008052:	e7cf      	b.n	8007ff4 <__smakebuf_r+0x18>

08008054 <_fstat_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	@ (8008074 <_fstat_r+0x20>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f7f9 fcea 	bl	8001a3a <_fstat>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d102      	bne.n	8008070 <_fstat_r+0x1c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b103      	cbz	r3, 8008070 <_fstat_r+0x1c>
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20000474 	.word	0x20000474

08008078 <_isatty_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	@ (8008094 <_isatty_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fce9 	bl	8001a5a <_isatty>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_isatty_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_isatty_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000474 	.word	0x20000474

08008098 <_init>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

080080a4 <_fini>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr


BE_Robot_Martien.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059ec  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005b2c  08005b2c  00006b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005c20  08005c20  00006c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005c28  08005c28  00006c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000000c  20000008  08005c30  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000480  20000014  08005c3c  00007014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000494  08005c3c  00007494  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018f3e  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033f5  00000000  00000000  0001ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a98  00000000  00000000  00023378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001474  00000000  00000000  00024e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022c33  00000000  00000000  00026284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e3b  00000000  00000000  00048eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dfdcc  00000000  00000000  00062cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00142abe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007180  00000000  00000000  00142b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  00149c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b14 	.word	0x08005b14

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08005b14 	.word	0x08005b14

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	@ 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c94:	2004      	movs	r0, #4
 8000c96:	f7ff ffd9 	bl	8000c4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ffd6 	bl	8000c4c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff ffd3 	bl	8000c4c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2103      	movs	r1, #3
 8000caa:	4823      	ldr	r0, [pc, #140]	@ (8000d38 <MX_GPIO_Init+0xb8>)
 8000cac:	f001 f9d4 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN4_Pin|IN3_Pin|TRIG_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f240 4103 	movw	r1, #1027	@ 0x403
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cba:	f001 f9cd 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2123      	movs	r1, #35	@ 0x23
 8000cc2:	481e      	ldr	r0, [pc, #120]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000cc4:	f001 f9c8 	bl	8002058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4816      	ldr	r0, [pc, #88]	@ (8000d38 <MX_GPIO_Init+0xb8>)
 8000cde:	f001 f833 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN4_Pin|IN3_Pin|TRIG_Pin;
 8000ce2:	f240 4303 	movw	r3, #1027	@ 0x403
 8000ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfc:	f001 f824 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000d00:	2323      	movs	r3, #35	@ 0x23
 8000d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <MX_GPIO_Init+0xbc>)
 8000d16:	f001 f817 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000d1a:	2340      	movs	r3, #64	@ 0x40
 8000d1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4803      	ldr	r0, [pc, #12]	@ (8000d38 <MX_GPIO_Init+0xb8>)
 8000d2c:	f001 f80c 	bl	8001d48 <HAL_GPIO_Init>

}
 8000d30:	bf00      	nop
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	48000400 	.word	0x48000400

08000d40 <Mesure_Distance>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Fonction pour mesurer la distance entre le robot et un obstacle
uint16_t Mesure_Distance(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f001 f983 	bl	8002058 <HAL_GPIO_WritePin>
__HAL_TIM_SET_COUNTER(&htim16, 0);
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <Mesure_Distance+0xc0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
while (__HAL_TIM_GET_COUNTER(&htim16) < 10);  // wait for 10 us
 8000d5a:	bf00      	nop
 8000d5c:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <Mesure_Distance+0xc0>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d62:	2b09      	cmp	r3, #9
 8000d64:	d9fa      	bls.n	8000d5c <Mesure_Distance+0x1c>
HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d70:	f001 f972 	bl	8002058 <HAL_GPIO_WritePin>

while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) ); //Attendre que echo passe à l'état haut
 8000d74:	bf00      	nop
 8000d76:	2140      	movs	r1, #64	@ 0x40
 8000d78:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <Mesure_Distance+0xc4>)
 8000d7a:	f001 f955 	bl	8002028 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f8      	beq.n	8000d76 <Mesure_Distance+0x36>
Value1 = __HAL_TIM_GET_COUNTER(&htim16); // valeur du timer à laquelle echo passe à l'état haut
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <Mesure_Distance+0xc0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <Mesure_Distance+0xc8>)
 8000d8c:	6013      	str	r3, [r2, #0]

while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN))); //Attendre que echo passe à l'état bas
 8000d8e:	bf00      	nop
 8000d90:	2140      	movs	r1, #64	@ 0x40
 8000d92:	481c      	ldr	r0, [pc, #112]	@ (8000e04 <Mesure_Distance+0xc4>)
 8000d94:	f001 f948 	bl	8002028 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f8      	bne.n	8000d90 <Mesure_Distance+0x50>
Value2 = __HAL_TIM_GET_COUNTER(&htim16); // valeur du timer à laquelle echo passe à l'état bas
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <Mesure_Distance+0xc0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	4a19      	ldr	r2, [pc, #100]	@ (8000e0c <Mesure_Distance+0xcc>)
 8000da6:	6013      	str	r3, [r2, #0]

// Value2-Value1 : durée pendant laquelle echo reste en etat haut
// On multiplie la moitié de cette durée par la vitesse de l'ultrason pour avoir la distance

Distance = ((Value2-Value1)* 0.034)/2;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <Mesure_Distance+0xcc>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <Mesure_Distance+0xc8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb26 	bl	8000404 <__aeabi_ui2d>
 8000db8:	a30f      	add	r3, pc, #60	@ (adr r3, 8000df8 <Mesure_Distance+0xb8>)
 8000dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbe:	f7ff fb9b 	bl	80004f8 <__aeabi_dmul>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dd2:	f7ff fcbb 	bl	800074c <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fd9d 	bl	800091c <__aeabi_d2uiz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <Mesure_Distance+0xd0>)
 8000de8:	801a      	strh	r2, [r3, #0]
HAL_Delay(50);
 8000dea:	2032      	movs	r0, #50	@ 0x32
 8000dec:	f000 fea4 	bl	8001b38 <HAL_Delay>
return Distance;
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <Mesure_Distance+0xd0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	b020c49c 	.word	0xb020c49c
 8000dfc:	3fa16872 	.word	0x3fa16872
 8000e00:	200000d4 	.word	0x200000d4
 8000e04:	48000800 	.word	0x48000800
 8000e08:	20000030 	.word	0x20000030
 8000e0c:	20000034 	.word	0x20000034
 8000e10:	20000038 	.word	0x20000038

08000e14 <Blink_Green>:

//Fonction pour clignoter la LED verte
void Blink_Green(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4808      	ldr	r0, [pc, #32]	@ (8000e40 <Blink_Green+0x2c>)
 8000e1e:	f001 f91b 	bl	8002058 <HAL_GPIO_WritePin>
HAL_Delay(500);					/* Insert delay 500 ms */
 8000e22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e26:	f000 fe87 	bl	8001b38 <HAL_Delay>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <Blink_Green+0x2c>)
 8000e30:	f001 f912 	bl	8002058 <HAL_GPIO_WritePin>
HAL_Delay(200);					/* Insert delay 200 ms */
 8000e34:	20c8      	movs	r0, #200	@ 0xc8
 8000e36:	f000 fe7f 	bl	8001b38 <HAL_Delay>
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	48000400 	.word	0x48000400

08000e44 <Blink_Red>:

//Fonction pour clignoter la LED rouge
void Blink_Red(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <Blink_Red+0x2c>)
 8000e4e:	f001 f903 	bl	8002058 <HAL_GPIO_WritePin>
HAL_Delay(500);					/* Insert delay 500 ms */
 8000e52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e56:	f000 fe6f 	bl	8001b38 <HAL_Delay>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2102      	movs	r1, #2
 8000e5e:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <Blink_Red+0x2c>)
 8000e60:	f001 f8fa 	bl	8002058 <HAL_GPIO_WritePin>
HAL_Delay(200);					/* Insert delay 200 ms */
 8000e64:	20c8      	movs	r0, #200	@ 0xc8
 8000e66:	f000 fe67 	bl	8001b38 <HAL_Delay>
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	48000400 	.word	0x48000400

08000e74 <Init_Moteur>:

// ********LES DIFFERENTS MOUVEMENTS DU ROBOT*******************

// fonction pour initialiser le moteur
void Init_Moteur(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4810      	ldr	r0, [pc, #64]	@ (8000ec0 <Init_Moteur+0x4c>)
 8000e7e:	f001 f8eb 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2102      	movs	r1, #2
 8000e86:	480e      	ldr	r0, [pc, #56]	@ (8000ec0 <Init_Moteur+0x4c>)
 8000e88:	f001 f8e6 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm); //
 8000e8c:	2264      	movs	r2, #100	@ 0x64
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <Init_Moteur+0x50>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9c:	f001 f8dc 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea8:	f001 f8d6 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm); //
 8000eac:	2264      	movs	r2, #100	@ 0x64
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <Init_Moteur+0x54>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(500); // Attendre 0,5 s
 8000eb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eb8:	f000 fe3e 	bl	8001b38 <HAL_Delay>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	2000003c 	.word	0x2000003c
 8000ec8:	20000088 	.word	0x20000088

08000ecc <Move_Forward>:

//fonction pour avancer 1001 (IN1=1 ; IN2=0, IN3=0 ; IN4=1)
void Move_Forward(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4810      	ldr	r0, [pc, #64]	@ (8000f18 <Move_Forward+0x4c>)
 8000ed6:	f001 f8bf 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2102      	movs	r1, #2
 8000ede:	480e      	ldr	r0, [pc, #56]	@ (8000f18 <Move_Forward+0x4c>)
 8000ee0:	f001 f8ba 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8000ee4:	2264      	movs	r2, #100	@ 0x64
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <Move_Forward+0x50>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f001 f8b0 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f001 f8aa 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000f04:	2264      	movs	r2, #100	@ 0x64
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <Move_Forward+0x54>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(500); // Attendre 0,5 s
 8000f0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f10:	f000 fe12 	bl	8001b38 <HAL_Delay>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	48000800 	.word	0x48000800
 8000f1c:	2000003c 	.word	0x2000003c
 8000f20:	20000088 	.word	0x20000088

08000f24 <Move_Backward>:

//fonction pour reculer 0110 (IN1=0 ; IN2=1, IN3=1 ; IN4=0)
void Move_Backward(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <Move_Backward+0x4c>)
 8000f2e:	f001 f893 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2102      	movs	r1, #2
 8000f36:	480e      	ldr	r0, [pc, #56]	@ (8000f70 <Move_Backward+0x4c>)
 8000f38:	f001 f88e 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8000f3c:	2264      	movs	r2, #100	@ 0x64
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <Move_Backward+0x50>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2102      	movs	r1, #2
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f001 f884 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2101      	movs	r1, #1
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f58:	f001 f87e 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000f5c:	2264      	movs	r2, #100	@ 0x64
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <Move_Backward+0x54>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(500); // Attendre 0,5 s
 8000f64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f68:	f000 fde6 	bl	8001b38 <HAL_Delay>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	48000800 	.word	0x48000800
 8000f74:	2000003c 	.word	0x2000003c
 8000f78:	20000088 	.word	0x20000088

08000f7c <Turn_Right>:
	HAL_Delay(500); // Attendre 0,5 s
}

//fonction pour tourner a droite 1000 (IN1=1 ; IN2=0, IN3=0 ; IN4=0)
void Turn_Right(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2101      	movs	r1, #1
 8000f84:	4810      	ldr	r0, [pc, #64]	@ (8000fc8 <Turn_Right+0x4c>)
 8000f86:	f001 f867 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	480e      	ldr	r0, [pc, #56]	@ (8000fc8 <Turn_Right+0x4c>)
 8000f90:	f001 f862 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8000f94:	2264      	movs	r2, #100	@ 0x64
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <Turn_Right+0x50>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f001 f858 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2101      	movs	r1, #1
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb0:	f001 f852 	bl	8002058 <HAL_GPIO_WritePin>
	// Ajustez le rapport cyclique pour contrôler la vitesse
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000fb4:	2264      	movs	r2, #100	@ 0x64
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <Turn_Right+0x54>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_Delay(500); // Attendre 0,5 s
 8000fbc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fc0:	f000 fdba 	bl	8001b38 <HAL_Delay>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	48000800 	.word	0x48000800
 8000fcc:	2000003c 	.word	0x2000003c
 8000fd0:	20000088 	.word	0x20000088

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 fd27 	bl	8001a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f855 	bl	800108c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fe2:	f000 f8bf 	bl	8001164 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f7ff fe4b 	bl	8000c80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 fba1 	bl	8001730 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000fee:	f000 fc65 	bl	80018bc <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000ff2:	f000 f9af 	bl	8001354 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ff6:	f000 fa5d 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM16_Init();
 8000ffa:	f000 fad1 	bl	80015a0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim16);
 8000ffe:	4820      	ldr	r0, [pc, #128]	@ (8001080 <main+0xac>)
 8001000:	f002 ff72 	bl	8003ee8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	481f      	ldr	r0, [pc, #124]	@ (8001084 <main+0xb0>)
 8001008:	f003 f816 	bl	8004038 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	481e      	ldr	r0, [pc, #120]	@ (8001088 <main+0xb4>)
 8001010:	f003 f812 	bl	8004038 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101e:	f001 f81b 	bl	8002058 <HAL_GPIO_WritePin>
  Init_Moteur();
 8001022:	f7ff ff27 	bl	8000e74 <Init_Moteur>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint16_t distance = 0; // Initialisation de la distance
 8001026:	2300      	movs	r3, #0
 8001028:	80fb      	strh	r3, [r7, #6]

	      // Mesure la distance pendant que le robot avance
	      while (1)
	      {
	          distance = Mesure_Distance(); // Mesurer la distance
 800102a:	f7ff fe89 	bl	8000d40 <Mesure_Distance>
 800102e:	4603      	mov	r3, r0
 8001030:	80fb      	strh	r3, [r7, #6]

	          if (distance <= 20)
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	2b14      	cmp	r3, #20
 8001036:	d818      	bhi.n	800106a <main+0x96>
	          {
	              // Obstacle détecté à moins de 20cm, déclenche l'évitement
	              // Séquence : reculer, tourner, vérifier à nouveau la distance
	              Blink_Red();
 8001038:	f7ff ff04 	bl	8000e44 <Blink_Red>
	              Move_Backward();
 800103c:	f7ff ff72 	bl	8000f24 <Move_Backward>
	              HAL_Delay(50);
 8001040:	2032      	movs	r0, #50	@ 0x32
 8001042:	f000 fd79 	bl	8001b38 <HAL_Delay>
	              Turn_Right();
 8001046:	f7ff ff99 	bl	8000f7c <Turn_Right>
	              HAL_Delay(50);
 800104a:	2032      	movs	r0, #50	@ 0x32
 800104c:	f000 fd74 	bl	8001b38 <HAL_Delay>
	              distance = Mesure_Distance();
 8001050:	f7ff fe76 	bl	8000d40 <Mesure_Distance>
 8001054:	4603      	mov	r3, r0
 8001056:	80fb      	strh	r3, [r7, #6]
	              if (distance <= 20)
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	2b14      	cmp	r3, #20
 800105c:	d90d      	bls.n	800107a <main+0xa6>
	              {
	                  continue; // Répéter l'évitement si l'obstacle est toujours détecté
	              }
	              Move_Forward();
 800105e:	f7ff ff35 	bl	8000ecc <Move_Forward>
	              HAL_Delay(50);
 8001062:	2032      	movs	r0, #50	@ 0x32
 8001064:	f000 fd68 	bl	8001b38 <HAL_Delay>
 8001068:	e7df      	b.n	800102a <main+0x56>
	          } else {
	              // Pas d'obstacle, avance normalement
	              Blink_Green();
 800106a:	f7ff fed3 	bl	8000e14 <Blink_Green>
	              Move_Forward();
 800106e:	f7ff ff2d 	bl	8000ecc <Move_Forward>
	              HAL_Delay(50);
 8001072:	2032      	movs	r0, #50	@ 0x32
 8001074:	f000 fd60 	bl	8001b38 <HAL_Delay>
 8001078:	e7d7      	b.n	800102a <main+0x56>
	                  continue; // Répéter l'évitement si l'obstacle est toujours détecté
 800107a:	bf00      	nop
	          distance = Mesure_Distance(); // Mesurer la distance
 800107c:	e7d5      	b.n	800102a <main+0x56>
 800107e:	bf00      	nop
 8001080:	200000d4 	.word	0x200000d4
 8001084:	2000003c 	.word	0x2000003c
 8001088:	20000088 	.word	0x20000088

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b09a      	sub	sp, #104	@ 0x68
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2248      	movs	r2, #72	@ 0x48
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fd0d 	bl	8005aba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	615a      	str	r2, [r3, #20]
 80010b0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001160 <SystemClock_Config+0xd4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010ba:	4a29      	ldr	r2, [pc, #164]	@ (8001160 <SystemClock_Config+0xd4>)
 80010bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b27      	ldr	r3, [pc, #156]	@ (8001160 <SystemClock_Config+0xd4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80010ce:	2326      	movs	r3, #38	@ 0x26
 80010d0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e0:	2340      	movs	r3, #64	@ 0x40
 80010e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010e8:	2360      	movs	r3, #96	@ 0x60
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f0:	2301      	movs	r3, #1
 80010f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 64;
 80010f8:	2340      	movs	r3, #64	@ 0x40
 80010fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8001102:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001106:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800110c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	f107 0320 	add.w	r3, r7, #32
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fc44 	bl	80029a0 <HAL_RCC_OscConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800111e:	f000 f83e 	bl	800119e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001122:	236f      	movs	r3, #111	@ 0x6f
 8001124:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001126:	2303      	movs	r3, #3
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f001 ffa0 	bl	8003088 <HAL_RCC_ClockConfig>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800114e:	f000 f826 	bl	800119e <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001152:	f002 fd5b 	bl	8003c0c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001156:	bf00      	nop
 8001158:	3768      	adds	r7, #104	@ 0x68
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	58000400 	.word	0x58000400

08001164 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	@ 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2250      	movs	r2, #80	@ 0x50
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f004 fca2 	bl	8005aba <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800117c:	2300      	movs	r3, #0
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001180:	2300      	movs	r3, #0
 8001182:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001184:	463b      	mov	r3, r7
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fbca 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001192:	f000 f804 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001196:	bf00      	nop
 8001198:	3750      	adds	r7, #80	@ 0x50
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a2:	b672      	cpsid	i
}
 80011a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a6:	bf00      	nop
 80011a8:	e7fd      	b.n	80011a6 <Error_Handler+0x8>

080011aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <NMI_Handler+0x4>

080011c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <UsageFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120e:	f000 fc67 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800121c:	4b24      	ldr	r3, [pc, #144]	@ (80012b0 <SystemInit+0x98>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <SystemInit+0x98>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001240:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001244:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001250:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <SystemInit+0x9c>)
 8001252:	4013      	ands	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001262:	f023 0305 	bic.w	r3, r3, #5
 8001266:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800126a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800126e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001282:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <SystemInit+0xa0>)
 8001284:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800128a:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <SystemInit+0xa0>)
 800128c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800129e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	faf6fefb 	.word	0xfaf6fefb
 80012b8:	22041000 	.word	0x22041000

080012bc <LL_AHB2_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4013      	ands	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800132e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b09c      	sub	sp, #112	@ 0x70
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2234      	movs	r2, #52	@ 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fb93 	bl	8005aba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001394:	4b45      	ldr	r3, [pc, #276]	@ (80014ac <MX_TIM1_Init+0x158>)
 8001396:	4a46      	ldr	r2, [pc, #280]	@ (80014b0 <MX_TIM1_Init+0x15c>)
 8001398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <MX_TIM1_Init+0x158>)
 800139c:	221f      	movs	r2, #31
 800139e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013a6:	4b41      	ldr	r3, [pc, #260]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b4:	4b3d      	ldr	r3, [pc, #244]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c0:	483a      	ldr	r0, [pc, #232]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013c2:	f002 fd3a 	bl	8003e3a <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013cc:	f7ff fee7 	bl	800119e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013da:	4619      	mov	r1, r3
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013de:	f003 f819 	bl	8004414 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013e8:	f7ff fed9 	bl	800119e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ec:	482f      	ldr	r0, [pc, #188]	@ (80014ac <MX_TIM1_Init+0x158>)
 80013ee:	f002 fdc1 	bl	8003f74 <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013f8:	f7ff fed1 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001408:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800140c:	4619      	mov	r1, r3
 800140e:	4827      	ldr	r0, [pc, #156]	@ (80014ac <MX_TIM1_Init+0x158>)
 8001410:	f003 fc7a 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800141a:	f7ff fec0 	bl	800119e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141e:	2360      	movs	r3, #96	@ 0x60
 8001420:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800142a:	2300      	movs	r3, #0
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	481a      	ldr	r0, [pc, #104]	@ (80014ac <MX_TIM1_Init+0x158>)
 8001444:	f002 fed2 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800144e:	f7ff fea6 	bl	800119e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800146a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001478:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM1_Init+0x158>)
 8001490:	f003 fc9a 	bl	8004dc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800149a:	f7ff fe80 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM1_Init+0x158>)
 80014a0:	f000 f8cc 	bl	800163c <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3770      	adds	r7, #112	@ 0x70
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000003c 	.word	0x2000003c
 80014b0:	40012c00 	.word	0x40012c00

080014b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	@ 0x38
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e6:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <MX_TIM2_Init+0xe8>)
 80014e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80014ee:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <MX_TIM2_Init+0xe8>)
 80014f0:	221f      	movs	r2, #31
 80014f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b29      	ldr	r3, [pc, #164]	@ (800159c <MX_TIM2_Init+0xe8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014fa:	4b28      	ldr	r3, [pc, #160]	@ (800159c <MX_TIM2_Init+0xe8>)
 80014fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001500:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001502:	4b26      	ldr	r3, [pc, #152]	@ (800159c <MX_TIM2_Init+0xe8>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001508:	4b24      	ldr	r3, [pc, #144]	@ (800159c <MX_TIM2_Init+0xe8>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150e:	4823      	ldr	r0, [pc, #140]	@ (800159c <MX_TIM2_Init+0xe8>)
 8001510:	f002 fc93 	bl	8003e3a <HAL_TIM_Base_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800151a:	f7ff fe40 	bl	800119e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001524:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001528:	4619      	mov	r1, r3
 800152a:	481c      	ldr	r0, [pc, #112]	@ (800159c <MX_TIM2_Init+0xe8>)
 800152c:	f002 ff72 	bl	8004414 <HAL_TIM_ConfigClockSource>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001536:	f7ff fe32 	bl	800119e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <MX_TIM2_Init+0xe8>)
 800153c:	f002 fd1a 	bl	8003f74 <HAL_TIM_PWM_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001546:	f7ff fe2a 	bl	800119e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4810      	ldr	r0, [pc, #64]	@ (800159c <MX_TIM2_Init+0xe8>)
 800155a:	f003 fbd5 	bl	8004d08 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001564:	f7ff fe1b 	bl	800119e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001568:	2360      	movs	r3, #96	@ 0x60
 800156a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM2_Init+0xe8>)
 8001580:	f002 fe34 	bl	80041ec <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800158a:	f7ff fe08 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800158e:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM2_Init+0xe8>)
 8001590:	f000 f854 	bl	800163c <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3738      	adds	r7, #56	@ 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000088 	.word	0x20000088

080015a0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015a6:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <MX_TIM16_Init+0x48>)
 80015a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015ac:	221f      	movs	r2, #31
 80015ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_TIM16_Init+0x44>)
 80015d2:	f002 fc32 	bl	8003e3a <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80015dc:	f7ff fddf 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000d4 	.word	0x200000d4
 80015e8:	40014400 	.word	0x40014400

080015ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_TIM_Base_MspInit+0x48>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d104      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001602:	f7ff fe8d 	bl	8001320 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001606:	e011      	b.n	800162c <HAL_TIM_Base_MspInit+0x40>
  else if(tim_baseHandle->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001610:	d103      	bne.n	800161a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	2001      	movs	r0, #1
 8001614:	f7ff fe6b 	bl	80012ee <LL_APB1_GRP1_EnableClock>
}
 8001618:	e008      	b.n	800162c <HAL_TIM_Base_MspInit+0x40>
  else if(tim_baseHandle->Instance==TIM16)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_TIM_Base_MspInit+0x4c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d103      	bne.n	800162c <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001624:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001628:	f7ff fe7a 	bl	8001320 <LL_APB2_GRP1_EnableClock>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40014400 	.word	0x40014400

0800163c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	@ (80016c8 <HAL_TIM_MspPostInit+0x8c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d115      	bne.n	800168a <HAL_TIM_MspPostInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2001      	movs	r0, #1
 8001660:	f7ff fe2c 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_ENA_Pin;
 8001664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001668:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001676:	2301      	movs	r3, #1
 8001678:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_ENA_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f000 fb60 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001688:	e019      	b.n	80016be <HAL_TIM_MspPostInit+0x82>
  else if(timHandle->Instance==TIM2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001692:	d114      	bne.n	80016be <HAL_TIM_MspPostInit+0x82>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff fe11 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = PWM_ENB_Pin;
 800169a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800169e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_ENB_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ba:	f000 fb45 	bl	8001d48 <HAL_GPIO_Init>
}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40012c00 	.word	0x40012c00

080016cc <LL_AHB2_GRP1_EnableClock>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_APB2_GRP1_EnableClock>:
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800170a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800170c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001736:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <MX_USART1_UART_Init+0x98>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001748:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001750:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001758:	220c      	movs	r2, #12
 800175a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001764:	2200      	movs	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177a:	4812      	ldr	r0, [pc, #72]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800177c:	f003 fbca 	bl	8004f14 <HAL_UART_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001786:	f7ff fd0a 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800178a:	2100      	movs	r1, #0
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 800178e:	f004 f891 	bl	80058b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001798:	f7ff fd01 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179c:	2100      	movs	r1, #0
 800179e:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 80017a0:	f004 f8c6 	bl	8005930 <HAL_UARTEx_SetRxFifoThreshold>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80017aa:	f7ff fcf8 	bl	800119e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_USART1_UART_Init+0x94>)
 80017b0:	f004 f847 	bl	8005842 <HAL_UARTEx_DisableFifoMode>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80017ba:	f7ff fcf0 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000120 	.word	0x20000120
 80017c8:	40013800 	.word	0x40013800

080017cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09c      	sub	sp, #112	@ 0x70
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2250      	movs	r2, #80	@ 0x50
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 f964 	bl	8005aba <memset>
  if(uartHandle->Instance==USART1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a16      	ldr	r2, [pc, #88]	@ (8001850 <HAL_UART_MspInit+0x84>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d124      	bne.n	8001846 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4618      	mov	r0, r3
 800180a:	f002 f889 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001814:	f7ff fcc3 	bl	800119e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001818:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800181c:	f7ff ff6f 	bl	80016fe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	2002      	movs	r0, #2
 8001822:	f7ff ff53 	bl	80016cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001826:	23c0      	movs	r3, #192	@ 0xc0
 8001828:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800182e:	2301      	movs	r3, #1
 8001830:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001836:	2307      	movs	r3, #7
 8001838:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	@ (8001854 <HAL_UART_MspInit+0x88>)
 8001842:	f000 fa81 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001846:	bf00      	nop
 8001848:	3770      	adds	r7, #112	@ 0x70
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40013800 	.word	0x40013800
 8001854:	48000400 	.word	0x48000400

08001858 <LL_AHB2_GRP1_EnableClock>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187c:	68fb      	ldr	r3, [r7, #12]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_APB1_GRP1_EnableClock>:
{
 800188a:	b480      	push	{r7}
 800188c:	b085      	sub	sp, #20
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001898:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4313      	orrs	r3, r2
 80018a0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4013      	ands	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80018c0:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018c2:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <MX_USB_PCD_Init+0x4c>)
 80018c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80018c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018c8:	2208      	movs	r2, #8
 80018ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80018cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018da:	2200      	movs	r2, #0
 80018dc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	@ (8001904 <MX_USB_PCD_Init+0x48>)
 80018f2:	f000 fbc9 	bl	8002088 <HAL_PCD_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80018fc:	f7ff fc4f 	bl	800119e <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200001b4 	.word	0x200001b4
 8001908:	40006800 	.word	0x40006800

0800190c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b09c      	sub	sp, #112	@ 0x70
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2250      	movs	r2, #80	@ 0x50
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f004 f8c4 	bl	8005aba <memset>
  if(pcdHandle->Instance==USB)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1f      	ldr	r2, [pc, #124]	@ (80019b4 <HAL_PCD_MspInit+0xa8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d136      	bne.n	80019aa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800193c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001940:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001942:	2318      	movs	r3, #24
 8001944:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001946:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800194a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800194c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001950:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001952:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001956:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800195c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800195e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001962:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4618      	mov	r0, r3
 800196a:	f001 ffd9 	bl	8003920 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001974:	f7ff fc13 	bl	800119e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff ff6d 	bl	8001858 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800197e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001982:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001990:	230a      	movs	r3, #10
 8001992:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800199e:	f000 f9d3 	bl	8001d48 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80019a2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80019a6:	f7ff ff70 	bl	800188a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3770      	adds	r7, #112	@ 0x70
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40006800 	.word	0x40006800

080019b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019bc:	3304      	adds	r3, #4

080019be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019c2:	d3f9      	bcc.n	80019b8 <CopyDataInit>
  bx lr
 80019c4:	4770      	bx	lr

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019c8:	3004      	adds	r0, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>
  bx lr
 80019ce:	4770      	bx	lr

080019d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d4:	f7ff fc20 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <LoopForever+0x6>)
 80019da:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <LoopForever+0xa>)
 80019dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <LoopForever+0xe>)
 80019de:	2300      	movs	r3, #0
 80019e0:	f7ff ffed 	bl	80019be <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <LoopForever+0x12>)
 80019e6:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <LoopForever+0x16>)
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <LoopForever+0x1a>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	f7ff ffe7 	bl	80019be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019f0:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <LoopForever+0x1e>)
 80019f2:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <LoopForever+0x22>)
 80019f4:	2300      	movs	r3, #0
 80019f6:	f7ff ffe8 	bl	80019ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019fa:	f004 f867 	bl	8005acc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019fe:	f7ff fae9 	bl	8000fd4 <main>

08001a02 <LoopForever>:

LoopForever:
  b LoopForever
 8001a02:	e7fe      	b.n	8001a02 <LoopForever>
  ldr   r0, =_estack
 8001a04:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	08005c30 	.word	0x08005c30
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a14:	20030000 	.word	0x20030000
 8001a18:	20030000 	.word	0x20030000
 8001a1c:	08005c3c 	.word	0x08005c3c
  INIT_BSS _sbss, _ebss
 8001a20:	20000014 	.word	0x20000014
 8001a24:	20000494 	.word	0x20000494

08001a28 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_IRQHandler>
	...

08001a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_Init+0x3c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_Init+0x3c>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f000 f94e 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f80f 	bl	8001a6c <HAL_InitTick>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	e001      	b.n	8001a5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a5a:	f7ff fba6 	bl	80011aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58004000 	.word	0x58004000

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001a78:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <HAL_InitTick+0x6c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d024      	beq.n	8001aca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a80:	f001 fcae 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <HAL_InitTick+0x6c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f948 	bl	8001d2e <HAL_SYSTICK_Config>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10f      	bne.n	8001ac4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d809      	bhi.n	8001abe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab2:	f000 f922 	bl	8001cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_InitTick+0x70>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e007      	b.n	8001ace <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e004      	b.n	8001ace <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e001      	b.n	8001ace <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	2000000c 	.word	0x2000000c

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_IncTick+0x20>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_IncTick+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <HAL_IncTick+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]
 }
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000010 	.word	0x20000010
 8001b04:	20000490 	.word	0x20000490

08001b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <HAL_GetTick+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000490 	.word	0x20000490

08001b20 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTickPrio+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000000c 	.word	0x2000000c

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffe2 	bl	8001b08 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffd2 	bl	8001b08 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000010 	.word	0x20000010

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	@ (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	@ (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	@ 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	@ 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff8e 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff47 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff5e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff90 	bl	8001c38 <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff5f 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffb2 	bl	8001ca0 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e14c      	b.n	8001ff2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	4013      	ands	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 813e 	beq.w	8001fec <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d005      	beq.n	8001d88 <HAL_GPIO_Init+0x40>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d130      	bne.n	8001dea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0201 	and.w	r2, r3, #1
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d017      	beq.n	8001e26 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d123      	bne.n	8001e7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	6939      	ldr	r1, [r7, #16]
 8001e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0203 	and.w	r2, r3, #3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8098 	beq.w	8001fec <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ebc:	4a54      	ldr	r2, [pc, #336]	@ (8002010 <HAL_GPIO_Init+0x2c8>)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ee6:	d019      	beq.n	8001f1c <HAL_GPIO_Init+0x1d4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4a      	ldr	r2, [pc, #296]	@ (8002014 <HAL_GPIO_Init+0x2cc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d013      	beq.n	8001f18 <HAL_GPIO_Init+0x1d0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <HAL_GPIO_Init+0x2d0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00d      	beq.n	8001f14 <HAL_GPIO_Init+0x1cc>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a48      	ldr	r2, [pc, #288]	@ (800201c <HAL_GPIO_Init+0x2d4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d007      	beq.n	8001f10 <HAL_GPIO_Init+0x1c8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a47      	ldr	r2, [pc, #284]	@ (8002020 <HAL_GPIO_Init+0x2d8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_GPIO_Init+0x1c4>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e008      	b.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	e006      	b.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e004      	b.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e002      	b.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_GPIO_Init+0x1d6>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	f002 0203 	and.w	r2, r2, #3
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	4093      	lsls	r3, r2
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f2e:	4938      	ldr	r1, [pc, #224]	@ (8002010 <HAL_GPIO_Init+0x2c8>)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	089b      	lsrs	r3, r3, #2
 8001f34:	3302      	adds	r3, #2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f3c:	4b39      	ldr	r3, [pc, #228]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f60:	4a30      	ldr	r2, [pc, #192]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f8a:	4a26      	ldr	r2, [pc, #152]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8002024 <HAL_GPIO_Init+0x2dc>)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f47f aeab 	bne.w	8001d58 <HAL_GPIO_Init+0x10>
  }
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40010000 	.word	0x40010000
 8002014:	48000400 	.word	0x48000400
 8002018:	48000800 	.word	0x48000800
 800201c:	48000c00 	.word	0x48000c00
 8002020:	48001000 	.word	0x48001000
 8002024:	58000800 	.word	0x58000800

08002028 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	e001      	b.n	800204a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002074:	e002      	b.n	800207c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0c0      	b.n	800221c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fc2c 	bl	800190c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2203      	movs	r2, #3
 80020b8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fcc1 	bl	8005a48 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e03e      	b.n	800214a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	3311      	adds	r3, #17
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	3310      	adds	r3, #16
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	440b      	add	r3, r1
 8002102:	3313      	adds	r3, #19
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	3320      	adds	r3, #32
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3324      	adds	r3, #36	@ 0x24
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	3301      	adds	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3bb      	bcc.n	80020cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e044      	b.n	80021e4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	440b      	add	r3, r1
 8002168:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	440b      	add	r3, r1
 800217e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	440b      	add	r3, r1
 80021c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3301      	adds	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	7bfa      	ldrb	r2, [r7, #15]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d3b5      	bcc.n	800215a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021fa:	f003 fc40 	bl	8005a7e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7a9b      	ldrb	r3, [r3, #10]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f805 	bl	8002224 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002248:	b29b      	uxth	r3, r3
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800225c:	b29b      	uxth	r3, r3
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	58000400 	.word	0x58000400

08002298 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	58000400 	.word	0x58000400

080022b4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80022c6:	d101      	bne.n	80022cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002326:	d101      	bne.n	800232c <LL_RCC_HSE_IsReady+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_RCC_HSE_IsReady+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002368:	6013      	str	r3, [r2, #0]
}
 800236a:	bf00      	nop
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002386:	d101      	bne.n	800238c <LL_RCC_HSI_IsReady+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_RCC_HSI_IsReady+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	d101      	bne.n	800241e <LL_RCC_HSI48_IsReady+0x18>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_RCC_HSI48_IsReady+0x1a>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800242e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d101      	bne.n	80024ca <LL_RCC_LSE_IsReady+0x18>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <LL_RCC_LSE_IsReady+0x1a>
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d101      	bne.n	8002532 <LL_RCC_LSI1_IsReady+0x18>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <LL_RCC_LSI1_IsReady+0x1a>
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d101      	bne.n	800259a <LL_RCC_LSI2_IsReady+0x18>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_RCC_LSI2_IsReady+0x1a>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025b6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b02      	cmp	r3, #2
 8002620:	d101      	bne.n	8002626 <LL_RCC_MSI_IsReady+0x16>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <LL_RCC_MSI_IsReady+0x18>
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002644:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002670:	d901      	bls.n	8002676 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002672:	23b0      	movs	r3, #176	@ 0xb0
 8002674:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 0203 	bic.w	r2, r3, #3
 80026c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800271e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002722:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002726:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002752:	f023 020f 	bic.w	r2, r3, #15
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002782:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	608b      	str	r3, [r1, #8]
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002850:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002854:	6013      	str	r3, [r2, #0]
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002872:	d101      	bne.n	8002878 <LL_RCC_PLL_IsReady+0x18>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <LL_RCC_PLL_IsReady+0x1a>
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80028ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0303 	and.w	r3, r3, #3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80028ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f8:	d101      	bne.n	80028fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002912:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800291e:	d101      	bne.n	8002924 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002938:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800293c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002944:	d101      	bne.n	800294a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002968:	d101      	bne.n	800296e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002988:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800298c:	d101      	bne.n	8002992 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b08d      	sub	sp, #52	@ 0x34
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e363      	b.n	800307a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 808d 	beq.w	8002ada <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c0:	f7ff fe89 	bl	80026d6 <LL_RCC_GetSysClkSource>
 80029c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029c6:	f7ff ff82 	bl	80028ce <LL_RCC_PLL_GetMainSource>
 80029ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x3e>
 80029d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d147      	bne.n	8002a68 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80029d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d144      	bne.n	8002a68 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e347      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80029ee:	f7ff fe34 	bl	800265a <LL_RCC_MSI_GetRange>
 80029f2:	4603      	mov	r3, r0
 80029f4:	429c      	cmp	r4, r3
 80029f6:	d914      	bls.n	8002a22 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fd2f 	bl	8003460 <RCC_SetFlashLatencyFromMSIRange>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e336      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe0e 	bl	8002632 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fe32 	bl	8002684 <LL_RCC_MSI_SetCalibTrimming>
 8002a20:	e013      	b.n	8002a4a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe03 	bl	8002632 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fe27 	bl	8002684 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fd10 	bl	8003460 <RCC_SetFlashLatencyFromMSIRange>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e317      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a4a:	f000 fcc9 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4aa4      	ldr	r2, [pc, #656]	@ (8002ce4 <HAL_RCC_OscConfig+0x344>)
 8002a52:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a54:	4ba4      	ldr	r3, [pc, #656]	@ (8002ce8 <HAL_RCC_OscConfig+0x348>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f807 	bl	8001a6c <HAL_InitTick>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d039      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e308      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01e      	beq.n	8002aae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a70:	f7ff fdb0 	bl	80025d4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a74:	f7ff f848 	bl	8001b08 <HAL_GetTick>
 8002a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f844 	bl	8001b08 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e2f5      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a8e:	f7ff fdbf 	bl	8002610 <LL_RCC_MSI_IsReady>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f1      	beq.n	8002a7c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fdc8 	bl	8002632 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fdec 	bl	8002684 <LL_RCC_MSI_SetCalibTrimming>
 8002aac:	e015      	b.n	8002ada <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aae:	f7ff fda0 	bl	80025f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab2:	f7ff f829 	bl	8001b08 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aba:	f7ff f825 	bl	8001b08 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e2d6      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002acc:	f7ff fda0 	bl	8002610 <LL_RCC_MSI_IsReady>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f1      	bne.n	8002aba <HAL_RCC_OscConfig+0x11a>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002ad8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d047      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae6:	f7ff fdf6 	bl	80026d6 <LL_RCC_GetSysClkSource>
 8002aea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	f7ff feef 	bl	80028ce <LL_RCC_PLL_GetMainSource>
 8002af0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x164>
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d108      	bne.n	8002b10 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d134      	bne.n	8002b76 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e2b4      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d102      	bne.n	8002b20 <HAL_RCC_OscConfig+0x180>
 8002b1a:	f7ff fbdd 	bl	80022d8 <LL_RCC_HSE_Enable>
 8002b1e:	e001      	b.n	8002b24 <HAL_RCC_OscConfig+0x184>
 8002b20:	f7ff fbe9 	bl	80022f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe ffec 	bl	8001b08 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe ffe8 	bl	8001b08 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	@ 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e299      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002b46:	f7ff fbe5 	bl	8002314 <LL_RCC_HSE_IsReady>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f1      	beq.n	8002b34 <HAL_RCC_OscConfig+0x194>
 8002b50:	e011      	b.n	8002b76 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe ffd9 	bl	8001b08 <HAL_GetTick>
 8002b56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5a:	f7fe ffd5 	bl	8001b08 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b64      	cmp	r3, #100	@ 0x64
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e286      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b6c:	f7ff fbd2 	bl	8002314 <LL_RCC_HSE_IsReady>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f1      	bne.n	8002b5a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d04c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	f7ff fda8 	bl	80026d6 <LL_RCC_GetSysClkSource>
 8002b86:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b88:	f7ff fea1 	bl	80028ce <LL_RCC_PLL_GetMainSource>
 8002b8c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x200>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d10e      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e266      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fbf1 	bl	8002398 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002bb6:	e031      	b.n	8002c1c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	f7ff fbba 	bl	8002338 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe ffa0 	bl	8001b08 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe ff9c 	bl	8001b08 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e24d      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002bde:	f7ff fbc9 	bl	8002374 <LL_RCC_HSI_IsReady>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f1      	beq.n	8002bcc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fbd3 	bl	8002398 <LL_RCC_HSI_SetCalibTrimming>
 8002bf2:	e013      	b.n	8002c1c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf4:	f7ff fbaf 	bl	8002356 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe ff86 	bl	8001b08 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c00:	f7fe ff82 	bl	8001b08 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e233      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002c12:	f7ff fbaf 	bl	8002374 <LL_RCC_HSI_IsReady>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f1      	bne.n	8002c00 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a3 	beq.w	8002d7c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d076      	beq.n	8002d2c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d046      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002c4a:	f7ff fc66 	bl	800251a <LL_RCC_LSI1_IsReady>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d113      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002c54:	f7ff fc3f 	bl	80024d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c58:	f7fe ff56 	bl	8001b08 <HAL_GetTick>
 8002c5c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c60:	f7fe ff52 	bl	8001b08 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e203      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c72:	f7ff fc52 	bl	800251a <LL_RCC_LSI1_IsReady>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f1      	beq.n	8002c60 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002c7c:	f7ff fc5f 	bl	800253e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe ff42 	bl	8001b08 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c88:	f7fe ff3e 	bl	8001b08 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1ef      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c9a:	f7ff fc72 	bl	8002582 <LL_RCC_LSI2_IsReady>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f1      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fc7c 	bl	80025a6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002cae:	f7ff fc23 	bl	80024f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe ff29 	bl	8001b08 <HAL_GetTick>
 8002cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cba:	f7fe ff25 	bl	8001b08 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1d6      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002ccc:	f7ff fc25 	bl	800251a <LL_RCC_LSI1_IsReady>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f1      	bne.n	8002cba <HAL_RCC_OscConfig+0x31a>
 8002cd6:	e051      	b.n	8002d7c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002cd8:	f7ff fbfd 	bl	80024d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe ff14 	bl	8001b08 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002ce2:	e00c      	b.n	8002cfe <HAL_RCC_OscConfig+0x35e>
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cec:	f7fe ff0c 	bl	8001b08 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1bd      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002cfe:	f7ff fc0c 	bl	800251a <LL_RCC_LSI1_IsReady>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f1      	beq.n	8002cec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002d08:	f7ff fc2a 	bl	8002560 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d0e:	f7fe fefb 	bl	8001b08 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e1ac      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002d20:	f7ff fc2f 	bl	8002582 <LL_RCC_LSI2_IsReady>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f1      	bne.n	8002d0e <HAL_RCC_OscConfig+0x36e>
 8002d2a:	e027      	b.n	8002d7c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002d2c:	f7ff fc18 	bl	8002560 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fe feea 	bl	8001b08 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002d38:	f7fe fee6 	bl	8001b08 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e197      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002d4a:	f7ff fc1a 	bl	8002582 <LL_RCC_LSI2_IsReady>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f1      	bne.n	8002d38 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002d54:	f7ff fbd0 	bl	80024f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fed6 	bl	8001b08 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002d60:	f7fe fed2 	bl	8001b08 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e183      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d72:	f7ff fbd2 	bl	800251a <LL_RCC_LSI1_IsReady>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f1      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05b      	beq.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d88:	4ba7      	ldr	r3, [pc, #668]	@ (8003028 <HAL_RCC_OscConfig+0x688>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d114      	bne.n	8002dbe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d94:	f7ff fa70 	bl	8002278 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d98:	f7fe feb6 	bl	8001b08 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe feb2 	bl	8001b08 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e163      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db2:	4b9d      	ldr	r3, [pc, #628]	@ (8003028 <HAL_RCC_OscConfig+0x688>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_OscConfig+0x42c>
 8002dc6:	f7ff fb30 	bl	800242a <LL_RCC_LSE_Enable>
 8002dca:	e00c      	b.n	8002de6 <HAL_RCC_OscConfig+0x446>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b05      	cmp	r3, #5
 8002dd2:	d104      	bne.n	8002dde <HAL_RCC_OscConfig+0x43e>
 8002dd4:	f7ff fb4b 	bl	800246e <LL_RCC_LSE_EnableBypass>
 8002dd8:	f7ff fb27 	bl	800242a <LL_RCC_LSE_Enable>
 8002ddc:	e003      	b.n	8002de6 <HAL_RCC_OscConfig+0x446>
 8002dde:	f7ff fb35 	bl	800244c <LL_RCC_LSE_Disable>
 8002de2:	f7ff fb55 	bl	8002490 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dee:	f7fe fe8b 	bl	8001b08 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002df4:	e00a      	b.n	8002e0c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df6:	f7fe fe87 	bl	8001b08 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e136      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e0c:	f7ff fb51 	bl	80024b2 <LL_RCC_LSE_IsReady>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <HAL_RCC_OscConfig+0x456>
 8002e16:	e013      	b.n	8002e40 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7fe fe76 	bl	8001b08 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e20:	f7fe fe72 	bl	8001b08 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e121      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002e36:	f7ff fb3c 	bl	80024b2 <LL_RCC_LSE_IsReady>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ef      	bne.n	8002e20 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d02c      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d014      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e54:	f7ff fab5 	bl	80023c2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fe56 	bl	8001b08 <HAL_GetTick>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e60:	f7fe fe52 	bl	8001b08 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e103      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002e72:	f7ff fac8 	bl	8002406 <LL_RCC_HSI48_IsReady>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0f1      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4c0>
 8002e7c:	e013      	b.n	8002ea6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e7e:	f7ff fab1 	bl	80023e4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fe41 	bl	8001b08 <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8a:	f7fe fe3d 	bl	8001b08 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0ee      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002e9c:	f7ff fab3 	bl	8002406 <LL_RCC_HSI48_IsReady>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f1      	bne.n	8002e8a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80e4 	beq.w	8003078 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb0:	f7ff fc11 	bl	80026d6 <LL_RCC_GetSysClkSource>
 8002eb4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	f040 80b4 	bne.w	8003030 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0203 	and.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d123      	bne.n	8002f1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d11c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d114      	bne.n	8002f1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d10d      	bne.n	8002f1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d05d      	beq.n	8002fda <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	d058      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0a1      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f36:	f7ff fc84 	bl	8002842 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f3a:	f7fe fde5 	bl	8001b08 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fde1 	bl	8001b08 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e092      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ef      	bne.n	8002f42 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_RCC_OscConfig+0x68c>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f74:	4311      	orrs	r1, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f7a:	0212      	lsls	r2, r2, #8
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f82:	4311      	orrs	r1, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f98:	f7ff fc44 	bl	8002824 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fac:	f7fe fdac 	bl	8001b08 <HAL_GetTick>
 8002fb0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fda8 	bl	8001b08 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e059      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ef      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd4:	e050      	b.n	8003078 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e04f      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d147      	bne.n	8003078 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe8:	f7ff fc1c 	bl	8002824 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ffc:	f7fe fd84 	bl	8001b08 <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fd80 	bl	8001b08 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e031      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ef      	beq.n	8003004 <HAL_RCC_OscConfig+0x664>
 8003024:	e028      	b.n	8003078 <HAL_RCC_OscConfig+0x6d8>
 8003026:	bf00      	nop
 8003028:	58000400 	.word	0x58000400
 800302c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d01e      	beq.n	8003074 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	f7ff fc04 	bl	8002842 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fd65 	bl	8001b08 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe fd61 	bl	8001b08 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e012      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ef      	bne.n	8003042 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_OscConfig+0x6e4>)
 800306e:	4013      	ands	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
 8003072:	e001      	b.n	8003078 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3734      	adds	r7, #52	@ 0x34
 800307e:	46bd      	mov	sp, r7
 8003080:	bd90      	pop	{r4, r7, pc}
 8003082:	bf00      	nop
 8003084:	eefefffc 	.word	0xeefefffc

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e12d      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b98      	ldr	r3, [pc, #608]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d91b      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b95      	ldr	r3, [pc, #596]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4993      	ldr	r1, [pc, #588]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ba:	f7fe fd25 	bl	8001b08 <HAL_GetTick>
 80030be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c2:	f7fe fd21 	bl	8001b08 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e111      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	4b8a      	ldr	r3, [pc, #552]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1ef      	bne.n	80030c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fafb 	bl	80026ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030f8:	f7fe fd06 	bl	8001b08 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003100:	f7fe fd02 	bl	8001b08 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0f2      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003112:	f7ff fbe8 	bl	80028e6 <LL_RCC_IsActiveFlag_HPRE>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f1      	beq.n	8003100 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d016      	beq.n	8003156 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff faf2 	bl	8002716 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003132:	f7fe fce9 	bl	8001b08 <HAL_GetTick>
 8003136:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800313a:	f7fe fce5 	bl	8001b08 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0d5      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800314c:	f7ff fbdd 	bl	800290a <LL_RCC_IsActiveFlag_C2HPRE>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f1      	beq.n	800313a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff faeb 	bl	8002742 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800316c:	f7fe fccc 	bl	8001b08 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003174:	f7fe fcc8 	bl	8001b08 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0b8      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003186:	f7ff fbd3 	bl	8002930 <LL_RCC_IsActiveFlag_SHDHPRE>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f1      	beq.n	8003174 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fae5 	bl	8002770 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031a6:	f7fe fcaf 	bl	8001b08 <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ae:	f7fe fcab 	bl	8001b08 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e09b      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80031c0:	f7ff fbc9 	bl	8002956 <LL_RCC_IsActiveFlag_PPRE1>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f1      	beq.n	80031ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d017      	beq.n	8003206 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fadb 	bl	8002798 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e2:	f7fe fc91 	bl	8001b08 <HAL_GetTick>
 80031e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ea:	f7fe fc8d 	bl	8001b08 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e07d      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80031fc:	f7ff fbbd 	bl	800297a <LL_RCC_IsActiveFlag_PPRE2>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f1      	beq.n	80031ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d043      	beq.n	800329a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d106      	bne.n	8003228 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800321a:	f7ff f87b 	bl	8002314 <LL_RCC_HSE_IsReady>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d11e      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e067      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d106      	bne.n	800323e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003230:	f7ff fb16 	bl	8002860 <LL_RCC_PLL_IsReady>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d113      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e05c      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003246:	f7ff f9e3 	bl	8002610 <LL_RCC_MSI_IsReady>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d108      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e051      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003254:	f7ff f88e 	bl	8002374 <LL_RCC_HSI_IsReady>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e04a      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fa21 	bl	80026ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326c:	f7fe fc4c 	bl	8001b08 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe fc48 	bl	8001b08 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e036      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	f7ff fa24 	bl	80026d6 <LL_RCC_GetSysClkSource>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	429a      	cmp	r2, r3
 8003298:	d1ec      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d21b      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 0207 	bic.w	r2, r3, #7
 80032b0:	4913      	ldr	r1, [pc, #76]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe fc26 	bl	8001b08 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032c0:	f7fe fc22 	bl	8001b08 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e012      	b.n	80032f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HAL_RCC_ClockConfig+0x278>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d1ef      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032e0:	f000 f87e 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_RCC_ClockConfig+0x27c>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80032ea:	f7fe fc19 	bl	8001b20 <HAL_GetTickPrio>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fbbb 	bl	8001a6c <HAL_InitTick>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58004000 	.word	0x58004000
 8003304:	20000008 	.word	0x20000008

08003308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	f7ff f9e2 	bl	80026d6 <LL_RCC_GetSysClkSource>
 8003312:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800331a:	f7ff f99e 	bl	800265a <LL_RCC_MSI_GetRange>
 800331e:	4603      	mov	r3, r0
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	4a2b      	ldr	r2, [pc, #172]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	e04b      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b04      	cmp	r3, #4
 8003334:	d102      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003336:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	e045      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b08      	cmp	r3, #8
 8003340:	d10a      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003342:	f7fe ffb7 	bl	80022b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d102      	bne.n	8003352 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800334c:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e03a      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	e037      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003358:	f7ff fab9 	bl	80028ce <LL_RCC_PLL_GetMainSource>
 800335c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d003      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x64>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d003      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0x6a>
 800336a:	e00d      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800336e:	60bb      	str	r3, [r7, #8]
        break;
 8003370:	e015      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003372:	f7fe ff9f 	bl	80022b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d102      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800337c:	4b16      	ldr	r3, [pc, #88]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800337e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003380:	e00d      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003382:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003384:	60bb      	str	r3, [r7, #8]
        break;
 8003386:	e00a      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003388:	f7ff f967 	bl	800265a <LL_RCC_MSI_GetRange>
 800338c:	4603      	mov	r3, r0
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4a0f      	ldr	r2, [pc, #60]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339a:	60bb      	str	r3, [r7, #8]
        break;
 800339c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800339e:	f7ff fa71 	bl	8002884 <LL_RCC_PLL_GetN>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	fb03 f402 	mul.w	r4, r3, r2
 80033aa:	f7ff fa84 	bl	80028b6 <LL_RCC_PLL_GetDivider>
 80033ae:	4603      	mov	r3, r0
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	3301      	adds	r3, #1
 80033b4:	fbb4 f4f3 	udiv	r4, r4, r3
 80033b8:	f7ff fa71 	bl	800289e <LL_RCC_PLL_GetR>
 80033bc:	4603      	mov	r3, r0
 80033be:	0f5b      	lsrs	r3, r3, #29
 80033c0:	3301      	adds	r3, #1
 80033c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80033c6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd90      	pop	{r4, r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08005bb8 	.word	0x08005bb8
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	01e84800 	.word	0x01e84800

080033e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b598      	push	{r3, r4, r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80033e4:	f7ff ff90 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80033e8:	4604      	mov	r4, r0
 80033ea:	f7ff f9e9 	bl	80027c0 <LL_RCC_GetAHBPrescaler>
 80033ee:	4603      	mov	r3, r0
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	4a03      	ldr	r2, [pc, #12]	@ (8003404 <HAL_RCC_GetHCLKFreq+0x24>)
 80033f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd98      	pop	{r3, r4, r7, pc}
 8003404:	08005b58 	.word	0x08005b58

08003408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003408:	b598      	push	{r3, r4, r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800340c:	f7ff ffe8 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 8003410:	4604      	mov	r4, r0
 8003412:	f7ff f9ef 	bl	80027f4 <LL_RCC_GetAPB1Prescaler>
 8003416:	4603      	mov	r3, r0
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	fa24 f303 	lsr.w	r3, r4, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd98      	pop	{r3, r4, r7, pc}
 8003430:	08005b98 	.word	0x08005b98

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b598      	push	{r3, r4, r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003438:	f7ff ffd2 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 800343c:	4604      	mov	r4, r0
 800343e:	f7ff f9e5 	bl	800280c <LL_RCC_GetAPB2Prescaler>
 8003442:	4603      	mov	r3, r0
 8003444:	0adb      	lsrs	r3, r3, #11
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_RCC_GetPCLK2Freq+0x28>)
 800344c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd98      	pop	{r3, r4, r7, pc}
 800345c:	08005b98 	.word	0x08005b98

08003460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2bb0      	cmp	r3, #176	@ 0xb0
 800346c:	d903      	bls.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e007      	b.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003486:	f7ff f9a7 	bl	80027d8 <LL_RCC_GetAHB4Prescaler>
 800348a:	4603      	mov	r3, r0
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a0d      	ldr	r2, [pc, #52]	@ (80034c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	0c9c      	lsrs	r4, r3, #18
 80034aa:	f7fe fef5 	bl	8002298 <HAL_PWREx_GetVoltageRange>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4619      	mov	r1, r3
 80034b2:	4620      	mov	r0, r4
 80034b4:	f000 f80c 	bl	80034d0 <RCC_SetFlashLatency>
 80034b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	bf00      	nop
 80034c4:	08005bb8 	.word	0x08005bb8
 80034c8:	08005b58 	.word	0x08005b58
 80034cc:	431bde83 	.word	0x431bde83

080034d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b093      	sub	sp, #76	@ 0x4c
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80034da:	4b37      	ldr	r3, [pc, #220]	@ (80035b8 <RCC_SetFlashLatency+0xe8>)
 80034dc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80034e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80034e6:	4a35      	ldr	r2, [pc, #212]	@ (80035bc <RCC_SetFlashLatency+0xec>)
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80034f2:	4b33      	ldr	r3, [pc, #204]	@ (80035c0 <RCC_SetFlashLatency+0xf0>)
 80034f4:	f107 040c 	add.w	r4, r7, #12
 80034f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80034fe:	2300      	movs	r3, #0
 8003500:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003508:	d11a      	bne.n	8003540 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800350a:	2300      	movs	r3, #0
 800350c:	643b      	str	r3, [r7, #64]	@ 0x40
 800350e:	e013      	b.n	8003538 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3348      	adds	r3, #72	@ 0x48
 8003516:	443b      	add	r3, r7
 8003518:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d807      	bhi.n	8003532 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	3348      	adds	r3, #72	@ 0x48
 8003528:	443b      	add	r3, r7
 800352a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800352e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003530:	e020      	b.n	8003574 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	3301      	adds	r3, #1
 8003536:	643b      	str	r3, [r7, #64]	@ 0x40
 8003538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800353a:	2b03      	cmp	r3, #3
 800353c:	d9e8      	bls.n	8003510 <RCC_SetFlashLatency+0x40>
 800353e:	e019      	b.n	8003574 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003544:	e013      	b.n	800356e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3348      	adds	r3, #72	@ 0x48
 800354c:	443b      	add	r3, r7
 800354e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d807      	bhi.n	8003568 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	3348      	adds	r3, #72	@ 0x48
 800355e:	443b      	add	r3, r7
 8003560:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003564:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8003566:	e005      	b.n	8003574 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800356a:	3301      	adds	r3, #1
 800356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003570:	2b02      	cmp	r3, #2
 8003572:	d9e8      	bls.n	8003546 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003574:	4b13      	ldr	r3, [pc, #76]	@ (80035c4 <RCC_SetFlashLatency+0xf4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f023 0207 	bic.w	r2, r3, #7
 800357c:	4911      	ldr	r1, [pc, #68]	@ (80035c4 <RCC_SetFlashLatency+0xf4>)
 800357e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003584:	f7fe fac0 	bl	8001b08 <HAL_GetTick>
 8003588:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800358a:	e008      	b.n	800359e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800358c:	f7fe fabc 	bl	8001b08 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e007      	b.n	80035ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800359e:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <RCC_SetFlashLatency+0xf4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d1ef      	bne.n	800358c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	374c      	adds	r7, #76	@ 0x4c
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd90      	pop	{r4, r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08005b2c 	.word	0x08005b2c
 80035bc:	08005b3c 	.word	0x08005b3c
 80035c0:	08005b48 	.word	0x08005b48
 80035c4:	58004000 	.word	0x58004000

080035c8 <LL_RCC_LSE_IsEnabled>:
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <LL_RCC_LSE_IsEnabled+0x18>
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_RCC_LSE_IsReady>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d101      	bne.n	8003604 <LL_RCC_LSE_IsReady+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_RCC_LSE_IsReady+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_RCC_MSI_EnablePLLMode>:
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_RCC_SetRFWKPClockSource>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003642:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <LL_RCC_SetSMPSClockSource>:
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4313      	orrs	r3, r2
 8003674:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <LL_RCC_SetSMPSPrescaler>:
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4313      	orrs	r3, r2
 800369c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_RCC_SetUSARTClockSource>:
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <LL_RCC_SetLPUARTClockSource>:
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_SetI2CClockSource>:
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800370e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800371a:	43db      	mvns	r3, r3
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_RCC_SetLPTIMClockSource>:
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003748:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0c1b      	lsrs	r3, r3, #16
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800375e:	4313      	orrs	r3, r2
 8003760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_RCC_SetSAIClockSource>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003784:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_RCC_SetRNGClockSource>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80037b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_RCC_SetCLK48ClockSource>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_RCC_SetUSBClockSource>:
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ffe3 	bl	80037c8 <LL_RCC_SetCLK48ClockSource>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <LL_RCC_SetADCClockSource>:
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800381e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_SetRTCClockSource>:
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003846:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800384a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_RCC_GetRTCClockSource>:
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_RCC_ForceBackupDomainReset>:
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_RCC_ReleaseBackupDomainReset>:
{
 800389e:	b480      	push	{r7}
 80038a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_RCC_PLLSAI1_Enable>:
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_RCC_PLLSAI1_Disable>:
{
 80038de:	b480      	push	{r7}
 80038e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80038e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038f0:	6013      	str	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_PLLSAI1_IsReady>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800390a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800390e:	d101      	bne.n	8003914 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800392c:	2300      	movs	r3, #0
 800392e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d034      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003944:	d021      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003946:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800394a:	d81b      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800394c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003950:	d01d      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003956:	d815      	bhi.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003960:	d110      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800396c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003970:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003972:	e00d      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f000 f94d 	bl	8003c18 <RCCEx_PLLSAI1_ConfigNP>
 800397e:	4603      	mov	r3, r0
 8003980:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	77fb      	strb	r3, [r7, #31]
        break;
 8003988:	e002      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800398e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003990:	7ffb      	ldrb	r3, [r7, #31]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d105      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fee8 	bl	8003770 <LL_RCC_SetSAIClockSource>
 80039a0:	e001      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d046      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80039b2:	f7ff ff56 	bl	8003862 <LL_RCC_GetRTCClockSource>
 80039b6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d03c      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80039c2:	f7fe fc59 	bl	8002278 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d105      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff30 	bl	8003836 <LL_RCC_SetRTCClockSource>
 80039d6:	e02e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80039e2:	f7ff ff4b 	bl	800387c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80039e6:	f7ff ff5a 	bl	800389e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80039f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003a02:	f7ff fde1 	bl	80035c8 <LL_RCC_LSE_IsEnabled>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d114      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a0c:	f7fe f87c 	bl	8001b08 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a12:	e00b      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fe f878 	bl	8001b08 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d902      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	77fb      	strb	r3, [r7, #31]
              break;
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003a2c:	f7ff fdde 	bl	80035ec <LL_RCC_LSE_IsReady>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d1ee      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003a36:	7ffb      	ldrb	r3, [r7, #31]
 8003a38:	77bb      	strb	r3, [r7, #30]
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7ffb      	ldrb	r3, [r7, #31]
 8003a3e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff fe2a 	bl	80036aa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fe35 	bl	80036d6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d004      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff fe5d 	bl	800373c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fe52 	bl	800373c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d004      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fe2a 	bl	8003702 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fe1f 	bl	8003702 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fe8d 	bl	80037f4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae2:	d107      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003afc:	d10b      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f8e3 	bl	8003cce <RCCEx_PLLSAI1_ConfigNQ>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003b0c:	7ffb      	ldrb	r3, [r7, #31]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
 8003b14:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02b      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b34:	d003      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d105      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fe2a 	bl	800379c <LL_RCC_SetRNGClockSource>
 8003b48:	e00a      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7ff fe21 	bl	800379c <LL_RCC_SetRNGClockSource>
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fe34 	bl	80037c8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003b68:	d107      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d022      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff fe3d 	bl	800380a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b98:	d107      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bb2:	d10b      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f8e3 	bl	8003d84 <RCCEx_PLLSAI1_ConfigNR>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7ffb      	ldrb	r3, [r7, #31]
 8003bca:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fd26 	bl	800362e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fd45 	bl	8003682 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fd2c 	bl	800365a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003c02:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003c10:	f7ff fcfe 	bl	8003610 <LL_RCC_MSI_EnablePLLMode>
}
 8003c14:	bf00      	nop
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003c24:	f7ff fe5b 	bl	80038de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c28:	f7fd ff6e 	bl	8001b08 <HAL_GetTick>
 8003c2c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c2e:	e009      	b.n	8003c44 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c30:	f7fd ff6a 	bl	8001b08 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d902      	bls.n	8003c44 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	73fb      	strb	r3, [r7, #15]
      break;
 8003c42:	e004      	b.n	8003c4e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003c44:	f7ff fe5a 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d137      	bne.n	8003cc4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003c82:	f7ff fe1d 	bl	80038c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c86:	f7fd ff3f 	bl	8001b08 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003c8c:	e009      	b.n	8003ca2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c8e:	f7fd ff3b 	bl	8001b08 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d902      	bls.n	8003ca2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	73fb      	strb	r3, [r7, #15]
        break;
 8003ca0:	e004      	b.n	8003cac <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ca2:	f7ff fe2b 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d1f0      	bne.n	8003c8e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003cda:	f7ff fe00 	bl	80038de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003cde:	f7fd ff13 	bl	8001b08 <HAL_GetTick>
 8003ce2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ce4:	e009      	b.n	8003cfa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ce6:	f7fd ff0f 	bl	8001b08 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d902      	bls.n	8003cfa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e004      	b.n	8003d04 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003cfa:	f7ff fdff 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d137      	bne.n	8003d7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d34:	4313      	orrs	r3, r2
 8003d36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003d38:	f7ff fdc2 	bl	80038c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3c:	f7fd fee4 	bl	8001b08 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d42:	e009      	b.n	8003d58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d44:	f7fd fee0 	bl	8001b08 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	73fb      	strb	r3, [r7, #15]
        break;
 8003d56:	e004      	b.n	8003d62 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003d58:	f7ff fdd0 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d1f0      	bne.n	8003d44 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d76:	4313      	orrs	r3, r2
 8003d78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003d90:	f7ff fda5 	bl	80038de <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d94:	f7fd feb8 	bl	8001b08 <HAL_GetTick>
 8003d98:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003d9a:	e009      	b.n	8003db0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d9c:	f7fd feb4 	bl	8001b08 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d902      	bls.n	8003db0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	73fb      	strb	r3, [r7, #15]
      break;
 8003dae:	e004      	b.n	8003dba <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003db0:	f7ff fda4 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d137      	bne.n	8003e30 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003dee:	f7ff fd67 	bl	80038c0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df2:	f7fd fe89 	bl	8001b08 <HAL_GetTick>
 8003df6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003df8:	e009      	b.n	8003e0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dfa:	f7fd fe85 	bl	8001b08 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d902      	bls.n	8003e0e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003e0c:	e004      	b.n	8003e18 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003e0e:	f7ff fd75 	bl	80038fc <LL_RCC_PLLSAI1_IsReady>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d1f0      	bne.n	8003dfa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d108      	bne.n	8003e30 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e049      	b.n	8003ee0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd fbc3 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	4619      	mov	r1, r3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	f000 fb95 	bl	80045a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d001      	beq.n	8003f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e02e      	b.n	8003f5e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a17      	ldr	r2, [pc, #92]	@ (8003f6c <HAL_TIM_Base_Start+0x84>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start+0x34>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1a:	d115      	bne.n	8003f48 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	4b13      	ldr	r3, [pc, #76]	@ (8003f70 <HAL_TIM_Base_Start+0x88>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d015      	beq.n	8003f5a <HAL_TIM_Base_Start+0x72>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f34:	d011      	beq.n	8003f5a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0201 	orr.w	r2, r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f46:	e008      	b.n	8003f5a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	00010007 	.word	0x00010007

08003f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e049      	b.n	800401a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f841 	bl	8004022 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4610      	mov	r0, r2
 8003fb4:	f000 faf8 	bl	80045a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_TIM_PWM_Start+0x24>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	bf14      	ite	ne
 8004054:	2301      	movne	r3, #1
 8004056:	2300      	moveq	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e03c      	b.n	80040d6 <HAL_TIM_PWM_Start+0x9e>
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d109      	bne.n	8004076 <HAL_TIM_PWM_Start+0x3e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	bf14      	ite	ne
 800406e:	2301      	movne	r3, #1
 8004070:	2300      	moveq	r3, #0
 8004072:	b2db      	uxtb	r3, r3
 8004074:	e02f      	b.n	80040d6 <HAL_TIM_PWM_Start+0x9e>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d109      	bne.n	8004090 <HAL_TIM_PWM_Start+0x58>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e022      	b.n	80040d6 <HAL_TIM_PWM_Start+0x9e>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d109      	bne.n	80040aa <HAL_TIM_PWM_Start+0x72>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	bf14      	ite	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e015      	b.n	80040d6 <HAL_TIM_PWM_Start+0x9e>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x8c>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e008      	b.n	80040d6 <HAL_TIM_PWM_Start+0x9e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e079      	b.n	80041d2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0xb6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ec:	e023      	b.n	8004136 <HAL_TIM_PWM_Start+0xfe>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0xc6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040fc:	e01b      	b.n	8004136 <HAL_TIM_PWM_Start+0xfe>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xd6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800410c:	e013      	b.n	8004136 <HAL_TIM_PWM_Start+0xfe>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d104      	bne.n	800411e <HAL_TIM_PWM_Start+0xe6>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800411c:	e00b      	b.n	8004136 <HAL_TIM_PWM_Start+0xfe>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b10      	cmp	r3, #16
 8004122:	d104      	bne.n	800412e <HAL_TIM_PWM_Start+0xf6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800412c:	e003      	b.n	8004136 <HAL_TIM_PWM_Start+0xfe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	6839      	ldr	r1, [r7, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdbc 	bl	8004cbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a24      	ldr	r2, [pc, #144]	@ (80041dc <HAL_TIM_PWM_Start+0x1a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_TIM_PWM_Start+0x12a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a23      	ldr	r2, [pc, #140]	@ (80041e0 <HAL_TIM_PWM_Start+0x1a8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIM_PWM_Start+0x12a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <HAL_TIM_PWM_Start+0x1ac>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PWM_Start+0x12e>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_TIM_PWM_Start+0x130>
 8004166:	2300      	movs	r3, #0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800417a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <HAL_TIM_PWM_Start+0x1a4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_TIM_PWM_Start+0x158>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800418e:	d115      	bne.n	80041bc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <HAL_TIM_PWM_Start+0x1b0>)
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	d015      	beq.n	80041ce <HAL_TIM_PWM_Start+0x196>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a8:	d011      	beq.n	80041ce <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	e008      	b.n	80041ce <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e000      	b.n	80041d0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800
 80041e8:	00010007 	.word	0x00010007

080041ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004206:	2302      	movs	r3, #2
 8004208:	e0ff      	b.n	800440a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b14      	cmp	r3, #20
 8004216:	f200 80f0 	bhi.w	80043fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800421a:	a201      	add	r2, pc, #4	@ (adr r2, 8004220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800421c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004220:	08004275 	.word	0x08004275
 8004224:	080043fb 	.word	0x080043fb
 8004228:	080043fb 	.word	0x080043fb
 800422c:	080043fb 	.word	0x080043fb
 8004230:	080042b5 	.word	0x080042b5
 8004234:	080043fb 	.word	0x080043fb
 8004238:	080043fb 	.word	0x080043fb
 800423c:	080043fb 	.word	0x080043fb
 8004240:	080042f7 	.word	0x080042f7
 8004244:	080043fb 	.word	0x080043fb
 8004248:	080043fb 	.word	0x080043fb
 800424c:	080043fb 	.word	0x080043fb
 8004250:	08004337 	.word	0x08004337
 8004254:	080043fb 	.word	0x080043fb
 8004258:	080043fb 	.word	0x080043fb
 800425c:	080043fb 	.word	0x080043fb
 8004260:	08004379 	.word	0x08004379
 8004264:	080043fb 	.word	0x080043fb
 8004268:	080043fb 	.word	0x080043fb
 800426c:	080043fb 	.word	0x080043fb
 8004270:	080043b9 	.word	0x080043b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fa04 	bl	8004688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	619a      	str	r2, [r3, #24]
      break;
 80042b2:	e0a5      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fa60 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6999      	ldr	r1, [r3, #24]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	619a      	str	r2, [r3, #24]
      break;
 80042f4:	e084      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fab9 	bl	8004874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0208 	orr.w	r2, r2, #8
 8004310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0204 	bic.w	r2, r2, #4
 8004320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	61da      	str	r2, [r3, #28]
      break;
 8004334:	e064      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fb11 	bl	8004964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	021a      	lsls	r2, r3, #8
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	61da      	str	r2, [r3, #28]
      break;
 8004376:	e043      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fb4e 	bl	8004a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043b6:	e023      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb86 	bl	8004ad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043f8:	e002      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
      break;
 80043fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b6      	b.n	800459e <HAL_TIM_ConfigClockSource+0x18a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800444e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800445a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446c:	d03e      	beq.n	80044ec <HAL_TIM_ConfigClockSource+0xd8>
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004472:	f200 8087 	bhi.w	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447a:	f000 8086 	beq.w	800458a <HAL_TIM_ConfigClockSource+0x176>
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004482:	d87f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004484:	2b70      	cmp	r3, #112	@ 0x70
 8004486:	d01a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xaa>
 8004488:	2b70      	cmp	r3, #112	@ 0x70
 800448a:	d87b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 800448c:	2b60      	cmp	r3, #96	@ 0x60
 800448e:	d050      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x11e>
 8004490:	2b60      	cmp	r3, #96	@ 0x60
 8004492:	d877      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004494:	2b50      	cmp	r3, #80	@ 0x50
 8004496:	d03c      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0xfe>
 8004498:	2b50      	cmp	r3, #80	@ 0x50
 800449a:	d873      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 800449c:	2b40      	cmp	r3, #64	@ 0x40
 800449e:	d058      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x13e>
 80044a0:	2b40      	cmp	r3, #64	@ 0x40
 80044a2:	d86f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044a4:	2b30      	cmp	r3, #48	@ 0x30
 80044a6:	d064      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044a8:	2b30      	cmp	r3, #48	@ 0x30
 80044aa:	d86b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d060      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d867      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d05a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044bc:	e062      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	f000 fbd5 	bl	8004c7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80044e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	609a      	str	r2, [r3, #8]
      break;
 80044ea:	e04f      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	f000 fbbe 	bl	8004c7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800450e:	609a      	str	r2, [r3, #8]
      break;
 8004510:	e03c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800451e:	461a      	mov	r2, r3
 8004520:	f000 fb30 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2150      	movs	r1, #80	@ 0x50
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fb89 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004530:	e02c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800453e:	461a      	mov	r2, r3
 8004540:	f000 fb4f 	bl	8004be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2160      	movs	r1, #96	@ 0x60
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fb79 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004550:	e01c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	461a      	mov	r2, r3
 8004560:	f000 fb10 	bl	8004b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2140      	movs	r1, #64	@ 0x40
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fb69 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004570:	e00c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 fb60 	bl	8004c42 <TIM_ITRx_SetConfig>
      break;
 8004582:	e003      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      break;
 8004588:	e000      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800458a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a30      	ldr	r2, [pc, #192]	@ (800467c <TIM_Base_SetConfig+0xd4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x20>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a27      	ldr	r2, [pc, #156]	@ (800467c <TIM_Base_SetConfig+0xd4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x52>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x52>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a24      	ldr	r2, [pc, #144]	@ (8004680 <TIM_Base_SetConfig+0xd8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x52>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a23      	ldr	r2, [pc, #140]	@ (8004684 <TIM_Base_SetConfig+0xdc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a12      	ldr	r2, [pc, #72]	@ (800467c <TIM_Base_SetConfig+0xd4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_Base_SetConfig+0xa0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <TIM_Base_SetConfig+0xd8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_Base_SetConfig+0xa0>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a10      	ldr	r2, [pc, #64]	@ (8004684 <TIM_Base_SetConfig+0xdc>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d103      	bne.n	8004650 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f023 0201 	bic.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]
  }
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800

08004688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0201 	bic.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f023 0302 	bic.w	r3, r3, #2
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a24      	ldr	r2, [pc, #144]	@ (8004774 <TIM_OC1_SetConfig+0xec>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d007      	beq.n	80046f8 <TIM_OC1_SetConfig+0x70>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <TIM_OC1_SetConfig+0xf0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC1_SetConfig+0x70>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a22      	ldr	r2, [pc, #136]	@ (800477c <TIM_OC1_SetConfig+0xf4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d10c      	bne.n	8004712 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f023 0308 	bic.w	r3, r3, #8
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0304 	bic.w	r3, r3, #4
 8004710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a17      	ldr	r2, [pc, #92]	@ (8004774 <TIM_OC1_SetConfig+0xec>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d007      	beq.n	800472a <TIM_OC1_SetConfig+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <TIM_OC1_SetConfig+0xf4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d003      	beq.n	800472a <TIM_OC1_SetConfig+0xa2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a14      	ldr	r2, [pc, #80]	@ (8004778 <TIM_OC1_SetConfig+0xf0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d111      	bne.n	800474e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	bf00      	nop
 800476a:	371c      	adds	r7, #28
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40012c00 	.word	0x40012c00
 8004778:	40014800 	.word	0x40014800
 800477c:	40014400 	.word	0x40014400

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0210 	bic.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <TIM_OC2_SetConfig+0xe8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d10d      	bne.n	8004800 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <TIM_OC2_SetConfig+0xe8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d007      	beq.n	8004818 <TIM_OC2_SetConfig+0x98>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a18      	ldr	r2, [pc, #96]	@ (800486c <TIM_OC2_SetConfig+0xec>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d003      	beq.n	8004818 <TIM_OC2_SetConfig+0x98>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <TIM_OC2_SetConfig+0xf0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d113      	bne.n	8004840 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800481e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800

08004874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <TIM_OC3_SetConfig+0xe4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10d      	bne.n	80048f2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a18      	ldr	r2, [pc, #96]	@ (8004958 <TIM_OC3_SetConfig+0xe4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d007      	beq.n	800490a <TIM_OC3_SetConfig+0x96>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a17      	ldr	r2, [pc, #92]	@ (800495c <TIM_OC3_SetConfig+0xe8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d003      	beq.n	800490a <TIM_OC3_SetConfig+0x96>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <TIM_OC3_SetConfig+0xec>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d113      	bne.n	8004932 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800

08004964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	031b      	lsls	r3, r3, #12
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a14      	ldr	r2, [pc, #80]	@ (8004a14 <TIM_OC4_SetConfig+0xb0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC4_SetConfig+0x74>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a13      	ldr	r2, [pc, #76]	@ (8004a18 <TIM_OC4_SetConfig+0xb4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC4_SetConfig+0x74>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <TIM_OC4_SetConfig+0xb8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d109      	bne.n	80049ec <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40012c00 	.word	0x40012c00
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <TIM_OC5_SetConfig+0xa4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_OC5_SetConfig+0x6a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a12      	ldr	r2, [pc, #72]	@ (8004ac8 <TIM_OC5_SetConfig+0xa8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_OC5_SetConfig+0x6a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a11      	ldr	r2, [pc, #68]	@ (8004acc <TIM_OC5_SetConfig+0xac>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d109      	bne.n	8004a9e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800

08004ad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	051b      	lsls	r3, r3, #20
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <TIM_OC6_SetConfig+0xa8>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d007      	beq.n	8004b3c <TIM_OC6_SetConfig+0x6c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <TIM_OC6_SetConfig+0xac>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d003      	beq.n	8004b3c <TIM_OC6_SetConfig+0x6c>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a12      	ldr	r2, [pc, #72]	@ (8004b80 <TIM_OC6_SetConfig+0xb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d109      	bne.n	8004b50 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	f023 0201 	bic.w	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f023 030a 	bic.w	r3, r3, #10
 8004bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b087      	sub	sp, #28
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f023 0210 	bic.w	r2, r3, #16
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	621a      	str	r2, [r3, #32]
}
 8004c36:	bf00      	nop
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f043 0307 	orr.w	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	609a      	str	r2, [r3, #8]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 031f 	and.w	r3, r3, #31
 8004cce:	2201      	movs	r2, #1
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1a      	ldr	r2, [r3, #32]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	401a      	ands	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 031f 	and.w	r3, r3, #31
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	621a      	str	r2, [r3, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e04a      	b.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d108      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d88:	d10c      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	40012c00 	.word	0x40012c00

08004dc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e06e      	b.n	8004ec2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a17      	ldr	r2, [pc, #92]	@ (8004ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d11c      	bne.n	8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	051b      	lsls	r3, r3, #20
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40012c00 	.word	0x40012c00

08004ed4 <LL_RCC_GetUSARTClockSource>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4013      	ands	r3, r2
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <LL_RCC_GetLPUARTClockSource>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4013      	ands	r3, r2
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e042      	b.n	8004fac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fc fc47 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2224      	movs	r2, #36	@ 0x24
 8004f42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0201 	bic.w	r2, r2, #1
 8004f54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa50 	bl	8005404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f825 	bl	8004fb4 <UART_SetConfig>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e01b      	b.n	8004fac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 facf 	bl	8005548 <UART_CheckIdleState>
 8004faa:	4603      	mov	r3, r0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fb8:	b08c      	sub	sp, #48	@ 0x30
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4baf      	ldr	r3, [pc, #700]	@ (80052a0 <UART_SetConfig+0x2ec>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fec:	430b      	orrs	r3, r1
 8004fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4aa4      	ldr	r2, [pc, #656]	@ (80052a4 <UART_SetConfig+0x2f0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800501c:	4313      	orrs	r3, r2
 800501e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800502a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005034:	430b      	orrs	r3, r1
 8005036:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	f023 010f 	bic.w	r1, r3, #15
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a95      	ldr	r2, [pc, #596]	@ (80052a8 <UART_SetConfig+0x2f4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d125      	bne.n	80050a4 <UART_SetConfig+0xf0>
 8005058:	2003      	movs	r0, #3
 800505a:	f7ff ff3b 	bl	8004ed4 <LL_RCC_GetUSARTClockSource>
 800505e:	4603      	mov	r3, r0
 8005060:	2b03      	cmp	r3, #3
 8005062:	d81b      	bhi.n	800509c <UART_SetConfig+0xe8>
 8005064:	a201      	add	r2, pc, #4	@ (adr r2, 800506c <UART_SetConfig+0xb8>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	0800507d 	.word	0x0800507d
 8005070:	0800508d 	.word	0x0800508d
 8005074:	08005085 	.word	0x08005085
 8005078:	08005095 	.word	0x08005095
 800507c:	2301      	movs	r3, #1
 800507e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005082:	e042      	b.n	800510a <UART_SetConfig+0x156>
 8005084:	2302      	movs	r3, #2
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508a:	e03e      	b.n	800510a <UART_SetConfig+0x156>
 800508c:	2304      	movs	r3, #4
 800508e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005092:	e03a      	b.n	800510a <UART_SetConfig+0x156>
 8005094:	2308      	movs	r3, #8
 8005096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509a:	e036      	b.n	800510a <UART_SetConfig+0x156>
 800509c:	2310      	movs	r3, #16
 800509e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a2:	e032      	b.n	800510a <UART_SetConfig+0x156>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a7e      	ldr	r2, [pc, #504]	@ (80052a4 <UART_SetConfig+0x2f0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d12a      	bne.n	8005104 <UART_SetConfig+0x150>
 80050ae:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80050b2:	f7ff ff1f 	bl	8004ef4 <LL_RCC_GetLPUARTClockSource>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050bc:	d01a      	beq.n	80050f4 <UART_SetConfig+0x140>
 80050be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050c2:	d81b      	bhi.n	80050fc <UART_SetConfig+0x148>
 80050c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c8:	d00c      	beq.n	80050e4 <UART_SetConfig+0x130>
 80050ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ce:	d815      	bhi.n	80050fc <UART_SetConfig+0x148>
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <UART_SetConfig+0x128>
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d8:	d008      	beq.n	80050ec <UART_SetConfig+0x138>
 80050da:	e00f      	b.n	80050fc <UART_SetConfig+0x148>
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050e2:	e012      	b.n	800510a <UART_SetConfig+0x156>
 80050e4:	2302      	movs	r3, #2
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ea:	e00e      	b.n	800510a <UART_SetConfig+0x156>
 80050ec:	2304      	movs	r3, #4
 80050ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f2:	e00a      	b.n	800510a <UART_SetConfig+0x156>
 80050f4:	2308      	movs	r3, #8
 80050f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fa:	e006      	b.n	800510a <UART_SetConfig+0x156>
 80050fc:	2310      	movs	r3, #16
 80050fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005102:	e002      	b.n	800510a <UART_SetConfig+0x156>
 8005104:	2310      	movs	r3, #16
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a65      	ldr	r2, [pc, #404]	@ (80052a4 <UART_SetConfig+0x2f0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f040 8097 	bne.w	8005244 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005116:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800511a:	2b08      	cmp	r3, #8
 800511c:	d823      	bhi.n	8005166 <UART_SetConfig+0x1b2>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <UART_SetConfig+0x170>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005149 	.word	0x08005149
 8005128:	08005167 	.word	0x08005167
 800512c:	08005151 	.word	0x08005151
 8005130:	08005167 	.word	0x08005167
 8005134:	08005157 	.word	0x08005157
 8005138:	08005167 	.word	0x08005167
 800513c:	08005167 	.word	0x08005167
 8005140:	08005167 	.word	0x08005167
 8005144:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe f95e 	bl	8003408 <HAL_RCC_GetPCLK1Freq>
 800514c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800514e:	e010      	b.n	8005172 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b56      	ldr	r3, [pc, #344]	@ (80052ac <UART_SetConfig+0x2f8>)
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005154:	e00d      	b.n	8005172 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fe f8d7 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 800515a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800515c:	e009      	b.n	8005172 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005164:	e005      	b.n	8005172 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005170:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 812b 	beq.w	80053d0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	4a4c      	ldr	r2, [pc, #304]	@ (80052b0 <UART_SetConfig+0x2fc>)
 8005180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005184:	461a      	mov	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	fbb3 f3f2 	udiv	r3, r3, r2
 800518c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	4413      	add	r3, r2
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	429a      	cmp	r2, r3
 800519c:	d305      	bcc.n	80051aa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d903      	bls.n	80051b2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80051b0:	e10e      	b.n	80053d0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	2200      	movs	r2, #0
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	60fa      	str	r2, [r7, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <UART_SetConfig+0x2fc>)
 80051c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2200      	movs	r2, #0
 80051c8:	603b      	str	r3, [r7, #0]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051d4:	f7fb fbc2 	bl	800095c <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	020b      	lsls	r3, r1, #8
 80051ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ee:	0202      	lsls	r2, r0, #8
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	6849      	ldr	r1, [r1, #4]
 80051f4:	0849      	lsrs	r1, r1, #1
 80051f6:	2000      	movs	r0, #0
 80051f8:	460c      	mov	r4, r1
 80051fa:	4605      	mov	r5, r0
 80051fc:	eb12 0804 	adds.w	r8, r2, r4
 8005200:	eb43 0905 	adc.w	r9, r3, r5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	469a      	mov	sl, r3
 800520c:	4693      	mov	fp, r2
 800520e:	4652      	mov	r2, sl
 8005210:	465b      	mov	r3, fp
 8005212:	4640      	mov	r0, r8
 8005214:	4649      	mov	r1, r9
 8005216:	f7fb fba1 	bl	800095c <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4613      	mov	r3, r2
 8005220:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005228:	d308      	bcc.n	800523c <UART_SetConfig+0x288>
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005230:	d204      	bcs.n	800523c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e0c9      	b.n	80053d0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005242:	e0c5      	b.n	80053d0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	69db      	ldr	r3, [r3, #28]
 8005248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524c:	d16d      	bne.n	800532a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800524e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005252:	3b01      	subs	r3, #1
 8005254:	2b07      	cmp	r3, #7
 8005256:	d82d      	bhi.n	80052b4 <UART_SetConfig+0x300>
 8005258:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <UART_SetConfig+0x2ac>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005281 	.word	0x08005281
 8005264:	08005289 	.word	0x08005289
 8005268:	080052b5 	.word	0x080052b5
 800526c:	0800528f 	.word	0x0800528f
 8005270:	080052b5 	.word	0x080052b5
 8005274:	080052b5 	.word	0x080052b5
 8005278:	080052b5 	.word	0x080052b5
 800527c:	08005297 	.word	0x08005297
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005280:	f7fe f8d8 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005286:	e01b      	b.n	80052c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005288:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <UART_SetConfig+0x2f8>)
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800528c:	e018      	b.n	80052c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528e:	f7fe f83b 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 8005292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005294:	e014      	b.n	80052c0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800529c:	e010      	b.n	80052c0 <UART_SetConfig+0x30c>
 800529e:	bf00      	nop
 80052a0:	cfff69f3 	.word	0xcfff69f3
 80052a4:	40008000 	.word	0x40008000
 80052a8:	40013800 	.word	0x40013800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	08005bf8 	.word	0x08005bf8
      default:
        pclk = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80052be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8084 	beq.w	80053d0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	4a4b      	ldr	r2, [pc, #300]	@ (80053fc <UART_SetConfig+0x448>)
 80052ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80052da:	005a      	lsls	r2, r3, #1
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	441a      	add	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2b0f      	cmp	r3, #15
 80052f2:	d916      	bls.n	8005322 <UART_SetConfig+0x36e>
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fa:	d212      	bcs.n	8005322 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f023 030f 	bic.w	r3, r3, #15
 8005304:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	b29b      	uxth	r3, r3
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	b29a      	uxth	r2, r3
 8005312:	8bfb      	ldrh	r3, [r7, #30]
 8005314:	4313      	orrs	r3, r2
 8005316:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	8bfa      	ldrh	r2, [r7, #30]
 800531e:	60da      	str	r2, [r3, #12]
 8005320:	e056      	b.n	80053d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005328:	e052      	b.n	80053d0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800532e:	3b01      	subs	r3, #1
 8005330:	2b07      	cmp	r3, #7
 8005332:	d822      	bhi.n	800537a <UART_SetConfig+0x3c6>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x388>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	0800535d 	.word	0x0800535d
 8005340:	08005365 	.word	0x08005365
 8005344:	0800537b 	.word	0x0800537b
 8005348:	0800536b 	.word	0x0800536b
 800534c:	0800537b 	.word	0x0800537b
 8005350:	0800537b 	.word	0x0800537b
 8005354:	0800537b 	.word	0x0800537b
 8005358:	08005373 	.word	0x08005373
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535c:	f7fe f86a 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8005360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005362:	e010      	b.n	8005386 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005364:	4b26      	ldr	r3, [pc, #152]	@ (8005400 <UART_SetConfig+0x44c>)
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005368:	e00d      	b.n	8005386 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536a:	f7fd ffcd 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 800536e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005370:	e009      	b.n	8005386 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005378:	e005      	b.n	8005386 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005384:	bf00      	nop
    }

    if (pclk != 0U)
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d021      	beq.n	80053d0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <UART_SetConfig+0x448>)
 8005392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005396:	461a      	mov	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	fbb3 f2f2 	udiv	r2, r3, r2
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	441a      	add	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b0f      	cmp	r3, #15
 80053b4:	d909      	bls.n	80053ca <UART_SetConfig+0x416>
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053bc:	d205      	bcs.n	80053ca <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
 80053c8:	e002      	b.n	80053d0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2201      	movs	r2, #1
 80053dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2200      	movs	r2, #0
 80053e4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3730      	adds	r7, #48	@ 0x30
 80053f4:	46bd      	mov	sp, r7
 80053f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053fa:	bf00      	nop
 80053fc:	08005bf8 	.word	0x08005bf8
 8005400:	00f42400 	.word	0x00f42400

08005404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01a      	beq.n	800551a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005502:	d10a      	bne.n	800551a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b098      	sub	sp, #96	@ 0x60
 800554c:	af02      	add	r7, sp, #8
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005558:	f7fc fad6 	bl	8001b08 <HAL_GetTick>
 800555c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d12f      	bne.n	80055cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800556c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005574:	2200      	movs	r2, #0
 8005576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f88e 	bl	800569c <UART_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d022      	beq.n	80055cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800559a:	653b      	str	r3, [r7, #80]	@ 0x50
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e6      	bne.n	8005586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e063      	b.n	8005694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d149      	bne.n	800566e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e2:	2200      	movs	r2, #0
 80055e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f857 	bl	800569c <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03c      	beq.n	800566e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	623b      	str	r3, [r7, #32]
   return(result);
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005612:	633b      	str	r3, [r7, #48]	@ 0x30
 8005614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e6      	bne.n	80055f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	60fb      	str	r3, [r7, #12]
   return(result);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f023 0301 	bic.w	r3, r3, #1
 800563c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3308      	adds	r3, #8
 8005644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005646:	61fa      	str	r2, [r7, #28]
 8005648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	69b9      	ldr	r1, [r7, #24]
 800564c:	69fa      	ldr	r2, [r7, #28]
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	617b      	str	r3, [r7, #20]
   return(result);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e012      	b.n	8005694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3758      	adds	r7, #88	@ 0x58
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ac:	e04f      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b4:	d04b      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fc fa27 	bl	8001b08 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <UART_WaitOnFlagUntilTimeout+0x30>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e04e      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d037      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b80      	cmp	r3, #128	@ 0x80
 80056e2:	d034      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b40      	cmp	r3, #64	@ 0x40
 80056e8:	d031      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d110      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2208      	movs	r2, #8
 80056fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f838 	bl	8005776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2208      	movs	r2, #8
 800570a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e029      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005728:	d111      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f81e 	bl	8005776 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e00f      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	429a      	cmp	r2, r3
 800576a:	d0a0      	beq.n	80056ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005776:	b480      	push	{r7}
 8005778:	b095      	sub	sp, #84	@ 0x54
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579c:	643b      	str	r3, [r7, #64]	@ 0x40
 800579e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	e853 3f00 	ldrex	r3, [r3]
 80057be:	61fb      	str	r3, [r7, #28]
   return(result);
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e3      	bne.n	80057b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d118      	bne.n	8005822 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f023 0310 	bic.w	r3, r3, #16
 8005804:	647b      	str	r3, [r7, #68]	@ 0x44
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6979      	ldr	r1, [r7, #20]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	613b      	str	r3, [r7, #16]
   return(result);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2220      	movs	r2, #32
 8005826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005836:	bf00      	nop
 8005838:	3754      	adds	r7, #84	@ 0x54
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_UARTEx_DisableFifoMode+0x16>
 8005854:	2302      	movs	r3, #2
 8005856:	e027      	b.n	80058a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	@ 0x24
 8005864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005886:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e02d      	b.n	8005928 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2224      	movs	r2, #36	@ 0x24
 80058d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f84f 	bl	80059ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e02d      	b.n	80059a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2224      	movs	r2, #36	@ 0x24
 8005954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f811 	bl	80059ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059cc:	e031      	b.n	8005a32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059ce:	2308      	movs	r3, #8
 80059d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059d2:	2308      	movs	r3, #8
 80059d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0e5b      	lsrs	r3, r3, #25
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	0f5b      	lsrs	r3, r3, #29
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	7b3a      	ldrb	r2, [r7, #12]
 80059fa:	4911      	ldr	r1, [pc, #68]	@ (8005a40 <UARTEx_SetNbDataToProcess+0x94>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a02:	7b3a      	ldrb	r2, [r7, #12]
 8005a04:	490f      	ldr	r1, [pc, #60]	@ (8005a44 <UARTEx_SetNbDataToProcess+0x98>)
 8005a06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	7b7a      	ldrb	r2, [r7, #13]
 8005a18:	4909      	ldr	r1, [pc, #36]	@ (8005a40 <UARTEx_SetNbDataToProcess+0x94>)
 8005a1a:	5c8a      	ldrb	r2, [r1, r2]
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a20:	7b7a      	ldrb	r2, [r7, #13]
 8005a22:	4908      	ldr	r1, [pc, #32]	@ (8005a44 <UARTEx_SetNbDataToProcess+0x98>)
 8005a24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	08005c10 	.word	0x08005c10
 8005a44:	08005c18 	.word	0x08005c18

08005a48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a50:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005a54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4013      	ands	r3, r2
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <memset>:
 8005aba:	4402      	add	r2, r0
 8005abc:	4603      	mov	r3, r0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d100      	bne.n	8005ac4 <memset+0xa>
 8005ac2:	4770      	bx	lr
 8005ac4:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac8:	e7f9      	b.n	8005abe <memset+0x4>
	...

08005acc <__libc_init_array>:
 8005acc:	b570      	push	{r4, r5, r6, lr}
 8005ace:	4d0d      	ldr	r5, [pc, #52]	@ (8005b04 <__libc_init_array+0x38>)
 8005ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8005b08 <__libc_init_array+0x3c>)
 8005ad2:	1b64      	subs	r4, r4, r5
 8005ad4:	10a4      	asrs	r4, r4, #2
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	42a6      	cmp	r6, r4
 8005ada:	d109      	bne.n	8005af0 <__libc_init_array+0x24>
 8005adc:	4d0b      	ldr	r5, [pc, #44]	@ (8005b0c <__libc_init_array+0x40>)
 8005ade:	4c0c      	ldr	r4, [pc, #48]	@ (8005b10 <__libc_init_array+0x44>)
 8005ae0:	f000 f818 	bl	8005b14 <_init>
 8005ae4:	1b64      	subs	r4, r4, r5
 8005ae6:	10a4      	asrs	r4, r4, #2
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42a6      	cmp	r6, r4
 8005aec:	d105      	bne.n	8005afa <__libc_init_array+0x2e>
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af4:	4798      	blx	r3
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7ee      	b.n	8005ad8 <__libc_init_array+0xc>
 8005afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afe:	4798      	blx	r3
 8005b00:	3601      	adds	r6, #1
 8005b02:	e7f2      	b.n	8005aea <__libc_init_array+0x1e>
 8005b04:	08005c28 	.word	0x08005c28
 8005b08:	08005c28 	.word	0x08005c28
 8005b0c:	08005c28 	.word	0x08005c28
 8005b10:	08005c2c 	.word	0x08005c2c

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
